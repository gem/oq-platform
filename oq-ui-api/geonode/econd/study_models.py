__author__ = 'Simon Ruffle, CAR'

from django.db import models

# Static lookup tables
from econd.static_lookup_models import *
from econd.event_models import *

###############
# Study Level Models
###############


class Geobase(models.Model):
      id = models.AutoField(primary_key=True, null=False, help_text='Primary Key: Internal database id', )
      name = models.CharField(max_length=255, null=False, default='unknown', verbose_name='Geobase name', help_text='The name of the geobase, in the form country_GADM level number e.g. Italy_1 or Japan_2. ', )
      regioncode = models.ForeignKey(Lookupregion, db_column='regioncode', max_length=10, null=False, default='0', verbose_name='World region', help_text='The region of the world where the geobase is located', )
      tablename = models.CharField(max_length=255, null=False, default='geobase_', verbose_name='Geobase table name', help_text='The name of the new database table that will contain the boundaries that comprise this geobase. It should start with geobase_ and be of the form "geobase_gadm_china_2" meaning China GADM level 2, and be lowercase with no spaces or punctuation', blank=True, )
      idcolumnname = models.CharField(max_length=255, null=True, blank=True, default='id_', verbose_name='ID column name', help_text='The id column in the table that will be used when the boundary is referenced from the location record. It should be lowercase with no spaces or punctuation', )
      namecolumnname = models.CharField(max_length=255, null=True, blank=True, default='name_', verbose_name='Boundary name column name', help_text='The name of the column in the table that contains the name of the boundary. It should be lowercase with no spaces or punctuation', )
      namecolumn2name = models.CharField(max_length=255, null=True, blank=True, verbose_name='Next level up name column name', help_text='Optional: The name of the column in the table that contains the name of the boundary that is one higher up in the administrative system. It should be lowercase with no spaces or punctuation', )
      namecolumn3name = models.CharField(max_length=255, null=True, blank=True, verbose_name='Next level up name column name', help_text='Optional: The name of the column in the table that contains the name of the boundary that is one even higher up in the administrative system. It should be lowercase with no spaces or punctuation', )
      geomcolumnname = models.CharField(max_length=255, null=True, blank=True, default='the_geom', verbose_name='Geometry column name', help_text='The name of the geometry column in the table that contains the boundaries, normally this is "the_geom"', )
      geobase_s = models.CharField(max_length=255, null=True, blank=True, default='GADM', verbose_name='Geobase source', help_text='The source of the geobase, e.g. GADM', )
      ownerid = models.IntegerField(null=False, default='1', verbose_name='Owner ID', help_text='ID of the creator/owner of the record', )
      lastupdatebyid = models.IntegerField(null=False, default='1', verbose_name='Last update by ID', help_text='ID of the last person to update this record', )
      lastupdate = models.DateTimeField(null=True, blank=True, help_text='Last record update date', )

      class Meta:
            db_table = u'econd\".\"geobase'

      def __unicode__(self):
            return self.name

class Study(models.Model):
      id = models.AutoField(primary_key=True, null=False, help_text='Primary Key: Internal database id', unique=True, )
      name = models.CharField(max_length=255, null=False, default='untitled', verbose_name='Study name', help_text='The name of the study', )
      studytypecode = models.ForeignKey(Lookupstudytype, db_column='studytypecode', related_name='+', max_length=10, null=False, default='B', verbose_name='Study type', help_text='The type of the study', )
      authors = models.CharField(max_length=255, null=True, blank=True, verbose_name='Author(s)', help_text='The authors of the study, last name first e.g: Smith, J. A; Jones, F;', )
      studydate = models.DateTimeField(null=True, blank=True, verbose_name='Study publication date', help_text='Study publication date, eg 1980-05-31', )
      parentid = models.ForeignKey(Event, db_column='parentid', related_name='+', null=False, default='0', verbose_name='Parent event', help_text='The event of which this is a study', )
      sources = models.TextField(null=True, blank=True, verbose_name='Sources and web links for the study', help_text='Sources and web links for the study', )
      copyrightmessage = models.CharField(max_length=600, null=True, blank=True, verbose_name='Copyright message', help_text='Optional field if sources require a copyright message on their material', )
      partner = models.CharField(max_length=255, null=True, blank=True, verbose_name='GEMECD contributing partner', help_text='The name of the GEMECD partner who developed this study record in the GEMECD database', )
      originallanguage = models.CharField(max_length=50, null=True, blank=True, verbose_name='Language of original study', help_text='The original language of the study', )
      regioncovered = models.CharField(max_length=255, null=True, blank=True, verbose_name='Country covered', help_text='The country, province or region covered by the study, described in words', )
      geobaseid = models.ForeignKey(Geobase, db_column='geobaseid', related_name='+', null=False, default='0', verbose_name='Geobase', help_text='The geographic basis of the study, eg Italy GADM Level 1. Can also be intensity level zones for the event', )
      studynarrative = models.TextField(null=True, blank=True, verbose_name='Study description', help_text='Descriptive text describing the study', )
      inventoryclasses_c = models.TextField(null=True, blank=True, verbose_name='Notes on the inventory classes in this study', help_text='Descriptive text describing the inventory classes in this study', )
      damagescalename = models.CharField(max_length=255, null=True, blank=True, verbose_name='Name of the damage scale', help_text='Name of the damage scale, if any', )
      damagescale_c = models.TextField(null=True, blank=True, verbose_name='Notes on the damage scale in this study', help_text='Descriptive text describing the damage scale in this study', )
      #damagemappingid = models.ForeignKey(Unifieddamagescale, db_column='damagemappingid', related_name='+', null=False, default='0', verbose_name='Mapping to unified damage scale', help_text='Mapping to unified damage scale', )
      damagepercentage = models.ForeignKey(Lookupyesno, db_column='damagepercentage', related_name='+', null=False, default='0', verbose_name='Damage data is in percentages', help_text='Is the damage data in percentages?', )
      casualtyscalename = models.CharField(max_length=255, null=True, blank=True, verbose_name='Name of the casualty scale', help_text='Name of the casualty scale, if any', )
      casualtyscale_c = models.TextField(null=True, blank=True, verbose_name='Notes on the casualty scale in this study', help_text='Descriptive text describing the casualty scale in this study', )
      #casualtymappingid = models.ForeignKey(Unifiedcasualtyscale, db_column='casualtymappingid', related_name='+', null=False, default='0', verbose_name='Mapping to unified casualty scale', help_text='Mapping to unified casualty scale', )
      casualtypercentage = models.ForeignKey(Lookupyesno, db_column='casualtypercentage', related_name='+', null=False, default='0', verbose_name='Casualty data is in percentages', help_text='Is the casualty data in percentages?', )
      overallimpact = models.TextField(null=True, blank=True, verbose_name='Overall impact', help_text='Overall impact of shaking', )
      reliabilitydataqualitycode = models.ForeignKey(Lookupqualitymetric, db_column='reliabilitydataqualitycode', related_name='+', max_length=10, null=False, default='0', verbose_name='Reliability: Data quality', help_text='Quality of source data', )
      reliabilitydocumentationqualitycode = models.ForeignKey(Lookupqualitymetric, db_column='reliabilitydocumentationqualitycode', related_name='+', max_length=10, null=False, default='0', verbose_name='Reliability: Documentation quality', help_text='How well the author has documented the data, analysis and results', )
      reliabilitylocationalcode = models.ForeignKey(Lookupqualitymetric, db_column='reliabilitylocationalcode', related_name='+', max_length=10, null=False, default='0', verbose_name='Reliability: Locational', help_text='How reliable the geographic locations are', )
      reliability_c = models.TextField(null=True, blank=True, verbose_name='Study reliability: comment', help_text='A comment on the study reliability', )
      significantfigures = models.IntegerField(null=True, blank=True, verbose_name='Significant figures', help_text='The significant figures for the data in the study', )
      ownerid = models.IntegerField(null=False, default='1', verbose_name='Owner ID', help_text='ID of the creator/owner of the record', )
      lastupdatebyid = models.IntegerField(null=False, default='1', verbose_name='Last update by ID', help_text='ID of the last person to update this record', )
      lastupdate = models.DateTimeField(null=True, blank=True, help_text='Last record update date', )

      class Meta:
            db_table = u'econd\".\"study'

      def __unicode__(self):
            return self.name


class Socioeconomicstudy(models.Model):
      id = models.AutoField(primary_key=True, null=False, help_text='Primary Key: Internal database id', )
      name = models.CharField(max_length=255, null=False, default='untitled', verbose_name='Study name', help_text='The name of the socio-economic study', )
      authors = models.CharField(max_length=255, null=True, blank=True, verbose_name='Author(s)', help_text='The authors of the study', )
      studydate = models.DateTimeField(null=True, blank=True, verbose_name='Study publication date', help_text='Study publication date, eg 1980-05-31', )
      parentid = models.ForeignKey(Event, db_column='parentid', related_name='+', null=False, default='0', verbose_name='Parent event', help_text='The event of which this is a study', )
      regioncovered = models.CharField(max_length=255, null=True, blank=True, verbose_name='Region covered', help_text='The country, province or region covered by the study, described in words', )
      partner = models.CharField(max_length=255, null=True, blank=True, verbose_name='GEMECD contributing partner', help_text='The name of the GEMECD partner who developed this socioeconomic study', )
      geobaseid = models.ForeignKey(Geobase, db_column='geobaseid', related_name='+', null=False, default='0', verbose_name='Geobase', help_text='The geographic basis of the study, eg Italy GADM Level 1. Can also be intensity level zones for the event', )
      studynarrative = models.TextField(null=True, blank=True, verbose_name='Notes on the Study', help_text='Overview descriptive text describing the study', )
      numberofdwellingunitsdestroyed = models.FloatField(verbose_name='Number of dwelling units destroyed', help_text='Number of dwelling units destroyed (incl. shaking and secondary hazards)', null=True, blank=True, )
      numberofdwellingunitsdestroyed_s = models.CharField(max_length=600, null=True, blank=True, verbose_name='Number of dwelling units destroyed: source', help_text='The source of the data', )
      numberofdwellingunitsdestroyed_c = models.TextField(null=True, blank=True, verbose_name='Number of dwelling units destroyed: General comments', help_text='A comment on the data', )
      numberofdwellingunitsdestroyed_q = models.ForeignKey(Lookupstatus, db_column='numberofdwellingunitsdestroyed_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Number of dwelling units destroyed: status', help_text='The status of the data', )
      numberofdwellingunitsdamaged = models.FloatField(verbose_name='Number of dwelling units damaged', help_text='Number of dwelling units damaged (incl. shaking and secondary hazards)', null=True, blank=True, )
      numberofdwellingunitsdamaged_s = models.CharField(max_length=600, null=True, blank=True, verbose_name='Number of dwelling units damaged: source', help_text='The source of the data', )
      numberofdwellingunitsdamaged_c = models.TextField(null=True, blank=True, verbose_name='Number of dwelling units damaged: General comments', help_text='A comment on the data', )
      numberofdwellingunitsdamaged_q = models.ForeignKey(Lookupstatus, db_column='numberofdwellingunitsdamaged_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Number of dwelling units damaged: status', help_text='The status of the data', )
      totalnumberofhouseholdscountry = models.FloatField(verbose_name='Total number of households in the affected country', help_text='Total number of households in the affected country (contemporaneous)', null=True, blank=True, )
      totalnumberofhouseholdscountry_s = models.CharField(max_length=600, null=True, blank=True, verbose_name='Total number of households in the affected country: source', help_text='The source of the data', )
      totalnumberofhouseholdscountry_c = models.TextField(null=True, blank=True, verbose_name='Total number of households in the affected country: General comments', help_text='A comment on the data', )
      totalnumberofhouseholdscountry_q = models.ForeignKey(Lookupstatus, db_column='totalnumberofhouseholdscountry_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Total number of households in the affected country: status', help_text='The status of the data', )
      totalnumberofhouseholdsarea = models.FloatField(verbose_name='Total number of households in the affected area', help_text='Estimated from EXPO-CAT total number of households in the affected area (contemporaneous)', null=True, blank=True, )
      totalnumberofhouseholdsarea_s = models.CharField(max_length=600, null=True, blank=True, verbose_name='Total number of households in the affected area: source', help_text='The source of the data', )
      totalnumberofhouseholdsarea_c = models.TextField(null=True, blank=True, verbose_name='Total number of households in the affected area: General comments', help_text='A comment on the data', )
      totalnumberofhouseholdsarea_q = models.ForeignKey(Lookupstatus, db_column='totalnumberofhouseholdsarea_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Total number of households in the affected area: status', help_text='The status of the data', )
      numberofbuildingsdestroyed = models.FloatField(verbose_name='Number of buildings destroyed', help_text='Number of buildings destroyed (incl. shaking and secondary hazards)', null=True, blank=True, )
      numberofbuildingsdestroyed_s = models.CharField(max_length=600, null=True, blank=True, verbose_name='Number of buildings destroyed: source', help_text='The source of the data', )
      numberofbuildingsdestroyed_c = models.TextField(null=True, blank=True, verbose_name='Number of buildings destroyed: General comments', help_text='A comment on the data', )
      numberofbuildingsdestroyed_q = models.ForeignKey(Lookupstatus, db_column='numberofbuildingsdestroyed_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Number of buildings destroyed: status', help_text='The status of the data', )
      numberofbuildingsdamaged = models.FloatField(verbose_name='Number of buildings damaged', help_text='Number of buildings damaged (incl. shaking and secondary hazards)', null=True, blank=True, )
      numberofbuildingsdamaged_s = models.CharField(max_length=600, null=True, blank=True, verbose_name='Number of buildings damaged: source', help_text='The source of the data', )
      numberofbuildingsdamaged_c = models.TextField(null=True, blank=True, verbose_name='Number of buildings damaged: General comments', help_text='A comment on the data', )
      numberofbuildingsdamaged_q = models.ForeignKey(Lookupstatus, db_column='numberofbuildingsdamaged_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Number of buildings damaged: status', help_text='The status of the data', )
      numberofeducationalbuildingsdestroyedordamaged = models.FloatField(verbose_name='Number of educational buildings destroyed or damaged', help_text='Educational buildings destroyed or damaged', null=True, blank=True, )
      numberofeducationalbuildingsdestroyedordamaged_s = models.CharField(max_length=600, null=True, blank=True, verbose_name='Number of educational buildings destroyed or damaged: source', help_text='The source of the data', )
      numberofeducationalbuildingsdestroyedordamaged_c = models.TextField(null=True, blank=True, verbose_name='Number of educational buildings destroyed or damaged: General comments', help_text='A comment on the data', )
      numberofeducationalbuildingsdestroyedordamaged_q = models.ForeignKey(Lookupstatus, db_column='numberofeducationalbuildingsdestroyedordamaged_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Number of educational buildings destroyed or damaged: status', help_text='The status of the data', )
      percentageofeducationalbuildingsdestroyedordamaged = models.FloatField(verbose_name='Percentage of educational buildings destroyed or damaged', help_text='Educational buildings destroyed or damaged', null=True, blank=True, )
      percentageofeducationalbuildingsdestroyedordamaged_s = models.CharField(max_length=600, null=True, blank=True, verbose_name='Percentage of educational buildings destroyed or damaged: source', help_text='The source of the data', )
      percentageofeducationalbuildingsdestroyedordamaged_c = models.TextField(null=True, blank=True, verbose_name='Percentage of educational buildings destroyed or damaged: General comments', help_text='A comment on the data', )
      percentageofeducationalbuildingsdestroyedordamaged_q = models.ForeignKey(Lookupstatus, db_column='percentageofeducationalbuildingsdestroyedordamaged_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Percentage of educational buildings destroyed or damaged: status', help_text='The status of the data', )
      costofeducationalbuildingsdestroyedordamaged = models.FloatField(verbose_name='Cost of damage to educational buildings', help_text='Educational buildings destroyed or damaged (contemporaneous)', null=True, blank=True, )
      costofeducationalbuildingsdestroyedordamaged_s = models.CharField(max_length=600, null=True, blank=True, verbose_name='Cost of damage to educational buildings: source', help_text='The source of the data', )
      costofeducationalbuildingsdestroyedordamaged_c = models.TextField(null=True, blank=True, verbose_name='Cost of damage to educational buildings: General comments', help_text='A comment on the data', )
      costofeducationalbuildingsdestroyedordamaged_q = models.ForeignKey(Lookupstatus, db_column='costofeducationalbuildingsdestroyedordamaged_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Cost of damage to educational buildings: status', help_text='The status of the data', )
      numberofhealthfacilitiesdestroyedordamaged = models.FloatField(verbose_name='Number of health facilities destroyed or damaged', help_text='Health facilities (hospitals and clinics) destroyed or damaged', null=True, blank=True, )
      numberofhealthfacilitiesdestroyedordamaged_s = models.CharField(max_length=600, null=True, blank=True, verbose_name='Number of health facilities destroyed or damaged: source', help_text='The source of the data', )
      numberofhealthfacilitiesdestroyedordamaged_c = models.TextField(null=True, blank=True, verbose_name='Number of health facilities destroyed or damaged: General comments', help_text='A comment on the data', )
      numberofhealthfacilitiesdestroyedordamaged_q = models.ForeignKey(Lookupstatus, db_column='numberofhealthfacilitiesdestroyedordamaged_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Number of health facilities destroyed or damaged: status', help_text='The status of the data', )
      percentageofhealthfacilitiesdestroyedordamaged = models.FloatField(verbose_name='Percentage of health facilities destroyed or damaged', help_text='Health facilities (hospitals and clinics) destroyed or damaged', null=True, blank=True, )
      percentageofhealthfacilitiesdestroyedordamaged_s = models.CharField(max_length=600, null=True, blank=True, verbose_name='Percentage of health facilities destroyed or damaged: source', help_text='The source of the data', )
      percentageofhealthfacilitiesdestroyedordamaged_c = models.TextField(null=True, blank=True, verbose_name='Percentage of health facilities destroyed or damaged: General comments', help_text='A comment on the data', )
      percentageofhealthfacilitiesdestroyedordamaged_q = models.ForeignKey(Lookupstatus, db_column='percentageofhealthfacilitiesdestroyedordamaged_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Percentage of health facilities destroyed or damaged: status', help_text='The status of the data', )
      costofhealthfacilitiesdestroyedordamaged = models.FloatField(verbose_name='Cost of health facilities destroyed or damaged', help_text='Health facilities (hospitals and clinics) destroyed or damaged (contemporaneous)', null=True, blank=True, )
      costofhealthfacilitiesdestroyedordamaged_s = models.CharField(max_length=600, null=True, blank=True, verbose_name='Cost of health facilities destroyed or damaged: source', help_text='The source of the data', )
      costofhealthfacilitiesdestroyedordamaged_c = models.TextField(null=True, blank=True, verbose_name='Cost of health facilities destroyed or damaged: General comments', help_text='A comment on the data', )
      costofhealthfacilitiesdestroyedordamaged_q = models.ForeignKey(Lookupstatus, db_column='costofhealthfacilitiesdestroyedordamaged_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Cost of health facilities destroyed or damaged: status', help_text='The status of the data', )
      numberofpeopletempwithoutelectricity = models.FloatField(verbose_name='Number of people without electricity in the immediate aftermath', help_text='Number of people losing electricity supply in the immediate aftermath', null=True, blank=True, )
      numberofpeopletempwithoutelectricity_s = models.CharField(max_length=600, null=True, blank=True, verbose_name='Number of people without electricity in the immediate aftermath: source', help_text='The source of the data', )
      numberofpeopletempwithoutelectricity_c = models.TextField(null=True, blank=True, verbose_name='Number of people without electricity in the immediate aftermath: General comments', help_text='A comment on the data', )
      numberofpeopletempwithoutelectricity_q = models.ForeignKey(Lookupstatus, db_column='numberofpeopletempwithoutelectricity_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Number of people without electricity in the immediate aftermath: status', help_text='The status of the data', )
      percentageofpeopletempwithoutelectricity = models.FloatField(verbose_name='Percentage of people without electricity in the immediate aftermath', help_text='Percentage of people losing electricity supply in the immediate aftermath', null=True, blank=True, )
      percentageofpeopletempwithoutelectricity_s = models.CharField(max_length=600, null=True, blank=True, verbose_name='Percentage of people without electricity in the immediate aftermath: source', help_text='The source of the data', )
      percentageofpeopletempwithoutelectricity_c = models.TextField(null=True, blank=True, verbose_name='Percentage of people without electricity in the immediate aftermath: General comments', help_text='A comment on the data', )
      percentageofpeopletempwithoutelectricity_q = models.ForeignKey(Lookupstatus, db_column='percentageofpeopletempwithoutelectricity_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Percentage of people without electricity in the immediate aftermath: status', help_text='The status of the data', )
      datestampfornumberofpeopletempwithoutelectricity = models.DateTimeField(verbose_name='Date stamp for number of people without electricity in the immediate aftermath', help_text='Date stamp for the number of people losing electricity supply in the immediate aftermath - eg 1980-05-31', null=True, blank=True, )
      datestampfornumberofpeopletempwithoutelectricity_s = models.CharField(max_length=600, null=True, blank=True, verbose_name='Date stamp for number of people without electricity in the immediate aftermath: source', help_text='The source of the data', )
      datestampfornumberofpeopletempwithoutelectricity_c = models.TextField(null=True, blank=True, verbose_name='Date stamp for number of people without electricity in the immediate aftermath: General comments', help_text='A comment on the data', )
      datestampfornumberofpeopletempwithoutelectricity_q = models.ForeignKey(Lookupstatus, db_column='datestampfornumberofpeopletempwithoutelectricity_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Date stamp for number of people without electricity in the immediate aftermath: status', help_text='The status of the data', )
      numberofpeoplesigwithoutelectricity = models.FloatField(verbose_name='Number of people without electricity for a significant time', help_text='Number of people losing electricity supply for a significant duration of time', null=True, blank=True, )
      numberofpeoplesigwithoutelectricity_s = models.CharField(max_length=600, null=True, blank=True, verbose_name='Number of people without electricity for a significant time: source', help_text='The source of the data', )
      numberofpeoplesigwithoutelectricity_c = models.TextField(null=True, blank=True, verbose_name='Number of people without electricity for a significant time: General comments', help_text='A comment on the data', )
      numberofpeoplesigwithoutelectricity_q = models.ForeignKey(Lookupstatus, db_column='numberofpeoplesigwithoutelectricity_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Number of people without electricity for a significant time: status', help_text='The status of the data', )
      percentageofpeoplesigwithoutelectricity = models.FloatField(verbose_name='Percentage of people without electricity for a significant time', help_text='Percentage of people losing electricity supply for a significant duration of time', null=True, blank=True, )
      percentageofpeoplesigwithoutelectricity_s = models.CharField(max_length=600, null=True, blank=True, verbose_name='Percentage of people without electricity for a significant time: source', help_text='The source of the data', )
      percentageofpeoplesigwithoutelectricity_c = models.TextField(null=True, blank=True, verbose_name='Percentage of people without electricity for a significant time: General comments', help_text='A comment on the data', )
      percentageofpeoplesigwithoutelectricity_q = models.ForeignKey(Lookupstatus, db_column='percentageofpeoplesigwithoutelectricity_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Percentage of people without electricity for a significant time: status', help_text='The status of the data', )
      datestampfornumberofpeoplesigwithoutelectricity = models.DateTimeField(verbose_name='Date stamp for number of people without electricity for a significant time', help_text='Date Stamp for the number of people losing electricity supply for a significant duration of time - eg 1980-05-31', null=True, blank=True, )
      datestampfornumberofpeoplesigwithoutelectricity_s = models.CharField(max_length=600, null=True, blank=True, verbose_name='Date stamp for number of people without electricity for a significant time: source', help_text='The source of the data', )
      datestampfornumberofpeoplesigwithoutelectricity_c = models.TextField(null=True, blank=True, verbose_name='Date stamp for number of people without electricity for a significant time: General comments', help_text='A comment on the data', )
      datestampfornumberofpeoplesigwithoutelectricity_q = models.ForeignKey(Lookupstatus, db_column='datestampfornumberofpeoplesigwithoutelectricity_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Date stamp for number of people without electricity for a significant time: status', help_text='The status of the data', )
      numberofpeopletempwithoutwater = models.FloatField(verbose_name='Number of people without water in the immediate aftermath', help_text='Number of people losing water supply in the immediate aftermath', null=True, blank=True, )
      numberofpeopletempwithoutwater_s = models.CharField(max_length=600, null=True, blank=True, verbose_name='Number of people without water in the immediate aftermath: source', help_text='The source of the data', )
      numberofpeopletempwithoutwater_c = models.TextField(null=True, blank=True, verbose_name='Number of people without water in the immediate aftermath: General comments', help_text='A comment on the data', )
      numberofpeopletempwithoutwater_q = models.ForeignKey(Lookupstatus, db_column='numberofpeopletempwithoutwater_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Number of people without water in the immediate aftermath: status', help_text='The status of the data', )
      percentageofpeopletempwithoutwater = models.FloatField(verbose_name='Percentage of people without water in the immediate aftermath', help_text='Percentage of people losing water supply in the immediate aftermath', null=True, blank=True, )
      percentageofpeopletempwithoutwater_s = models.CharField(max_length=600, null=True, blank=True, verbose_name='Percentage of people without water in the immediate aftermath: source', help_text='The source of the data', )
      percentageofpeopletempwithoutwater_c = models.TextField(null=True, blank=True, verbose_name='Percentage of people without water in the immediate aftermath: General comments', help_text='A comment on the data', )
      percentageofpeopletempwithoutwater_q = models.ForeignKey(Lookupstatus, db_column='percentageofpeopletempwithoutwater_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Percentage of people without water in the immediate aftermath: status', help_text='The status of the data', )
      datestampfornumberofpeopletempwithoutwater = models.DateTimeField(verbose_name='Date stamp for number of people without water in the immediate aftermath', help_text='Date stamp for the number of people losing water supply in the immediate aftermath - eg 1980-05-31', null=True, blank=True, )
      datestampfornumberofpeopletempwithoutwater_s = models.CharField(max_length=600, null=True, blank=True, verbose_name='Date stamp for number of people without water in the immediate aftermath: source', help_text='The source of the data', )
      datestampfornumberofpeopletempwithoutwater_c = models.TextField(null=True, blank=True, verbose_name='Date stamp for number of people without water in the immediate aftermath: General comments', help_text='A comment on the data', )
      datestampfornumberofpeopletempwithoutwater_q = models.ForeignKey(Lookupstatus, db_column='datestampfornumberofpeopletempwithoutwater_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Date stamp for number of people without water in the immediate aftermath: status', help_text='The status of the data', )
      numberofpeoplesigwithoutwater = models.FloatField(verbose_name='Number of people without water for a significant time', help_text='Number of people losing water supply for a significant duration of time', null=True, blank=True, )
      numberofpeoplesigwithoutwater_s = models.CharField(max_length=600, null=True, blank=True, verbose_name='Number of people without water for a significant time: source', help_text='The source of the data', )
      numberofpeoplesigwithoutwater_c = models.TextField(null=True, blank=True, verbose_name='Number of people without water for a significant time: General comments', help_text='A comment on the data', )
      numberofpeoplesigwithoutwater_q = models.ForeignKey(Lookupstatus, db_column='numberofpeoplesigwithoutwater_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Number of people without water for a significant time: status', help_text='The status of the data', )
      percentageofpeoplesigwithoutwater = models.FloatField(verbose_name='Percentage of people without water for a significant time', help_text='Percentage of people losing water supply for a significant duration of time', null=True, blank=True, )
      percentageofpeoplesigwithoutwater_s = models.CharField(max_length=600, null=True, blank=True, verbose_name='Percentage of people without water for a significant time: source', help_text='The source of the data', )
      percentageofpeoplesigwithoutwater_c = models.TextField(null=True, blank=True, verbose_name='Percentage of people without water for a significant time: General comments', help_text='A comment on the data', )
      percentageofpeoplesigwithoutwater_q = models.ForeignKey(Lookupstatus, db_column='percentageofpeoplesigwithoutwater_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Percentage of people without water for a significant time: status', help_text='The status of the data', )
      datestampfornumberofpeoplesigwithoutwater = models.DateTimeField(verbose_name='Date stamp for number of people without water for a significant time', help_text='Date stamp for the number of people losing water supply for a significant duration of time', null=True, blank=True, )
      datestampfornumberofpeoplesigwithoutwater_s = models.CharField(max_length=600, null=True, blank=True, verbose_name='Date stamp for number of people without water for a significant time: source', help_text='The source of the data', )
      datestampfornumberofpeoplesigwithoutwater_c = models.TextField(null=True, blank=True, verbose_name='Date stamp for number of people without water for a significant time: General comments', help_text='A comment on the data', )
      datestampfornumberofpeoplesigwithoutwater_q = models.ForeignKey(Lookupstatus, db_column='datestampfornumberofpeoplesigwithoutwater_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Date stamp for number of people without water for a significant time: status', help_text='The status of the data', )
      numberoftemphomeless = models.FloatField(verbose_name='Number of people homeless in the immediate aftermath', help_text='Number of people homeless in the immediate aftermath', null=True, blank=True, )
      numberoftemphomeless_s = models.CharField(max_length=600, null=True, blank=True, verbose_name='Number of people homeless in the immediate aftermath: source', help_text='The source of the data', )
      numberoftemphomeless_c = models.TextField(null=True, blank=True, verbose_name='Number of people homeless in the immediate aftermath: General comments', help_text='A comment on the data', )
      numberoftemphomeless_q = models.ForeignKey(Lookupstatus, db_column='numberoftemphomeless_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Number of people homeless in the immediate aftermath: status', help_text='The status of the data', )
      datestampfornumberoftemphomeless = models.DateTimeField(verbose_name='Date stamp for number of people homeless in the immediate aftermath', help_text='Date Stamp for the number of people homeless in the immediate aftermath', null=True, blank=True, )
      datestampfornumberoftemphomeless_s = models.CharField(max_length=600, null=True, blank=True, verbose_name='Date stamp for number of people homeless in the immediate aftermath: source', help_text='The source of the data', )
      datestampfornumberoftemphomeless_c = models.TextField(null=True, blank=True, verbose_name='Date stamp for number of people homeless in the immediate aftermath: General comments', help_text='A comment on the data', )
      datestampfornumberoftemphomeless_q = models.ForeignKey(Lookupstatus, db_column='datestampfornumberoftemphomeless_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Date stamp for number of people homeless in the immediate aftermath: status', help_text='The status of the data', )
      numberofsighomeless = models.FloatField(verbose_name='Number of people homeless for a significant duration of time', help_text='Number of people homeless for a significant duration of time', null=True, blank=True, )
      numberofsighomeless_s = models.CharField(max_length=600, null=True, blank=True, verbose_name='Number of people homeless for a significant duration of time: source', help_text='The source of the data', )
      numberofsighomeless_c = models.TextField(null=True, blank=True, verbose_name='Number of people homeless for a significant duration of time: General comments', help_text='A comment on the data', )
      numberofsighomeless_q = models.ForeignKey(Lookupstatus, db_column='numberofsighomeless_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Number of people homeless for a significant duration of time: status', help_text='The status of the data', )
      datestampfornumberofsighomeless = models.DateTimeField(verbose_name='Date Stamp for the number of people homeless for a significant duration of time', help_text='Date Stamp for the number of people homeless for a significant duration of time', null=True, blank=True, )
      datestampfornumberofsighomeless_s = models.CharField(max_length=600, null=True, blank=True, verbose_name='Date Stamp for the number of people homeless for a significant duration of time: source', help_text='The source of the data', )
      datestampfornumberofsighomeless_c = models.TextField(null=True, blank=True, verbose_name='Date Stamp for the number of people homeless for a significant duration of time: General comments', help_text='A comment on the data', )
      datestampfornumberofsighomeless_q = models.ForeignKey(Lookupstatus, db_column='datestampfornumberofsighomeless_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Date Stamp for the number of people homeless for a significant duration of time: status', help_text='The status of the data', )
      numberunemployed = models.FloatField(verbose_name='Number of people unemployed due to damage to the production, commercial and service sectors', help_text='Number of people losing employment as a direct result of the damage to the production / commercial / service sector units', null=True, blank=True, )
      numberunemployed_s = models.CharField(max_length=600, null=True, blank=True, verbose_name='Number of people unemployed due to damage to the production, commercial and service sectors: source', help_text='The source of the data', )
      numberunemployed_c = models.TextField(null=True, blank=True, verbose_name='Number of people unemployed due to damage to the production, commercial and service sectors: General comments', help_text='A comment on the data', )
      numberunemployed_q = models.ForeignKey(Lookupstatus, db_column='numberunemployed_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Number of people unemployed due to damage to the production, commercial and service sectors: status', help_text='The status of the data', )
      datestampfornumberunemployed = models.DateTimeField(verbose_name='Date stamp for number of people unemployed after damage to the production, commercial and service sectors', help_text='Date Stamp for the number of people losing employment as a direct result of the damage to the production / commercial / service sector units', null=True, blank=True, )
      datestampfornumberunemployed_s = models.CharField(max_length=600, null=True, blank=True, verbose_name='Date stamp for number of people unemployed after damage to the production, commercial and service sectors: source', help_text='The source of the data', )
      datestampfornumberunemployed_c = models.TextField(null=True, blank=True, verbose_name='Date stamp for number of people unemployed after damage to the production, commercial and service sectors: General comments', help_text='A comment on the data', )
      datestampfornumberunemployed_q = models.ForeignKey(Lookupstatus, db_column='datestampfornumberunemployed_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Date stamp for number of people unemployed after damage to the production, commercial and service sectors: status', help_text='The status of the data', )
      totaldirecteconomicloss = models.FloatField(verbose_name='Total direct economic losses', help_text='Total direct economic losses (contemporaneous)', null=True, blank=True, )
      totaldirecteconomicloss_s = models.CharField(max_length=600, null=True, blank=True, verbose_name='Total direct economic losses', help_text='The source of the data', )
      totaldirecteconomicloss_c = models.TextField(null=True, blank=True, verbose_name='Total direct economic losses: General comments', help_text='A comment on the data', )
      totaldirecteconomicloss_q = models.ForeignKey(Lookupstatus, db_column='totaldirecteconomicloss_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Total direct economic losses: status', help_text='The status of the data', )
      totaldirecteconomiclosspersector = models.TextField(verbose_name='Total direct economic losses per sector', help_text='Total direct economic losses per sector (contemporaneous)', blank=True, )
      totaldirecteconomiclosspersector_s = models.CharField(max_length=600, null=True, blank=True, verbose_name='Total direct economic losses per sector: source', help_text='The source of the data', )
      totaldirecteconomiclosspersector_c = models.TextField(null=True, blank=True, verbose_name='Total direct economic losses per sector: General comments', help_text='A comment on the data', )
      totaldirecteconomiclosspersector_q = models.ForeignKey(Lookupstatus, db_column='totaldirecteconomiclosspersector_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Total direct economic losses per sector: status', help_text='The status of the data', )
      totaldirecteconomiclossbyhazard = models.TextField(verbose_name='Total direct economic losses by type of hazard', help_text='Total direct economic losses by type of hazard (contemporaneous)', blank=True, )
      totaldirecteconomiclossbyhazard_s = models.CharField(max_length=600, null=True, blank=True, verbose_name='Total direct economic losses by type of hazard: source', help_text='The source of the data', )
      totaldirecteconomiclossbyhazard_c = models.TextField(null=True, blank=True, verbose_name='Total direct economic losses by type of hazard: General comments', help_text='A comment on the data', )
      totaldirecteconomiclossbyhazard_q = models.ForeignKey(Lookupstatus, db_column='totaldirecteconomiclossbyhazard_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Total direct economic losses by type of hazard: status', help_text='The status of the data', )
      totalindirecteconomicloss = models.FloatField(verbose_name='Total indirect economic losses', help_text='Total indirect economic losses (contemporaneous)', null=True, blank=True, )
      totalindirecteconomicloss_s = models.CharField(max_length=600, null=True, blank=True, verbose_name='Total indirect economic losses: source', help_text='The source of the data', )
      totalindirecteconomicloss_c = models.TextField(null=True, blank=True, verbose_name='Total indirect economic losses: General comments', help_text='A comment on the data', )
      totalindirecteconomicloss_q = models.ForeignKey(Lookupstatus, db_column='totalindirecteconomicloss_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Total indirect economic losses: status', help_text='The status of the data', )
      totalindirecteconomiclossbycause = models.TextField(verbose_name='Total indirect economic losses by cause', help_text='Total indirect economic losses by cause (in contemporaneous US$)', blank=True, )
      totalindirecteconomiclossbycause_s = models.CharField(max_length=600, null=True, blank=True, verbose_name='Total indirect economic losses by cause: source', help_text='The source of the data', )
      totalindirecteconomiclossbycause_c = models.TextField(null=True, blank=True, verbose_name='Total indirect economic losses by cause: General comments', help_text='A comment on the data', )
      totalindirecteconomiclossbycause_q = models.ForeignKey(Lookupstatus, db_column='totalindirecteconomiclossbycause_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Total indirect economic losses by cause: status', help_text='The status of the data', )
      countrygdp = models.FloatField(verbose_name='Contemporaneous country GDP', help_text='Contemporaneous country GDP (US$)', null=True, blank=True, )
      countrygdp_s = models.CharField(max_length=600, null=True, blank=True, verbose_name='Contemporaneous country GDP: source', help_text='The source of the data', )
      countrygdp_c = models.TextField(null=True, blank=True, verbose_name='Contemporaneous country GDP: General comments', help_text='A comment on the data', )
      countrygdp_q = models.ForeignKey(Lookupstatus, db_column='countrygdp_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Contemporaneous country GDP: status', help_text='The status of the data', )
      totaldirecteconomiclossaspercentofgdp = models.FloatField(verbose_name='Total direct economic losses as % of contemporaneous GDP', help_text='Total direct economic losses as % of contemporaneous GDP', null=True, blank=True, )
      totaldirecteconomiclossaspercentofgdp_s = models.CharField(max_length=600, null=True, blank=True, verbose_name='Total direct economic losses as % of contemporaneous GDP: source', help_text='The source of the data', )
      totaldirecteconomiclossaspercentofgdp_c = models.TextField(null=True, blank=True, verbose_name='Total direct economic losses as % of contemporaneous GDP: General comments', help_text='A comment on the data', )
      totaldirecteconomiclossaspercentofgdp_q = models.ForeignKey(Lookupstatus, db_column='totaldirecteconomiclossaspercentofgdp_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Total direct economic losses as % of contemporaneous GDP: status', help_text='The status of the data', )
      totalindirecteconomiclossaspercentofgdp = models.FloatField(verbose_name='Total indirect economic losses as % of contemporaneous GDP', help_text='Total indirect economic losses as % of contemporaneous GDP', null=True, blank=True, )
      totalindirecteconomiclossaspercentofgdp_s = models.CharField(max_length=600, null=True, blank=True, verbose_name='Total indirect economic losses as % of contemporaneous GDP: source', help_text='The source of the data', )
      totalindirecteconomiclossaspercentofgdp_c = models.TextField(null=True, blank=True, verbose_name='Total indirect economic losses as % of contemporaneous GDP: general comments', help_text='A comment on the data', )
      totalindirecteconomiclossaspercentofgdp_q = models.ForeignKey(Lookupstatus, db_column='totalindirecteconomiclossaspercentofgdp_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Total indirect economic losses as % of contemporaneous GDP: status', help_text='The status of the data', )
      presentcountrygdp = models.FloatField(verbose_name='Present-time country GDP', help_text='Present-time country GDP', null=True, blank=True, )
      presentcountrygdp_s = models.CharField(max_length=600, null=True, blank=True, verbose_name='Present-time country GDP: source', help_text='The source of the data', )
      presentcountrygdp_c = models.TextField(null=True, blank=True, verbose_name='Present-time country GDP: General comments', help_text='A comment on the data', )
      presentcountrygdp_q = models.ForeignKey(Lookupstatus, db_column='presentcountrygdp_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Present-time country GDP: status', help_text='The status of the data', )
      insurancelosses = models.FloatField(verbose_name='Insurance losses', help_text='Insurance losses (contemporaneous)', null=True, blank=True, )
      insurancelosses_s = models.CharField(max_length=600, null=True, blank=True, verbose_name='Insurance losses: source', help_text='The source of the data', )
      insurancelosses_c = models.TextField(null=True, blank=True, verbose_name='Insurance losses: General comments', help_text='A comment on the data', )
      insurancelosses_q = models.ForeignKey(Lookupstatus, db_column='insurancelosses_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Insurance losses: status', help_text='The status of the data', )
      insurancelossesbyhazard = models.TextField(verbose_name='Insurance losses by type of hazard', help_text='Insurance losses (contemporaneous) by type of hazard', blank=True, )
      insurancelossesbyhazard_s = models.CharField(max_length=600, null=True, blank=True, verbose_name='Insurance losses by type of hazard: source', help_text='The source of the data', )
      insurancelossesbyhazard_c = models.TextField(null=True, blank=True, verbose_name='Insurance losses by type of hazard: General comments', help_text='A comment on the data', )
      insurancelossesbyhazard_q = models.ForeignKey(Lookupstatus, db_column='insurancelossesbyhazard_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Insurance losses by type of hazard: status', help_text='The status of the data', )
      insurancelossesbybusiness = models.TextField(verbose_name='Insurance losses by line of business', help_text='Insurance losses (contemporaneous) by line of business', blank=True, )
      insurancelossesbybusiness_s = models.CharField(max_length=600, null=True, blank=True, verbose_name='Insurance losses by line of business: source', help_text='The source of the data', )
      insurancelossesbybusiness_c = models.TextField(null=True, blank=True, verbose_name='Insurance losses by line of business: General comments', help_text='A comment on the data', )
      insurancelossesbybusiness_q = models.ForeignKey(Lookupstatus, db_column='insurancelossesbybusiness_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Insurance losses by line of business: status', help_text='The status of the data', )
      reconstructioncost = models.FloatField(verbose_name='Cost of reconstruction', help_text='Cost of reconstruction (contemporaneous)', null=True, blank=True, )
      reconstructioncost_s = models.CharField(max_length=600, null=True, blank=True, verbose_name='Cost of reconstruction: source', help_text='The source of the data', )
      reconstructioncost_c = models.TextField(null=True, blank=True, verbose_name='Cost of reconstruction: General comments', help_text='A comment on the data', )
      reconstructioncost_q = models.ForeignKey(Lookupstatus, db_column='reconstructioncost_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Cost of reconstruction: status', help_text='The status of the data', )
      aidcontribution = models.FloatField(verbose_name='Amount of aid contribution', help_text='Amount of aid contribution', null=True, blank=True, )
      aidcontribution_s = models.CharField(max_length=600, null=True, blank=True, verbose_name='Amount of aid contribution: source', help_text='The source of the data', )
      aidcontribution_c = models.TextField(null=True, blank=True, verbose_name='Amount of aid contribution: General comments', help_text='A comment on the data', )
      aidcontribution_q = models.ForeignKey(Lookupstatus, db_column='aidcontribution_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Amount of aid contribution: status', help_text='The status of the data', )
      multiplier = models.FloatField(verbose_name='Multiplier to project the contemporaneous losses, costs, aid contributions', help_text='Multiplier to project the contemporaneous losses, costs, aid contributions', null=True, blank=True, )
      multiplier_s = models.CharField(max_length=600, null=True, blank=True, verbose_name='Multiplier to project the contemporaneous losses, costs, aid contributions: source', help_text='The source of the data', )
      multiplier_c = models.TextField(null=True, blank=True, verbose_name='Multiplier to project the contemporaneous losses, costs, aid contributions: General comments', help_text='A comment on the data', )
      multiplier_q = models.ForeignKey(Lookupstatus, db_column='multiplier_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Multiplier to project the contemporaneous losses, costs, aid contributions: status', help_text='The status of the data', )
      reliabilityoverallid = models.ForeignKey(Lookupqualitymetric, db_column='reliabilityoverallid', related_name='+', null=False, default='0', verbose_name='Reliability: Overall', help_text='Overall reliability of source data', )
      reliabilitydataqualityid = models.ForeignKey(Lookupqualitymetric, db_column='reliabilitydataqualityid', related_name='+', null=False, default='0', verbose_name='Reliability: Data quality', help_text='Quality of source data', )
      reliabilitydatarelevanceid = models.ForeignKey(Lookupqualitymetric, db_column='reliabilitydatarelevanceid', related_name='+', null=False, default='0', verbose_name='Reliability: Data relevance', help_text='How well the data matches or envelopes the conditions that will be encountered', )
      reliabilitydocumentationqualityid = models.ForeignKey(Lookupqualitymetric, db_column='reliabilitydocumentationqualityid', related_name='+', null=False, default='0', verbose_name='Reliability: Documentation quality', help_text='How well the author has documented the data, analysis and results', )
      reliabilityrationalityid = models.ForeignKey(Lookupqualitymetric, db_column='reliabilityrationalityid', related_name='+', null=False, default='0', verbose_name='Reliability: Rationality', help_text='How well the the behavior can be explained or rationalized by intuition, calculation or principles of engineering mechanics', )
      reliabilitylocationalid = models.ForeignKey(Lookupqualitymetric, db_column='reliabilitylocationalid', related_name='+', null=False, default='0', verbose_name='Reliability: Locational', help_text='How reliable the geographic locations are', )
      reliability_c = models.TextField(null=True, blank=True, verbose_name='Study reliability: comment', help_text='A comment on the study reliability', )
      surveydata_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Survey data: source', help_text='The source of the survey data', )
      surveydata_c = models.TextField(null=True, blank=True, verbose_name='Survey data: comment', help_text='A comment on the survey data', )
      significantfigures = models.IntegerField(null=True, blank=True, verbose_name='Significant figures', help_text='The significant figures for the data in the study', )
      location = models.CharField(max_length=255, null=True, blank=True, verbose_name='Boundary of study shapefile table name', help_text='The bounding area for the study defined by a shapefile', )
      originallanguage = models.CharField(max_length=50, null=True, blank=True, verbose_name='Language of original study', help_text='The original language of the study', )
      ownerid = models.IntegerField(null=False, default='1', verbose_name='Owner ID', help_text='ID of the creator/owner of the record', )
      lastupdatebyid = models.IntegerField(null=False, default='1', verbose_name='Last update by ID', help_text='ID of the last person to update this record', )
      lastupdate = models.DateTimeField(null=True, blank=True, help_text='Last record update date', )

      class Meta:
            db_table = u'econd\".\"socioeconomicstudy'

      def __unicode__(self):
            return self.name


class Tsunamistudy(models.Model):
      id = models.AutoField(primary_key=True, null=False, help_text='Primary Key: Internal database id', )
      name = models.CharField(max_length=255, null=False, default='untitled', verbose_name='Study name', help_text='The name of the tsunami study', )
      authors = models.CharField(max_length=255, null=True, blank=True, verbose_name='Author(s)', help_text='The authors of the study, last name first e.g: Smith, J. A; Jones, F;', )
      studydate = models.DateTimeField(null=True, blank=True, verbose_name='Study publication date', help_text='Study publication date, eg 1980-05-31', )
      parentid = models.ForeignKey(Event, db_column='parentid', related_name='+', null=False, default='0', verbose_name='Parent event', help_text='The event of which this is a study', )
      sources = models.TextField(null=True, blank=True, verbose_name='Sources and web links for the study', help_text='Sources and web links for the study', )
      partner = models.CharField(max_length=255, null=True, blank=True, verbose_name='GEMECD contributing partner', help_text='The name of the GEMECD partner who developed this study record in the GEMECD database', )
      originallanguage = models.CharField(max_length=50, null=True, blank=True, verbose_name='Language of original study', help_text='The original language of the study', )
      regioncovered = models.CharField(max_length=255, null=True, blank=True, verbose_name='Country covered', help_text='The country, province or region covered by the study, described in words', )
      geobaseid = models.ForeignKey(Geobase, db_column='geobaseid', related_name='+', null=False, default='0', verbose_name='Geobase', help_text='The geographic basis of the study, eg Italy GADM Level 1. Can also be intensity level zones for the event', )
      studynarrative = models.TextField(null=True, blank=True, verbose_name='Study description', help_text='Descriptive text describing the study', )
      inventoryclasses_c = models.TextField(null=True, blank=True, verbose_name='Notes on the inventory classes in this study', help_text='Descriptive text describing the inventory classes in this study', )
      damagescalename = models.CharField(max_length=255, null=True, blank=True, verbose_name='Name of the damage scale', help_text='Name of the damage scale, if any', )
      damagescale_c = models.TextField(null=True, blank=True, verbose_name='Notes on the damage scale in this study', help_text='Descriptive text describing the damage scale in this study', )
      #damagemappingid = models.ForeignKey(Unifieddamagescale, db_column='damagemappingid', related_name='+', null=False, default='0', verbose_name='Mapping to unified damage scale', help_text='Mapping to unified damage scale', )
      damagepercentage = models.ForeignKey(Lookupyesno, db_column='damagepercentage', related_name='+', null=False, default='0', verbose_name='Damage data is in percentages', help_text='Is the damage data in percentages?', )
      casualtyscalename = models.CharField(max_length=255, null=True, blank=True, verbose_name='Name of the casualty scale', help_text='Name of the casualty scale, if any', )
      casualtyscale_c = models.TextField(null=True, blank=True, verbose_name='Notes on the casualty scale in this study', help_text='Descriptive text describing the casualty scale in this study', )
      #casualtymappingid = models.ForeignKey(Unifiedcasualtyscale, db_column='casualtymappingid', related_name='+', null=False, default='0', verbose_name='Mapping to unified casualty scale', help_text='Mapping to unified casualty scale', )
      casualtypercentage = models.ForeignKey(Lookupyesno, db_column='casualtypercentage', related_name='+', null=False, default='0', verbose_name='Casualty data is in percentages', help_text='Is the casualty data in percentages?', )
      totalcoastaffected = models.FloatField(verbose_name='Total length of coast affected', help_text='Total length of coast affected, km', null=True, blank=True, )
      totalcoastaffected_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Total length of coast affected: source', help_text='The source of the data', )
      totalcoastaffected_c = models.TextField(null=True, blank=True, verbose_name='Total length of coast affected: comment', help_text='A comment on the data', )
      totalcoastaffected_q = models.ForeignKey(Lookupstatus, db_column='totalcoastaffected_q', related_name='+', null=False, default='0', verbose_name='Total length of coast affected: status', help_text='The status of the data', )
      totallandflooded = models.FloatField(verbose_name='Total land area flooded by the tsunami', help_text='Total land area flooded by the tsunami, sq km', null=True, blank=True, )
      totallandflooded_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Total land area flooded by the tsunami: source', help_text='The source of the data', )
      totallandflooded_c = models.TextField(null=True, blank=True, verbose_name='Total land area flooded by the tsunami: comment', help_text='A comment on the data', )
      totallandflooded_q = models.ForeignKey(Lookupstatus, db_column='totallandflooded_q', related_name='+', null=False, default='0', verbose_name='Total land area flooded by the tsunami: status', help_text='The status of the data', )
      peopleinsideinundationzone = models.IntegerField(verbose_name='Population inside the tsunami inundation zone', help_text='Population inside the tsunami inundation zone (or within 1km from the affected coast)', null=True, blank=True, )
      peopleinsideinundationzone_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Population inside the tsunami inundation zone: source', help_text='The source of the data', )
      peopleinsideinundationzone_c = models.TextField(null=True, blank=True, verbose_name='Population inside the tsunami inundation zone: comment', help_text='A comment on the data', )
      peopleinsideinundationzone_q = models.ForeignKey(Lookupstatus, db_column='peopleinsideinundationzone_q', related_name='+', null=False, default='0', verbose_name='Population inside the tsunami inundation zone: status', help_text='The status of the data', )
      overallimpact = models.TextField(null=True, blank=True, verbose_name='Overall impact', help_text='Overall socio economic impact', )
      peopleinjuredduetotsunami = models.IntegerField(verbose_name='People injured due to tsunami', help_text='People injured due to tsunami', null=True, blank=True, )
      peopleinjuredduetotsunami_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='People injured due to tsunami: source', help_text='The source of the data', )
      peopleinjuredduetotsunami_c = models.TextField(null=True, blank=True, verbose_name='People injured due to tsunami: comment', help_text='A comment on the data', )
      peopleinjuredduetotsunami_q = models.ForeignKey(Lookupstatus, db_column='peopleinjuredduetotsunami_q', related_name='+', null=False, default='0', verbose_name='People injured due to tsunami: status', help_text='The status of the data', )
      peoplemissingduetotsunami = models.IntegerField(verbose_name='People missing due to tsunami', help_text='People missing due to tsunami', null=True, blank=True, )
      peoplemissingduetotsunami_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='People missing due to tsunami: source', help_text='The source of the data', )
      peoplemissingduetotsunami_c = models.TextField(null=True, blank=True, verbose_name='People missing due to tsunami: comment', help_text='A comment on the data', )
      peoplemissingduetotsunami_q = models.ForeignKey(Lookupstatus, db_column='peoplemissingduetotsunami_q', related_name='+', null=False, default='0', verbose_name='People missing due to tsunami: status', help_text='The status of the data', )
      peoplekilledduetotsunami = models.IntegerField(verbose_name='People killed due to tsunami', help_text='People killed due to tsunami', null=True, blank=True, )
      peoplekilledduetotsunami_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='People killed due to tsunami: source', help_text='The source of the data', )
      peoplekilledduetotsunami_c = models.TextField(null=True, blank=True, verbose_name='People killed due to tsunami: comment', help_text='A comment on the data', )
      peoplekilledduetotsunami_q = models.ForeignKey(Lookupstatus, db_column='peoplekilledduetotsunami_q', related_name='+', null=False, default='0', verbose_name='People killed due to tsunami: status', help_text='The status of the data', )
      peopledyingpostcatastrophe = models.IntegerField(verbose_name='People dying post catastrophe', help_text='People dying after time has passed but their deaths related to the original tsunami', null=True, blank=True, )
      peopledyingpostcatastrophe_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='People dying post catastrophe: source', help_text='The source of the data', )
      peopledyingpostcatastrophe_c = models.TextField(null=True, blank=True, verbose_name='People dying post catastrophe: comment', help_text='A comment on the data', )
      peopledyingpostcatastrophe_q = models.ForeignKey(Lookupstatus, db_column='peopledyingpostcatastrophe_q', related_name='+', null=False, default='0', verbose_name='People dying post catastrophe: status', help_text='The status of the data', )
      numberbuildingswashedaway = models.IntegerField(verbose_name='Number of buildings washed away', help_text='Number of buildings washed away or destroyed by the tsunami', null=True, blank=True, )
      numberbuildingswashedaway_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Number of buildings washed away: source', help_text='The source of the data', )
      numberbuildingswashedaway_c = models.TextField(null=True, blank=True, verbose_name='Number of buildings washed away: comment', help_text='A comment on the data', )
      numberbuildingswashedaway_q = models.ForeignKey(Lookupstatus, db_column='numberbuildingswashedaway_q', related_name='+', null=False, default='0', verbose_name='Number of buildings washed away: status', help_text='The status of the data', )
      numberbuildingsflooded = models.IntegerField(verbose_name='Number of buildings flooded', help_text='Number of buildings flooded but not destroyed', null=True, blank=True, )
      numberbuildingsflooded_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Number of buildings flooded: source', help_text='The source of the data', )
      numberbuildingsflooded_c = models.TextField(null=True, blank=True, verbose_name='Number of buildings flooded: comment', help_text='A comment on the data', )
      numberbuildingsflooded_q = models.ForeignKey(Lookupstatus, db_column='numberbuildingsflooded_q', related_name='+', null=False, default='0', verbose_name='Number of buildings flooded: status', help_text='The status of the data', )
      numberbridgesdestroyed = models.IntegerField(verbose_name='Number of bridges destroyed', help_text='Number of bridges destroyed (all types of bridges)', null=True, blank=True, )
      numberbridgesdestroyed_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Number of bridges destroyed: source', help_text='The source of the data', )
      numberbridgesdestroyed_c = models.TextField(null=True, blank=True, verbose_name='Number of bridges destroyed: comment', help_text='A comment on the data', )
      numberbridgesdestroyed_q = models.ForeignKey(Lookupstatus, db_column='numberbridgesdestroyed_q', related_name='+', null=False, default='0', verbose_name='Number of bridges destroyed: status', help_text='The status of the data', )
      numberportsaffected = models.IntegerField(verbose_name='Number of ports affected', help_text='Number of ports affected', null=True, blank=True, )
      numberportsaffected_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Number of ports affected: source', help_text='The source of the data', )
      numberportsaffected_c = models.TextField(null=True, blank=True, verbose_name='Number of ports affected: comment', help_text='A comment on the data', )
      numberportsaffected_q = models.ForeignKey(Lookupstatus, db_column='numberportsaffected_q', related_name='+', null=False, default='0', verbose_name='Number of ports affected: status', help_text='The status of the data', )
      numberboatsdestroyed = models.IntegerField(verbose_name='Number of boats destroyed', help_text='Number of boats destroyed (all types of boats)', null=True, blank=True, )
      numberboatsdestroyed_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Number of boats destroyed: source', help_text='The source of the data', )
      numberboatsdestroyed_c = models.TextField(null=True, blank=True, verbose_name='Number of boats destroyed: comment', help_text='A comment on the data', )
      numberboatsdestroyed_q = models.ForeignKey(Lookupstatus, db_column='numberboatsdestroyed_q', related_name='+', null=False, default='0', verbose_name='Number of boats destroyed: status', help_text='The status of the data', )
      numbervehiclesdestroyed = models.IntegerField(verbose_name='Number of vehicles destroyed', help_text='Number of vehicles destroyed (all types of vehicles)', null=True, blank=True, )
      numbervehiclesdestroyed_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Number of vehicles destroyed: source', help_text='The source of the data', )
      numbervehiclesdestroyed_c = models.TextField(null=True, blank=True, verbose_name='Number of vehicles destroyed: comment', help_text='A comment on the data', )
      numbervehiclesdestroyed_q = models.ForeignKey(Lookupstatus, db_column='numbervehiclesdestroyed_q', related_name='+', null=False, default='0', verbose_name='Number of vehicles destroyed: status', help_text='The status of the data', )
      numberofbuildingsdestroyed = models.IntegerField(verbose_name='Total number of buildings destroyed', help_text='Total number of buildings destroyed, collapsed or damaged beyond repair due to tsunami', null=True, blank=True, )
      numberofbuildingsdestroyed_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Total number of buildings destroyed: source', help_text='The source of the data', )
      numberofbuildingsdestroyed_c = models.TextField(null=True, blank=True, verbose_name='Total number of buildings destroyed: comment', help_text='A comment on the data', )
      numberofbuildingsdestroyed_q = models.ForeignKey(Lookupstatus, db_column='numberofbuildingsdestroyed_q', related_name='+', null=False, default='0', verbose_name='Total number of buildings destroyed: status', help_text='The status of the data', )
      numberofbuildingsdamaged = models.IntegerField(verbose_name='Number of buildings damaged', help_text='Total number of buildings damaged due to tsunami', null=True, blank=True, )
      numberofbuildingsdamaged_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Number of buildings damaged: source', help_text='The source of the data', )
      numberofbuildingsdamaged_c = models.TextField(null=True, blank=True, verbose_name='Number of buildings damaged: comment', help_text='A comment on the data', )
      numberofbuildingsdamaged_q = models.ForeignKey(Lookupstatus, db_column='numberofbuildingsdamaged_q', related_name='+', null=False, default='0', verbose_name='Number of buildings damaged: status', help_text='The status of the data', )
      numberofdwellingsdestroyed = models.IntegerField(verbose_name='Number of dwellings destroyed', help_text='Total number of dwelling units destroyed, collapsed or damaged beyond repair due to tsunami', null=True, blank=True, )
      numberofdwellingsdestroyed_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Number of dwellings destroyed: source', help_text='The source of the data', )
      numberofdwellingsdestroyed_c = models.TextField(null=True, blank=True, verbose_name='Number of dwellings destroyed: comment', help_text='A comment on the data', )
      numberofdwellingsdestroyed_q = models.ForeignKey(Lookupstatus, db_column='numberofdwellingsdestroyed_q', related_name='+', null=False, default='0', verbose_name='Number of dwellings destroyed: status', help_text='The status of the data', )
      numberofdwellingsdamaged = models.IntegerField(verbose_name='Number of dwellings damaged', help_text='Total number of dwelling units damaged due to tsunami', null=True, blank=True, )
      numberofdwellingsdamaged_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Number of dwellings damaged: source', help_text='The source of the data', )
      numberofdwellingsdamaged_c = models.TextField(null=True, blank=True, verbose_name='Number of dwellings damaged: comment', help_text='A comment on the data', )
      numberofdwellingsdamaged_q = models.ForeignKey(Lookupstatus, db_column='numberofdwellingsdamaged_q', related_name='+', null=False, default='0', verbose_name='Number of dwellings damaged: status', help_text='The status of the data', )
      peoplehomeless = models.IntegerField(verbose_name='People homeless', help_text='Total number of people homeless for a significant duration of time due to tsunami', null=True, blank=True, )
      peoplehomeless_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='People homeless: source', help_text='The source of the data', )
      peoplehomeless_c = models.TextField(null=True, blank=True, verbose_name='People homeless: comment', help_text='A comment on the data', )
      peoplehomeless_q = models.ForeignKey(Lookupstatus, db_column='peoplehomeless_q', related_name='+', null=False, default='0', verbose_name='People homeless: status', help_text='The status of the data', )
      directeconomicloss = models.FloatField(verbose_name='Direct economic loss', help_text='Total estimated direct economic loss due to tsunami, million US$, contemporaneous. In absolute US$ value of the year of occurrence. Only includes direct effects.', null=True, blank=True, )
      directeconomicloss_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Direct economic loss: source', help_text='The source of the data', )
      directeconomicloss_c = models.TextField(null=True, blank=True, verbose_name='Direct economic loss: comment', help_text='A comment on the data', )
      directeconomicloss_q = models.ForeignKey(Lookupstatus, db_column='directeconomicloss_q', related_name='+', null=False, default='0', verbose_name='Direct economic loss: status', help_text='The status of the data', )
      indirecteconomicloss = models.FloatField(verbose_name='Indirect economic loss', help_text='Total estimated indirect economic loss due to tsunami, million US$, contemporaneous. In absolute US$ value of the year of occurrence. Only includes indirect effects. ', null=True, blank=True, )
      indirecteconomicloss_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Indirect economic loss: source', help_text='The source of the data', )
      indirecteconomicloss_c = models.TextField(null=True, blank=True, verbose_name='Indirect economic loss: comment', help_text='A comment on the data', )
      indirecteconomicloss_q = models.ForeignKey(Lookupstatus, db_column='indirecteconomicloss_q', related_name='+', null=False, default='0', verbose_name='Indirect economic loss: status', help_text='The status of the data', )
      numberofhouseholds = models.IntegerField(verbose_name='Number of households', help_text='Total number of households in the tsunami affected zone (contemporaneous)', null=True, blank=True, )
      numberofhouseholds_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Number of households: source', help_text='The source of the data', )
      numberofhouseholds_c = models.TextField(null=True, blank=True, verbose_name='Number of households: comment', help_text='A comment on the data', )
      numberofhouseholds_q = models.ForeignKey(Lookupstatus, db_column='numberofhouseholds_q', related_name='+', null=False, default='0', verbose_name='Number of households: status', help_text='The status of the data', )
      totalnumberofbuildings = models.IntegerField(verbose_name='Total number of buildings', help_text='Total number of buildings in the tsunami affected zone (contemporaneous)', null=True, blank=True, )
      totalnumberofbuildings_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Total number of buildings: source', help_text='The source of the data', )
      totalnumberofbuildings_c = models.TextField(null=True, blank=True, verbose_name='Total number of buildings: comment', help_text='A comment on the data', )
      totalnumberofbuildings_q = models.ForeignKey(Lookupstatus, db_column='totalnumberofbuildings_q', related_name='+', null=False, default='0', verbose_name='Total number of buildings: status', help_text='The status of the data', )
      population = models.IntegerField(verbose_name='Population', help_text='Population (contemporaneous)', null=True, blank=True, )
      population_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Population: source', help_text='The source of the data', )
      population_c = models.TextField(null=True, blank=True, verbose_name='Population: comment', help_text='A comment on the data', )
      population_q = models.ForeignKey(Lookupstatus, db_column='population_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Population: status', help_text='The status of the data', )
      contemporaneousdate = models.DateTimeField(null=True, blank=True, verbose_name='Base date', help_text='Base date for contemporaneous data, if not date of event, eg 1970-05-31', )
      reliabilitydataqualitycode = models.ForeignKey(Lookupqualitymetric, db_column='reliabilitydataqualitycode', related_name='+', max_length=10, null=False, default='0', verbose_name='Reliability: Data quality', help_text='Quality of source data', )
      reliabilitydocumentationqualitycode = models.ForeignKey(Lookupqualitymetric, db_column='reliabilitydocumentationqualitycode', related_name='+', max_length=10, null=False, default='0', verbose_name='Reliability: Documentation quality', help_text='How well the author has documented the data, analysis and results', )
      reliabilitylocationalcode = models.ForeignKey(Lookupqualitymetric, db_column='reliabilitylocationalcode', related_name='+', max_length=10, null=False, default='0', verbose_name='Reliability: Locational', help_text='How reliable the geographic locations are', )
      reliability_c = models.TextField(null=True, blank=True, verbose_name='Study reliability: comment', help_text='A comment on the study reliability', )
      significantfigures = models.IntegerField(null=True, blank=True, verbose_name='Significant figures', help_text='The significant figures for the data in the study', )
      ownerid = models.IntegerField(null=False, default='1', verbose_name='Owner ID', help_text='ID of the creator/owner of the record', )
      lastupdatebyid = models.IntegerField(null=False, default='1', verbose_name='Last update by ID', help_text='ID of the last person to update this record', )
      lastupdate = models.DateTimeField(null=True, blank=True, help_text='Last record update date', )

      class Meta:
            db_table = u'econd\".\"tsunamistudy'

      def __unicode__(self):
            return self.name


class Slopefailurestudy(models.Model):
      id = models.AutoField(primary_key=True, null=False, help_text='Primary Key: Internal database id', )
      name = models.CharField(max_length=255, null=False, default='untitled', verbose_name='Study name', help_text='The name of the slope failure study', )
      authors = models.CharField(max_length=255, null=True, blank=True, verbose_name='Author(s)', help_text='The authors of the study, last name first e.g: Smith, J. A; Jones, F;', )
      studydate = models.DateTimeField(null=True, blank=True, verbose_name='Study publication date', help_text='Study publication date, eg 1980-05-31', )
      parentid = models.ForeignKey(Event, db_column='parentid', related_name='+', null=False, default='0', verbose_name='Parent event', help_text='The event of which this is a study', )
      sources = models.TextField(null=True, blank=True, verbose_name='Sources and web links for the study', help_text='Sources and web links for the study', )
      partner = models.CharField(max_length=255, null=True, blank=True, verbose_name='GEMECD contributing partner', help_text='The name of the GEMECD partner who developed this study record in the GEMECD database', )
      originallanguage = models.CharField(max_length=50, null=True, blank=True, verbose_name='Language of original study', help_text='The original language of the study', )
      regioncovered = models.CharField(max_length=255, null=True, blank=True, verbose_name='Country covered', help_text='The country, province or region covered by the study, described in words', )
      geobaseid = models.ForeignKey(Geobase, db_column='geobaseid', related_name='+', null=False, default='0', verbose_name='Geobase', help_text='The geographic basis of the study, eg Italy GADM Level 1. Can also be intensity level zones for the event', )
      studynarrative = models.TextField(null=True, blank=True, verbose_name='Study description', help_text='Descriptive text describing the study', )
      inventoryclasses_c = models.TextField(null=True, blank=True, verbose_name='Notes on the inventory classes in this study', help_text='Descriptive text describing the inventory classes in this study', )
      damagescalename = models.CharField(max_length=255, null=True, blank=True, verbose_name='Name of the damage scale', help_text='Name of the damage scale, if any', )
      damagescale_c = models.TextField(null=True, blank=True, verbose_name='Notes on the damage scale in this study', help_text='Descriptive text describing the damage scale in this study', )
      #damagemappingid = models.ForeignKey(Unifieddamagescale, db_column='damagemappingid', related_name='+', null=False, default='0', verbose_name='Mapping to unified damage scale', help_text='Mapping to unified damage scale', )
      damagepercentage = models.ForeignKey(Lookupyesno, db_column='damagepercentage', related_name='+', null=False, default='0', verbose_name='Damage data is in percentages', help_text='Is the damage data in percentages?', )
      casualtyscalename = models.CharField(max_length=255, null=True, blank=True, verbose_name='Name of the casualty scale', help_text='Name of the casualty scale, if any', )
      casualtyscale_c = models.TextField(null=True, blank=True, verbose_name='Notes on the casualty scale in this study', help_text='Descriptive text describing the casualty scale in this study', )
      #casualtymappingid = models.ForeignKey(Unifiedcasualtyscale, db_column='casualtymappingid', related_name='+', null=False, default='0', verbose_name='Mapping to unified casualty scale', help_text='Mapping to unified casualty scale', )
      casualtypercentage = models.ForeignKey(Lookupyesno, db_column='casualtypercentage', related_name='+', null=False, default='0', verbose_name='Casualty data is in percentages', help_text='Is the casualty data in percentages?', )
      overallimpact = models.TextField(null=True, blank=True, verbose_name='Overall impact', help_text='Overall socio economic impact', )
      peopleinjuredduetoslopefailures = models.IntegerField(verbose_name='People injured due to slope failures', help_text='People injured due to slope failures', null=True, blank=True, )
      peopleinjuredduetoslopefailures_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='People injured due to slope failures: source', help_text='The source of the data', )
      peopleinjuredduetoslopefailures_c = models.TextField(null=True, blank=True, verbose_name='People injured due to slope failures: comment', help_text='A comment on the data', )
      peopleinjuredduetoslopefailures_q = models.ForeignKey(Lookupstatus, db_column='peopleinjuredduetoslopefailures_q', related_name='+', null=False, default='0', verbose_name='People injured due to slope failures: status', help_text='The status of the data', )
      peoplemissingduetoslopefailures = models.IntegerField(verbose_name='People missing due to slope failures', help_text='People missing due to slope failures', null=True, blank=True, )
      peoplemissingduetoslopefailures_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='People missing due to slope failures: source', help_text='The source of the data', )
      peoplemissingduetoslopefailures_c = models.TextField(null=True, blank=True, verbose_name='People missing due to slope failures: comment', help_text='A comment on the data', )
      peoplemissingduetoslopefailures_q = models.ForeignKey(Lookupstatus, db_column='peoplemissingduetoslopefailures_q', related_name='+', null=False, default='0', verbose_name='People missing due to slope failures: status', help_text='The status of the data', )
      peoplekilledduetoslopefailures = models.IntegerField(verbose_name='People killed due to slope failures', help_text='People killed due to slope failures', null=True, blank=True, )
      peoplekilledduetoslopefailures_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='People killed due to slope failures: source', help_text='The source of the data', )
      peoplekilledduetoslopefailures_c = models.TextField(null=True, blank=True, verbose_name='People killed due to slope failures: comment', help_text='A comment on the data', )
      peoplekilledduetoslopefailures_q = models.ForeignKey(Lookupstatus, db_column='peoplekilledduetoslopefailures_q', related_name='+', null=False, default='0', verbose_name='People killed due to slope failures: status', help_text='The status of the data', )
      peopledyingpostcatastrophe = models.IntegerField(verbose_name='People dying post catastrophe', help_text='People dying after time has passed but their deaths related to the original slope failure', null=True, blank=True, )
      peopledyingpostcatastrophe_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='People dying post catastrophe: source', help_text='The source of the data', )
      peopledyingpostcatastrophe_c = models.TextField(null=True, blank=True, verbose_name='People dying post catastrophe: comment', help_text='A comment on the data', )
      peopledyingpostcatastrophe_q = models.ForeignKey(Lookupstatus, db_column='peopledyingpostcatastrophe_q', related_name='+', null=False, default='0', verbose_name='People dying post catastrophe: status', help_text='The status of the data', )
      numberofbuildingsdestroyed = models.IntegerField(verbose_name='Total number of buildings destroyed', help_text='Total number of buildings destroyed, collapsed or damaged beyond repair due to slope failure', null=True, blank=True, )
      numberofbuildingsdestroyed_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Total number of buildings destroyed: source', help_text='The source of the data', )
      numberofbuildingsdestroyed_c = models.TextField(null=True, blank=True, verbose_name='Total number of buildings destroyed: comment', help_text='A comment on the data', )
      numberofbuildingsdestroyed_q = models.ForeignKey(Lookupstatus, db_column='numberofbuildingsdestroyed_q', related_name='+', null=False, default='0', verbose_name='Total number of buildings destroyed: status', help_text='The status of the data', )
      numberofbuildingsdamaged = models.IntegerField(verbose_name='Number of buildings damaged', help_text='Total number of buildings damaged due to slope failure', null=True, blank=True, )
      numberofbuildingsdamaged_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Number of buildings damaged: source', help_text='The source of the data', )
      numberofbuildingsdamaged_c = models.TextField(null=True, blank=True, verbose_name='Number of buildings damaged: comment', help_text='A comment on the data', )
      numberofbuildingsdamaged_q = models.ForeignKey(Lookupstatus, db_column='numberofbuildingsdamaged_q', related_name='+', null=False, default='0', verbose_name='Number of buildings damaged: status', help_text='The status of the data', )
      numberofdwellingsdestroyed = models.IntegerField(verbose_name='Number of dwellings destroyed', help_text='Total number of dwelling units destroyed, collapsed or damaged beyond repair due to slope failure', null=True, blank=True, )
      numberofdwellingsdestroyed_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Number of dwellings destroyed: source', help_text='The source of the data', )
      numberofdwellingsdestroyed_c = models.TextField(null=True, blank=True, verbose_name='Number of dwellings destroyed: comment', help_text='A comment on the data', )
      numberofdwellingsdestroyed_q = models.ForeignKey(Lookupstatus, db_column='numberofdwellingsdestroyed_q', related_name='+', null=False, default='0', verbose_name='Number of dwellings destroyed: status', help_text='The status of the data', )
      numberofdwellingsdamaged = models.IntegerField(verbose_name='Number of dwellings damaged', help_text='Total number of dwelling units damaged due to slope failure', null=True, blank=True, )
      numberofdwellingsdamaged_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Number of dwellings damaged: source', help_text='The source of the data', )
      numberofdwellingsdamaged_c = models.TextField(null=True, blank=True, verbose_name='Number of dwellings damaged: comment', help_text='A comment on the data', )
      numberofdwellingsdamaged_q = models.ForeignKey(Lookupstatus, db_column='numberofdwellingsdamaged_q', related_name='+', null=False, default='0', verbose_name='Number of dwellings damaged: status', help_text='The status of the data', )
      peoplehomeless = models.IntegerField(verbose_name='People homeless', help_text='Total number of people homeless for a significant duration of time due to slope failure', null=True, blank=True, )
      peoplehomeless_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='People homeless: source', help_text='The source of the data', )
      peoplehomeless_c = models.TextField(null=True, blank=True, verbose_name='People homeless: comment', help_text='A comment on the data', )
      peoplehomeless_q = models.ForeignKey(Lookupstatus, db_column='peoplehomeless_q', related_name='+', null=False, default='0', verbose_name='People homeless: status', help_text='The status of the data', )
      directeconomicloss = models.FloatField(verbose_name='Direct economic loss', help_text='Total estimated direct economic loss due to slope failure, million US$, contemporaneous. In absolute US$ value of the year of occurrence. Only includes direct effects.', null=True, blank=True, )
      directeconomicloss_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Direct economic loss: source', help_text='The source of the data', )
      directeconomicloss_c = models.TextField(null=True, blank=True, verbose_name='Direct economic loss: comment', help_text='A comment on the data', )
      directeconomicloss_q = models.ForeignKey(Lookupstatus, db_column='directeconomicloss_q', related_name='+', null=False, default='0', verbose_name='Direct economic loss: status', help_text='The status of the data', )
      indirecteconomicloss = models.FloatField(verbose_name='Indirect economic loss', help_text='Total estimated indirect economic loss due to slope failure, million US$, contemporaneous. In absolute US$ value of the year of occurrence. Only includes indirect effects. ', null=True, blank=True, )
      indirecteconomicloss_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Indirect economic loss: source', help_text='The source of the data', )
      indirecteconomicloss_c = models.TextField(null=True, blank=True, verbose_name='Indirect economic loss: comment', help_text='A comment on the data', )
      indirecteconomicloss_q = models.ForeignKey(Lookupstatus, db_column='indirecteconomicloss_q', related_name='+', null=False, default='0', verbose_name='Indirect economic loss: status', help_text='The status of the data', )
      numberofhouseholds = models.IntegerField(verbose_name='Number of households', help_text='Total number of households in the affected slope failure zone (contemporaneous)', null=True, blank=True, )
      numberofhouseholds_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Number of households: source', help_text='The source of the data', )
      numberofhouseholds_c = models.TextField(null=True, blank=True, verbose_name='Number of households: comment', help_text='A comment on the data', )
      numberofhouseholds_q = models.ForeignKey(Lookupstatus, db_column='numberofhouseholds_q', related_name='+', null=False, default='0', verbose_name='Number of households: status', help_text='The status of the data', )
      totalnumberofbuildings = models.IntegerField(verbose_name='Total number of buildings', help_text='Total number of buildings in the affected slope failure zone (contemporaneous)', null=True, blank=True, )
      totalnumberofbuildings_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Total number of buildings: source', help_text='The source of the data', )
      totalnumberofbuildings_c = models.TextField(null=True, blank=True, verbose_name='Total number of buildings: comment', help_text='A comment on the data', )
      totalnumberofbuildings_q = models.ForeignKey(Lookupstatus, db_column='totalnumberofbuildings_q', related_name='+', null=False, default='0', verbose_name='Total number of buildings: status', help_text='The status of the data', )
      population = models.IntegerField(verbose_name='Population', help_text='Population (contemporaneous)', null=True, blank=True, )
      population_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Population: source', help_text='The source of the data', )
      population_c = models.TextField(null=True, blank=True, verbose_name='Population: comment', help_text='A comment on the data', )
      population_q = models.ForeignKey(Lookupstatus, db_column='population_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Population: status', help_text='The status of the data', )
      contemporaneousdate = models.DateTimeField(null=True, blank=True, verbose_name='Base date', help_text='Base date for contemporaneous data, if not date of event, eg 1970-05-31', )
      reliabilitydataqualitycode = models.ForeignKey(Lookupqualitymetric, db_column='reliabilitydataqualitycode', related_name='+', max_length=10, null=False, default='0', verbose_name='Reliability: Data quality', help_text='Quality of source data', )
      reliabilitydocumentationqualitycode = models.ForeignKey(Lookupqualitymetric, db_column='reliabilitydocumentationqualitycode', related_name='+', max_length=10, null=False, default='0', verbose_name='Reliability: Documentation quality', help_text='How well the author has documented the data, analysis and results', )
      reliabilitylocationalcode = models.ForeignKey(Lookupqualitymetric, db_column='reliabilitylocationalcode', related_name='+', max_length=10, null=False, default='0', verbose_name='Reliability: Locational', help_text='How reliable the geographic locations are', )
      reliability_c = models.TextField(null=True, blank=True, verbose_name='Study reliability: comment', help_text='A comment on the study reliability', )
      significantfigures = models.IntegerField(null=True, blank=True, verbose_name='Significant figures', help_text='The significant figures for the data in the study', )
      ownerid = models.IntegerField(null=False, default='1', verbose_name='Owner ID', help_text='ID of the creator/owner of the record', )
      lastupdatebyid = models.IntegerField(null=False, default='1', verbose_name='Last update by ID', help_text='ID of the last person to update this record', )
      lastupdate = models.DateTimeField(null=True, blank=True, help_text='Last record update date', )

      class Meta:
            db_table = u'econd\".\"slopefailurestudy'

      def __unicode__(self):
            return self.name

class Firefollowingstudy(models.Model):
      id = models.AutoField(primary_key=True, null=False, help_text='Primary Key: Internal database id', )
      name = models.CharField(max_length=255, null=False, default='untitled', verbose_name='Study name', help_text='The name of the fire following study', )
      authors = models.CharField(max_length=255, null=True, blank=True, verbose_name='Author(s)', help_text='The authors of the study, last name first e.g: Smith, J. A; Jones, F;', )
      studydate = models.DateTimeField(null=True, blank=True, verbose_name='Study publication date', help_text='Study publication date, eg 1980-05-31', )
      parentid = models.ForeignKey(Event, db_column='parentid', related_name='+', null=False, default='0', verbose_name='Parent event', help_text='The event of which this is a study', )
      sources = models.TextField(null=True, blank=True, verbose_name='Sources and web links for the study', help_text='Sources and web links for the study', )
      partner = models.CharField(max_length=255, null=True, blank=True, verbose_name='GEMECD contributing partner', help_text='The name of the GEMECD partner who developed this study record in the GEMECD database', )
      originallanguage = models.CharField(max_length=50, null=True, blank=True, verbose_name='Language of original study', help_text='The original language of the study', )
      regioncovered = models.CharField(max_length=255, null=True, blank=True, verbose_name='Country covered', help_text='The country, province or region covered by the study, described in words', )
      geobaseid = models.ForeignKey(Geobase, db_column='geobaseid', related_name='+', null=False, default='0', verbose_name='Geobase', help_text='The geographic basis of the study, eg Italy GADM Level 1. Can also be intensity level zones for the event', )
      studynarrative = models.TextField(null=True, blank=True, verbose_name='Study description', help_text='Descriptive text describing the study', )
      inventoryclasses_c = models.TextField(null=True, blank=True, verbose_name='Notes on the inventory classes in this study', help_text='Descriptive text describing the inventory classes in this study', )
      damagescalename = models.CharField(max_length=255, null=True, blank=True, verbose_name='Name of the damage scale', help_text='Name of the damage scale, if any', )
      damagescale_c = models.TextField(null=True, blank=True, verbose_name='Notes on the damage scale in this study', help_text='Descriptive text describing the damage scale in this study', )
      #damagemappingid = models.ForeignKey(Unifieddamagescale, db_column='damagemappingid', related_name='+', null=False, default='0', verbose_name='Mapping to unified damage scale', help_text='Mapping to unified damage scale', )
      damagepercentage = models.ForeignKey(Lookupyesno, db_column='damagepercentage', related_name='+', null=False, default='0', verbose_name='Damage data is in percentages', help_text='Is the damage data in percentages?', )
      casualtyscalename = models.CharField(max_length=255, null=True, blank=True, verbose_name='Name of the casualty scale', help_text='Name of the casualty scale, if any', )
      casualtyscale_c = models.TextField(null=True, blank=True, verbose_name='Notes on the casualty scale in this study', help_text='Descriptive text describing the casualty scale in this study', )
      #casualtymappingid = models.ForeignKey(Unifiedcasualtyscale, db_column='casualtymappingid', related_name='+', null=False, default='0', verbose_name='Mapping to unified casualty scale', help_text='Mapping to unified casualty scale', )
      casualtypercentage = models.ForeignKey(Lookupyesno, db_column='casualtypercentage', related_name='+', null=False, default='0', verbose_name='Casualty data is in percentages', help_text='Is the casualty data in percentages?', )
      finalburntarea = models.FloatField(verbose_name='Final burnt area', help_text='Final burnt area: SFED (single family equivalent dwelling)', null=True, blank=True, )
      finalburntarea_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Final burnt area: source', help_text='The source of the data', )
      finalburntarea_c = models.TextField(null=True, blank=True, verbose_name='Final burnt area: comment', help_text='A comment on the data', )
      finalburntarea_q = models.ForeignKey(Lookupstatus, db_column='finalburntarea_q', related_name='+', null=False, default='0', verbose_name='Final burnt area: status', help_text='The status of the data', )
      totalnumberofignitions = models.IntegerField(verbose_name='Total number of ignitions', help_text='Total number of ignitions', null=True, blank=True, )
      totalnumberofignitions_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Total number of ignitions: source', help_text='The source of the data', )
      totalnumberofignitions_c = models.TextField(null=True, blank=True, verbose_name='Total number of ignitions: comment', help_text='A comment on the data', )
      totalnumberofignitions_q = models.ForeignKey(Lookupstatus, db_column='totalnumberofignitions_q', related_name='+', null=False, default='0', verbose_name='Total number of ignitions: status', help_text='The status of the data', )
      numberoflargefires = models.IntegerField(verbose_name='Number of large fires', help_text='Number of large fires', null=True, blank=True, )
      numberoflargefires_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Number of large fires: source', help_text='The source of the data', )
      numberoflargefires_c = models.TextField(null=True, blank=True, verbose_name='Number of large fires: comment', help_text='A comment on the data', )
      numberoflargefires_q = models.ForeignKey(Lookupstatus, db_column='numberoflargefires_q', related_name='+', null=False, default='0', verbose_name='Number of large fires: status', help_text='The status of the data', )
      overallimpact = models.TextField(null=True, blank=True, verbose_name='Overall impact', help_text='Overall socio economic impact', )
      peopleinjuredduetofirefollowing = models.IntegerField(verbose_name='People injured due to fire following', help_text='People injured due to fire following', null=True, blank=True, )
      peopleinjuredduetofirefollowing_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='People injured due to fire following: source', help_text='The source of the data', )
      peopleinjuredduetofirefollowing_c = models.TextField(null=True, blank=True, verbose_name='People injured due to fire following: comment', help_text='A comment on the data', )
      peopleinjuredduetofirefollowing_q = models.ForeignKey(Lookupstatus, db_column='peopleinjuredduetofirefollowing_q', related_name='+', null=False, default='0', verbose_name='People injured due to fire following: status', help_text='The status of the data', )
      peoplemissingduetofirefollowing = models.IntegerField(verbose_name='People missing due to fire following', help_text='People missing due to fire following', null=True, blank=True, )
      peoplemissingduetofirefollowing_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='People missing due to fire following: source', help_text='The source of the data', )
      peoplemissingduetofirefollowing_c = models.TextField(null=True, blank=True, verbose_name='People missing due to fire following: comment', help_text='A comment on the data', )
      peoplemissingduetofirefollowing_q = models.ForeignKey(Lookupstatus, db_column='peoplemissingduetofirefollowing_q', related_name='+', null=False, default='0', verbose_name='People missing due to fire following: status', help_text='The status of the data', )
      peoplekilledduetofirefollowing = models.IntegerField(verbose_name='People killed due to fire following', help_text='People killed due to fire following', null=True, blank=True, )
      peoplekilledduetofirefollowing_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='People killed due to fire following: source', help_text='The source of the data', )
      peoplekilledduetofirefollowing_c = models.TextField(null=True, blank=True, verbose_name='People killed due to fire following: comment', help_text='A comment on the data', )
      peoplekilledduetofirefollowing_q = models.ForeignKey(Lookupstatus, db_column='peoplekilledduetofirefollowing_q', related_name='+', null=False, default='0', verbose_name='People killed due to fire following: status', help_text='The status of the data', )
      peopledyingpostcatastrophe = models.IntegerField(verbose_name='People dying post catastrophe', help_text='People dying after time has passed but their deaths related to the original fire following event', null=True, blank=True, )
      peopledyingpostcatastrophe_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='People dying post catastrophe: source', help_text='The source of the data', )
      peopledyingpostcatastrophe_c = models.TextField(null=True, blank=True, verbose_name='People dying post catastrophe: comment', help_text='A comment on the data', )
      peopledyingpostcatastrophe_q = models.ForeignKey(Lookupstatus, db_column='peopledyingpostcatastrophe_q', related_name='+', null=False, default='0', verbose_name='People dying post catastrophe: status', help_text='The status of the data', )
      numberofbuildingsdestroyed = models.IntegerField(verbose_name='Total number of buildings destroyed', help_text='Total number of buildings destroyed, collapsed or damaged beyond repair due to fire following', null=True, blank=True, )
      numberofbuildingsdestroyed_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Total number of buildings destroyed: source', help_text='The source of the data', )
      numberofbuildingsdestroyed_c = models.TextField(null=True, blank=True, verbose_name='Total number of buildings destroyed: comment', help_text='A comment on the data', )
      numberofbuildingsdestroyed_q = models.ForeignKey(Lookupstatus, db_column='numberofbuildingsdestroyed_q', related_name='+', null=False, default='0', verbose_name='Total number of buildings destroyed: status', help_text='The status of the data', )
      numberofbuildingsdamaged = models.IntegerField(verbose_name='Number of buildings damaged', help_text='Total number of buildings damaged due to fire following', null=True, blank=True, )
      numberofbuildingsdamaged_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Number of buildings damaged: source', help_text='The source of the data', )
      numberofbuildingsdamaged_c = models.TextField(null=True, blank=True, verbose_name='Number of buildings damaged: comment', help_text='A comment on the data', )
      numberofbuildingsdamaged_q = models.ForeignKey(Lookupstatus, db_column='numberofbuildingsdamaged_q', related_name='+', null=False, default='0', verbose_name='Number of buildings damaged: status', help_text='The status of the data', )
      numberofdwellingsdestroyed = models.IntegerField(verbose_name='Number of dwellings destroyed', help_text='Total number of dwelling units destroyed, collapsed or damaged beyond repair due to fire following', null=True, blank=True, )
      numberofdwellingsdestroyed_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Number of dwellings destroyed: source', help_text='The source of the data', )
      numberofdwellingsdestroyed_c = models.TextField(null=True, blank=True, verbose_name='Number of dwellings destroyed: comment', help_text='A comment on the data', )
      numberofdwellingsdestroyed_q = models.ForeignKey(Lookupstatus, db_column='numberofdwellingsdestroyed_q', related_name='+', null=False, default='0', verbose_name='Number of dwellings destroyed: status', help_text='The status of the data', )
      numberofdwellingsdamaged = models.IntegerField(verbose_name='Number of dwellings damaged', help_text='Total number of dwelling units damaged due to fire following', null=True, blank=True, )
      numberofdwellingsdamaged_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Number of dwellings damaged: source', help_text='The source of the data', )
      numberofdwellingsdamaged_c = models.TextField(null=True, blank=True, verbose_name='Number of dwellings damaged: comment', help_text='A comment on the data', )
      numberofdwellingsdamaged_q = models.ForeignKey(Lookupstatus, db_column='numberofdwellingsdamaged_q', related_name='+', null=False, default='0', verbose_name='Number of dwellings damaged: status', help_text='The status of the data', )
      peoplehomeless = models.IntegerField(verbose_name='People homeless', help_text='Total number of people homeless for a significant duration of time due to fire following', null=True, blank=True, )
      peoplehomeless_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='People homeless: source', help_text='The source of the data', )
      peoplehomeless_c = models.TextField(null=True, blank=True, verbose_name='People homeless: comment', help_text='A comment on the data', )
      peoplehomeless_q = models.ForeignKey(Lookupstatus, db_column='peoplehomeless_q', related_name='+', null=False, default='0', verbose_name='People homeless: status', help_text='The status of the data', )
      directeconomicloss = models.FloatField(verbose_name='Direct economic loss', help_text='Total estimated direct economic loss due to fire following, million US$, contemporaneous. In absolute US$ value of the year of occurrence. Only includes direct effects.', null=True, blank=True, )
      directeconomicloss_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Direct economic loss: source', help_text='The source of the data', )
      directeconomicloss_c = models.TextField(null=True, blank=True, verbose_name='Direct economic loss: comment', help_text='A comment on the data', )
      directeconomicloss_q = models.ForeignKey(Lookupstatus, db_column='directeconomicloss_q', related_name='+', null=False, default='0', verbose_name='Direct economic loss: status', help_text='The status of the data', )
      indirecteconomicloss = models.FloatField(verbose_name='Indirect economic loss', help_text='Total estimated indirect economic loss due to fire following, million US$, contemporaneous. In absolute US$ value of the year of occurrence. Only includes indirect effects. ', null=True, blank=True, )
      indirecteconomicloss_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Indirect economic loss: source', help_text='The source of the data', )
      indirecteconomicloss_c = models.TextField(null=True, blank=True, verbose_name='Indirect economic loss: comment', help_text='A comment on the data', )
      indirecteconomicloss_q = models.ForeignKey(Lookupstatus, db_column='indirecteconomicloss_q', related_name='+', null=False, default='0', verbose_name='Indirect economic loss: status', help_text='The status of the data', )
      numberofhouseholds = models.IntegerField(verbose_name='Number of households', help_text='Total number of households in the zone affected by fire following (contemporaneous)', null=True, blank=True, )
      numberofhouseholds_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Number of households: source', help_text='The source of the data', )
      numberofhouseholds_c = models.TextField(null=True, blank=True, verbose_name='Number of households: comment', help_text='A comment on the data', )
      numberofhouseholds_q = models.ForeignKey(Lookupstatus, db_column='numberofhouseholds_q', related_name='+', null=False, default='0', verbose_name='Number of households: status', help_text='The status of the data', )
      totalnumberofbuildings = models.IntegerField(verbose_name='Total number of buildings', help_text='Total number of buildings in the zone affected by fire following (contemporaneous)', null=True, blank=True, )
      totalnumberofbuildings_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Total number of buildings: source', help_text='The source of the data', )
      totalnumberofbuildings_c = models.TextField(null=True, blank=True, verbose_name='Total number of buildings: comment', help_text='A comment on the data', )
      totalnumberofbuildings_q = models.ForeignKey(Lookupstatus, db_column='totalnumberofbuildings_q', related_name='+', null=False, default='0', verbose_name='Total number of buildings: status', help_text='The status of the data', )
      population = models.IntegerField(verbose_name='Population', help_text='Population (contemporaneous)', null=True, blank=True, )
      population_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Population: source', help_text='The source of the data', )
      population_c = models.TextField(null=True, blank=True, verbose_name='Population: comment', help_text='A comment on the data', )
      population_q = models.ForeignKey(Lookupstatus, db_column='population_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Population: status', help_text='The status of the data', )
      contemporaneousdate = models.DateTimeField(null=True, blank=True, verbose_name='Base date', help_text='Base date for contemporaneous data, if not date of event, eg 1970-05-31', )
      reliabilitydataqualitycode = models.ForeignKey(Lookupqualitymetric, db_column='reliabilitydataqualitycode', related_name='+', max_length=10, null=False, default='0', verbose_name='Reliability: Data quality', help_text='Quality of source data', )
      reliabilitydocumentationqualitycode = models.ForeignKey(Lookupqualitymetric, db_column='reliabilitydocumentationqualitycode', related_name='+', max_length=10, null=False, default='0', verbose_name='Reliability: Documentation quality', help_text='How well the author has documented the data, analysis and results', )
      reliabilityrationalitycode = models.ForeignKey(Lookupqualitymetric, db_column='reliabilityrationalitycode', related_name='+', max_length=10, null=False, default='0', verbose_name='Reliability: Rationality', help_text='How well the the behavior can be explained or rationalized by intuition, calculation or principles of engineering mechanics', )
      reliability_c = models.TextField(null=True, blank=True, verbose_name='Study reliability: comment', help_text='A comment on the study reliability', )
      significantfigures = models.IntegerField(null=True, blank=True, verbose_name='Significant figures', help_text='The significant figures for the data in the study', )
      ownerid = models.IntegerField(null=False, default='1', verbose_name='Owner ID', help_text='ID of the creator/owner of the record', )
      lastupdatebyid = models.IntegerField(null=False, default='1', verbose_name='Last update by ID', help_text='ID of the last person to update this record', )
      lastupdate = models.DateTimeField(null=True, blank=True, help_text='Last record update date', )

      class Meta:
            db_table = u'econd\".\"firefollowingstudy'

      def __unicode__(self):
            return self.name

class Liquefactionstudy(models.Model):
      id = models.AutoField(primary_key=True, null=False, help_text='Primary Key: Internal database id', )
      name = models.CharField(max_length=255, null=False, default='untitled', verbose_name='Study name', help_text='The name of the liquefaction study', )
      authors = models.CharField(max_length=255, null=True, blank=True, verbose_name='Author(s)', help_text='The authors of the study, last name first e.g: Smith, J. A; Jones, F;', )
      studydate = models.DateTimeField(null=True, blank=True, verbose_name='Study publication date', help_text='Study publication date, eg 1980-05-31', )
      parentid = models.ForeignKey(Event, db_column='parentid', related_name='+', null=False, default='0', verbose_name='Parent event', help_text='The event of which this is a study', )
      sources = models.TextField(null=True, blank=True, verbose_name='Sources and web links for the study', help_text='Sources and web links for the study', )
      partner = models.CharField(max_length=255, null=True, blank=True, verbose_name='GEMECD contributing partner', help_text='The name of the GEMECD partner who developed this study record in the GEMECD database', )
      originallanguage = models.CharField(max_length=50, null=True, blank=True, verbose_name='Language of original study', help_text='The original language of the study', )
      regioncovered = models.CharField(max_length=255, null=True, blank=True, verbose_name='Country covered', help_text='The country, province or region covered by the study, described in words', )
      geobaseid = models.ForeignKey(Geobase, db_column='geobaseid', related_name='+', null=False, default='0', verbose_name='Geobase', help_text='The geographic basis of the study, eg Italy GADM Level 1. Can also be intensity level zones for the event', )
      studynarrative = models.TextField(null=True, blank=True, verbose_name='Study description', help_text='Descriptive text describing the study', )
      inventoryclasses_c = models.TextField(null=True, blank=True, verbose_name='Notes on the inventory classes in this study', help_text='Descriptive text describing the inventory classes in this study', )
      damagescalename = models.CharField(max_length=255, null=True, blank=True, verbose_name='Name of the damage scale', help_text='Name of the damage scale, if any', )
      damagescale_c = models.TextField(null=True, blank=True, verbose_name='Notes on the damage scale in this study', help_text='Descriptive text describing the damage scale in this study', )
      #damagemappingid = models.ForeignKey(Unifieddamagescale, db_column='damagemappingid', related_name='+', null=False, default='0', verbose_name='Mapping to unified damage scale', help_text='Mapping to unified damage scale', )
      damagepercentage = models.ForeignKey(Lookupyesno, db_column='damagepercentage', related_name='+', null=False, default='0', verbose_name='Damage data is in percentages', help_text='Is the damage data in percentages?', )
      casualtyscalename = models.CharField(max_length=255, null=True, blank=True, verbose_name='Name of the casualty scale', help_text='Name of the casualty scale, if any', )
      casualtyscale_c = models.TextField(null=True, blank=True, verbose_name='Notes on the casualty scale in this study', help_text='Descriptive text describing the casualty scale in this study', )
      #casualtymappingid = models.ForeignKey(Unifiedcasualtyscale, db_column='casualtymappingid', related_name='+', null=False, default='0', verbose_name='Mapping to unified casualty scale', help_text='Mapping to unified casualty scale', )
      casualtypercentage = models.ForeignKey(Lookupyesno, db_column='casualtypercentage', related_name='+', null=False, default='0', verbose_name='Casualty data is in percentages', help_text='Is the casualty data in percentages?', )
      totallandareaaffected = models.FloatField(verbose_name='Total land area affected', help_text='Total land area affected by liquefaction, sq km', null=True, blank=True, )
      totallandareaaffected_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Total land area affected: source', help_text='The source of the data', )
      totallandareaaffected_c = models.TextField(null=True, blank=True, verbose_name='Total land area affected: comment', help_text='A comment on the data', )
      totallandareaaffected_q = models.ForeignKey(Lookupstatus, db_column='totallandareaaffected_q', related_name='+', null=False, default='0', verbose_name='Total land area affected: status', help_text='The status of the data', )
      peopleinsideliquefactionzone = models.IntegerField(verbose_name='Population inside the liquefaction zone', help_text='Population inside the liquefaction zone', null=True, blank=True, )
      peopleinsideliquefactionzone_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Population inside the liquefaction zone: source', help_text='The source of the data', )
      peopleinsideliquefactionzone_c = models.TextField(null=True, blank=True, verbose_name='Population inside the liquefaction zone: comment', help_text='A comment on the data', )
      peopleinsideliquefactionzone_q = models.ForeignKey(Lookupstatus, db_column='peopleinsideliquefactionzone_q', related_name='+', null=False, default='0', verbose_name='Population inside the liquefaction zone: status', help_text='The status of the data', )
      numberbuildingsaffected = models.IntegerField(verbose_name='Number of buildings affected', help_text='Number of buildings affected', null=True, blank=True, )
      numberbuildingssaffected_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Number of buildings affected: source', help_text='The source of the data', )
      numberbuildingssaffected_c = models.TextField(null=True, blank=True, verbose_name='Number of buildings affected: comment', help_text='A comment on the data', )
      numberbuildingssaffected_q = models.ForeignKey(Lookupstatus, db_column='numberbuildingssaffected_q', related_name='+', null=False, default='0', verbose_name='Number of buildings affected: status', help_text='The status of the data', )
      numberbuildingspulleddown = models.IntegerField(verbose_name='Number of buildings pulled down', help_text='Number of buildings pulled down', null=True, blank=True, )
      numberbuildingspulleddown_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Number of buildings pulled down: source', help_text='The source of the data', )
      numberbuildingspulleddown_c = models.TextField(null=True, blank=True, verbose_name='Number of buildings pulled down: comment', help_text='A comment on the data', )
      numberbuildingspulleddown_q = models.ForeignKey(Lookupstatus, db_column='numberbuildingspulleddown_q', related_name='+', null=False, default='0', verbose_name='Number of buildings pulled down: status', help_text='The status of the data', )
      numberroadsaffected = models.IntegerField(verbose_name='Number of roads affected', help_text='Number of roads affected', null=True, blank=True, )
      numberroadsaffected_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Number of roads affected: source', help_text='The source of the data', )
      numberroadsaffected_c = models.TextField(null=True, blank=True, verbose_name='Number of roads affected: comment', help_text='A comment on the data', )
      numberroadsaffected_q = models.ForeignKey(Lookupstatus, db_column='numberroadsaffected_q', related_name='+', null=False, default='0', verbose_name='Number of roads affected: status', help_text='The status of the data', )
      overallimpact = models.TextField(null=True, blank=True, verbose_name='Overall impact', help_text='Overall socio economic impact', )
      peoplehomeless = models.IntegerField(verbose_name='People homeless', help_text='Total number of people homeless for a significant duration of time due to liquefaction', null=True, blank=True, )
      peoplehomeless_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='People homeless: source', help_text='The source of the data', )
      peoplehomeless_c = models.TextField(null=True, blank=True, verbose_name='People homeless: comment', help_text='A comment on the data', )
      peoplehomeless_q = models.ForeignKey(Lookupstatus, db_column='peoplehomeless_q', related_name='+', null=False, default='0', verbose_name='People homeless: status', help_text='The status of the data', )
      directeconomicloss = models.FloatField(verbose_name='Direct economic loss', help_text='Total estimated direct economic loss due to liquefaction, million US$, contemporaneous. In absolute US$ value of the year of occurrence. Only includes direct effects.', null=True, blank=True, )
      directeconomicloss_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Direct economic loss: source', help_text='The source of the data', )
      directeconomicloss_c = models.TextField(null=True, blank=True, verbose_name='Direct economic loss: comment', help_text='A comment on the data', )
      directeconomicloss_q = models.ForeignKey(Lookupstatus, db_column='directeconomicloss_q', related_name='+', null=False, default='0', verbose_name='Direct economic loss: status', help_text='The status of the data', )
      indirecteconomicloss = models.FloatField(verbose_name='Indirect economic loss', help_text='Total estimated indirect economic loss due to liquefaction, million US$, contemporaneous. In absolute US$ value of the year of occurrence. Only includes indirect effects. ', null=True, blank=True, )
      indirecteconomicloss_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Indirect economic loss: source', help_text='The source of the data', )
      indirecteconomicloss_c = models.TextField(null=True, blank=True, verbose_name='Indirect economic loss: comment', help_text='A comment on the data', )
      indirecteconomicloss_q = models.ForeignKey(Lookupstatus, db_column='indirecteconomicloss_q', related_name='+', null=False, default='0', verbose_name='Indirect economic loss: status', help_text='The status of the data', )
      numberofhouseholds = models.IntegerField(verbose_name='Number of households', help_text='Total number of households in the zone affected by liquefaction (contemporaneous)', null=True, blank=True, )
      numberofhouseholds_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Number of households: source', help_text='The source of the data', )
      numberofhouseholds_c = models.TextField(null=True, blank=True, verbose_name='Number of households: comment', help_text='A comment on the data', )
      numberofhouseholds_q = models.ForeignKey(Lookupstatus, db_column='numberofhouseholds_q', related_name='+', null=False, default='0', verbose_name='Number of households: status', help_text='The status of the data', )
      totalnumberofbuildings = models.IntegerField(verbose_name='Total number of buildings', help_text='Total number of buildings in the zone affected by liquefaction (contemporaneous)', null=True, blank=True, )
      totalnumberofbuildings_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Total number of buildings: source', help_text='The source of the data', )
      totalnumberofbuildings_c = models.TextField(null=True, blank=True, verbose_name='Total number of buildings: comment', help_text='A comment on the data', )
      totalnumberofbuildings_q = models.ForeignKey(Lookupstatus, db_column='totalnumberofbuildings_q', related_name='+', null=False, default='0', verbose_name='Total number of buildings: status', help_text='The status of the data', )
      population = models.IntegerField(verbose_name='Population', help_text='Population (contemporaneous)', null=True, blank=True, )
      population_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Population: source', help_text='The source of the data', )
      population_c = models.TextField(null=True, blank=True, verbose_name='Population: comment', help_text='A comment on the data', )
      population_q = models.ForeignKey(Lookupstatus, db_column='population_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Population: status', help_text='The status of the data', )
      contemporaneousdate = models.DateTimeField(null=True, blank=True, verbose_name='Base date', help_text='Base date for contemporaneous data, if not date of event, eg 1970-05-31', )
      reliabilitydataqualitycode = models.ForeignKey(Lookupqualitymetric, db_column='reliabilitydataqualitycode', related_name='+', max_length=10, null=False, default='0', verbose_name='Reliability: Data quality', help_text='Quality of source data', )
      reliabilitydocumentationqualitycode = models.ForeignKey(Lookupqualitymetric, db_column='reliabilitydocumentationqualitycode', related_name='+', max_length=10, null=False, default='0', verbose_name='Reliability: Documentation quality', help_text='How well the author has documented the data, analysis and results', )
      reliabilitylocationalcode = models.ForeignKey(Lookupqualitymetric, db_column='reliabilitylocationalcode', related_name='+', max_length=10, null=False, default='0', verbose_name='Reliability: Locational', help_text='How reliable the geographic locations are', )
      reliability_c = models.TextField(null=True, blank=True, verbose_name='Study reliability: comment', help_text='A comment on the study reliability', )
      significantfigures = models.IntegerField(null=True, blank=True, verbose_name='Significant figures', help_text='The significant figures for the data in the study', )
      ownerid = models.IntegerField(null=False, default='1', verbose_name='Owner ID', help_text='ID of the creator/owner of the record', )
      lastupdatebyid = models.IntegerField(null=False, default='1', verbose_name='Last update by ID', help_text='ID of the last person to update this record', )
      lastupdate = models.DateTimeField(null=True, blank=True, help_text='Last record update date', )

      class Meta:
            db_table = u'econd\".\"liquefactionstudy'

      def __unicode__(self):
            return self.name
