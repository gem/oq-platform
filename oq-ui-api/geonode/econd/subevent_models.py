__author__ = 'Simon Ruffle, CAR'

from django.db import models

# Static lookup tables
from econd.static_lookup_models import *

from econd.study_models import *

###############
# Sub Event level Models
###############

class Tsunamisubevent(models.Model):
      id = models.AutoField(primary_key=True, null=False, help_text='Primary Key: Internal database id', blank=True, )
      name = models.CharField(max_length=255, null=False, default='untitled', verbose_name='Tsunami name', help_text='The name of the tsunami', blank=True, )
      parentid = models.ForeignKey(Tsunamistudy, db_column='parentid', related_name='+', null=False, default='0', verbose_name='Parent tsunami study', help_text='The tsunami study of which this is a subevent', max_length=255, blank=True, )
      parenttype = models.CharField(max_length=25, null=True, blank=True, verbose_name='Parent study', help_text='The type of study which owns this subevent. Set on creation, this must not be changed.', )
      location = models.CharField(max_length=255, null=True, blank=True, default='', verbose_name='Address or location', help_text='Street address or description of location', )
      boundaryid = models.IntegerField(verbose_name='User defined boundary or administrative area id', help_text='User defined boundary or administrative area id', max_length=255, blank=True, )
      boundaryaffected = models.CharField(max_length=255, null=True, blank=True, verbose_name='Geometry (long/lat)', help_text='The location or boundary in WKT GIS format eg POINT (long lat). ', )
      boundary_c = models.TextField(null=True, blank=True, verbose_name='Location precision notes', help_text='A comment on the precision of the location or boundary', )
      subeventnarrative = models.TextField(null=True, blank=True, verbose_name='Notes on the tsunami sub event', help_text='Descriptive text describing the tsunami sub event', )
      localtimestarted = models.DateTimeField(null=True, blank=True, verbose_name='Time started (local)', help_text='The local time the tsunami started, eg 15:23', )
      localtimeended = models.DateTimeField(null=True, blank=True, verbose_name='Time ended (local)', help_text='The local time the tsunami ended including drawback phase, eg 15:23', )
      duration = models.DateTimeField(null=True, blank=True, verbose_name='Duration', help_text='Duration: how long did it last, eg 03:30', )
      timeavailableforevacuation = models.DateTimeField(null=True, blank=True, verbose_name='Time available for evacuation', help_text='Time available for evacuation: Hours/Minutes between earthquake occurrence and tsunami arrival, eg 01:30', )
      totalinundationarea = models.FloatField(verbose_name='Total inundation area', help_text='Total inundation area, square kilometres', null=True, blank=True, )
      extentofinundation = models.IntegerField(verbose_name='Extent of tsunami inundation', help_text='Extent of tsunami inundation: distance travelled inland, metres', null=True, blank=True, )
      totalcoastaffected = models.FloatField(verbose_name='Total length of coast affected', help_text='Total length of coast affected, km', null=True, blank=True, )
      totalcoastaffected_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Total length of coast affected: source', help_text='The source of the data', )
      totalcoastaffected_c = models.TextField(null=True, blank=True, verbose_name='Total length of coast affected: comment', help_text='A comment on the data', )
      totalcoastaffected_q = models.ForeignKey(Lookupstatus, db_column='totalcoastaffected_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Total length of coast affected: status', help_text='The status of the data', blank=True, blank=True, )
      totallandflooded = models.FloatField(verbose_name='Total land area flooded by the tsunami', help_text='Total land area flooded by the tsunami, sq km', null=True, blank=True, )
      totallandflooded_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Total land area flooded by the tsunami: source', help_text='The source of the data', )
      totallandflooded_c = models.TextField(null=True, blank=True, verbose_name='Total land area flooded by the tsunami: comment', help_text='A comment on the data', )
      totallandflooded_q = models.ForeignKey(Lookupstatus, db_column='totallandflooded_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Total land area flooded by the tsunami: status', help_text='The status of the data', blank=True, blank=True, )
      generalsetting = models.CharField(max_length=255, null=True, blank=True, default='', verbose_name='General setting', help_text='General setting (Land use type): Sparse residential - wooden houses, Dense residential - wooden houses...', )
      coastaltype = models.CharField(max_length=255, null=True, blank=True, default='', verbose_name='Coastal type', help_text='Coastal type: Rias, Wide bay, open ocean', )
      nearseamorphology = models.CharField(max_length=255, null=True, blank=True, default='', verbose_name='Near sea morphology', help_text='Near sea morphology: Mangroves, Sand dunes, Coastal forest, Open land, Builtup land, Mixed, or any combination', )
      landtopography = models.CharField(max_length=255, null=True, blank=True, default='', verbose_name='Land topography', help_text='Land topography: Flat, Gentle slope (<5 degrees), Moderate slope (5-10 degrees), Steep slope (>10 degrees)', )
      seawithdrawal = models.CharField(max_length=255, null=True, blank=True, default='', verbose_name='Sea withdrawal', help_text='Sea withdrawal prior to tsunami inundation - yes or no', )
      pretsunamievacuationwarning = models.CharField(max_length=255, null=True, blank=True, default='', verbose_name='Pre tsunami evacuation warning', help_text='Pre tsunami evacuation warning: Yes or No (if Yes, choose from the following: tsunami sirens, radio-TV broadcast, or both)', )
      tidelevel = models.CharField(max_length=255, null=True, blank=True, default='', verbose_name='Tide level during the tsunami', help_text='Tide level during the tsunami: High Tide or Medium Tide or Low Tide', )
      protectionsystems = models.CharField(max_length=255, null=True, blank=True, default='', verbose_name='Tsunami protection systems', help_text='Tsunami protection systems: Type of protection (coastal sea wall, offshore tsunami breaker, sand dune, natural forest, lagoon, or any combination)', )
      velocity = models.FloatField(verbose_name='Tsunami velocity', help_text='Tsunami velocity, metres per second', null=True, blank=True, )
      runupheight = models.FloatField(verbose_name='Tsunami run up height', help_text='Tsunami run up height: Maximum height of water at the inland-most reach of the tsunami relative to the tide level at the time of event, metres', null=True, blank=True, )
      inundationheight = models.FloatField(verbose_name='Tsunami inundation height', help_text='Tsunami inundation height: Height of the tsunami relative to the tide level at the time of event at a chosen location, metres', null=True, blank=True, )
      flowdepth = models.FloatField(verbose_name='Tsunami flow depth', help_text='Tsunami flow depth: Height of the tsunami relative to ground level at a chosen location, metres', null=True, blank=True, )
      firefollowing = models.CharField(max_length=255, null=True, blank=True, default='', verbose_name='Fire following tsunami', help_text='Fire following tsunami: Yes or No (if Yes, give some general description, e.g. land area affected, or industry affected etc.)', )
      peopleinsideinundationzone = models.IntegerField(verbose_name='Population inside the tsunami inundation zone', help_text='Population inside the tsunami inundation zone (or within 1km from the affected coast)', null=True, blank=True, )
      peopleinsideinundationzone_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Population inside the tsunami inundation zone: source', help_text='The source of the data', )
      peopleinsideinundationzone_c = models.TextField(null=True, blank=True, verbose_name='Population inside the tsunami inundation zone: comment', help_text='A comment on the data', )
      peopleinsideinundationzone_q = models.ForeignKey(Lookupstatus, db_column='peopleinsideinundationzone_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Population inside the tsunami inundation zone: status', help_text='The status of the data', blank=True, blank=True, )
      overallimpact = models.TextField(null=True, blank=True, verbose_name='Overall impact', help_text='Overall socio economic impact', )
      peopleinjuredduetotsunami = models.IntegerField(verbose_name='People injured due to tsunami', help_text='People injured due to tsunami', null=True, blank=True, )
      peopleinjuredduetotsunami_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='People injured due to tsunami: source', help_text='The source of the data', )
      peopleinjuredduetotsunami_c = models.TextField(null=True, blank=True, verbose_name='People injured due to tsunami: comment', help_text='A comment on the data', )
      peopleinjuredduetotsunami_q = models.ForeignKey(Lookupstatus, db_column='peopleinjuredduetotsunami_q', related_name='+', max_length=10, null=False, default='0', verbose_name='People injured due to tsunami: status', help_text='The status of the data', blank=True, blank=True, )
      peoplemissingduetotsunami = models.IntegerField(verbose_name='People missing due to tsunami', help_text='People missing due to tsunami', null=True, blank=True, )
      peoplemissingduetotsunami_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='People missing due to tsunami: source', help_text='The source of the data', )
      peoplemissingduetotsunami_c = models.TextField(null=True, blank=True, verbose_name='People missing due to tsunami: comment', help_text='A comment on the data', )
      peoplemissingduetotsunami_q = models.ForeignKey(Lookupstatus, db_column='peoplemissingduetotsunami_q', related_name='+', max_length=10, null=False, default='0', verbose_name='People missing due to tsunami: status', help_text='The status of the data', blank=True, blank=True, )
      peoplekilledduetotsunami = models.IntegerField(verbose_name='People killed due to tsunami', help_text='People killed due to tsunami', null=True, blank=True, )
      peoplekilledduetotsunami_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='People killed due to tsunami: source', help_text='The source of the data', )
      peoplekilledduetotsunami_c = models.TextField(null=True, blank=True, verbose_name='People killed due to tsunami: comment', help_text='A comment on the data', )
      peoplekilledduetotsunami_q = models.ForeignKey(Lookupstatus, db_column='peoplekilledduetotsunami_q', related_name='+', max_length=10, null=False, default='0', verbose_name='People killed due to tsunami: status', help_text='The status of the data', blank=True, blank=True, )
      peopledyingpostcatastrophe = models.IntegerField(verbose_name='People dying post catastrophe', help_text='People dying after time has passed but their deaths related to the original tsunami', null=True, blank=True, )
      peopledyingpostcatastrophe_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='People dying post catastrophe: source', help_text='The source of the data', )
      peopledyingpostcatastrophe_c = models.TextField(null=True, blank=True, verbose_name='People dying post catastrophe: comment', help_text='A comment on the data', )
      peopledyingpostcatastrophe_q = models.ForeignKey(Lookupstatus, db_column='peopledyingpostcatastrophe_q', related_name='+', max_length=10, null=False, default='0', verbose_name='People dying post catastrophe: status', help_text='The status of the data', blank=True, blank=True, )
      numberbuildingswashedaway = models.IntegerField(verbose_name='Number of buildings washed away', help_text='Number of buildings washed away or destroyed by the tsunami', null=True, blank=True, )
      numberbuildingswashedaway_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Number of buildings washed away: source', help_text='The source of the data', )
      numberbuildingswashedaway_c = models.TextField(null=True, blank=True, verbose_name='Number of buildings washed away: comment', help_text='A comment on the data', )
      numberbuildingswashedaway_q = models.ForeignKey(Lookupstatus, db_column='numberbuildingswashedaway_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Number of buildings washed away: status', help_text='The status of the data', blank=True, blank=True, )
      numberbuildingsflooded = models.IntegerField(verbose_name='Number of buildings flooded', help_text='Number of buildings flooded but not destroyed', null=True, blank=True, )
      numberbuildingsflooded_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Number of buildings flooded: source', help_text='The source of the data', )
      numberbuildingsflooded_c = models.TextField(null=True, blank=True, verbose_name='Number of buildings flooded: comment', help_text='A comment on the data', )
      numberbuildingsflooded_q = models.ForeignKey(Lookupstatus, db_column='numberbuildingsflooded_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Number of buildings flooded: status', help_text='The status of the data', blank=True, blank=True, )
      numberbridgesdestroyed = models.IntegerField(verbose_name='Number of bridges destroyed', help_text='Number of bridges destroyed (all types of bridges)', null=True, blank=True, )
      numberbridgesdestroyed_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Number of bridges destroyed: source', help_text='The source of the data', )
      numberbridgesdestroyed_c = models.TextField(null=True, blank=True, verbose_name='Number of bridges destroyed: comment', help_text='A comment on the data', )
      numberbridgesdestroyed_q = models.ForeignKey(Lookupstatus, db_column='numberbridgesdestroyed_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Number of bridges destroyed: status', help_text='The status of the data', blank=True, blank=True, )
      numberportsaffected = models.IntegerField(verbose_name='Number of ports affected', help_text='Number of ports affected', null=True, blank=True, )
      numberportsaffected_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Number of ports affected: source', help_text='The source of the data', )
      numberportsaffected_c = models.TextField(null=True, blank=True, verbose_name='Number of ports affected: comment', help_text='A comment on the data', )
      numberportsaffected_q = models.ForeignKey(Lookupstatus, db_column='numberportsaffected_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Number of ports affected: status', help_text='The status of the data', blank=True, blank=True, )
      numberboatsdestroyed = models.IntegerField(verbose_name='Number of boats destroyed', help_text='Number of boats destroyed (all types of boats)', null=True, blank=True, )
      numberboatsdestroyed_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Number of boats destroyed: source', help_text='The source of the data', )
      numberboatsdestroyed_c = models.TextField(null=True, blank=True, verbose_name='Number of boats destroyed: comment', help_text='A comment on the data', )
      numberboatsdestroyed_q = models.ForeignKey(Lookupstatus, db_column='numberboatsdestroyed_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Number of boats destroyed: status', help_text='The status of the data', blank=True, blank=True, )
      numbervehiclesdestroyed = models.IntegerField(verbose_name='Number of vehicles destroyed', help_text='Number of vehicles destroyed (all types of vehicles)', null=True, blank=True, )
      numbervehiclesdestroyed_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Number of vehicles destroyed: source', help_text='The source of the data', )
      numbervehiclesdestroyed_c = models.TextField(null=True, blank=True, verbose_name='Number of vehicles destroyed: comment', help_text='A comment on the data', )
      numbervehiclesdestroyed_q = models.ForeignKey(Lookupstatus, db_column='numbervehiclesdestroyed_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Number of vehicles destroyed: status', help_text='The status of the data', blank=True, blank=True, )
      numberofbuildingsdestroyed = models.IntegerField(verbose_name='Total number of buildings destroyed', help_text='Total number of buildings destroyed, collapsed or damaged beyond repair due to tsunami', null=True, blank=True, )
      numberofbuildingsdestroyed_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Total number of buildings destroyed: source', help_text='The source of the data', )
      numberofbuildingsdestroyed_c = models.TextField(null=True, blank=True, verbose_name='Total number of buildings destroyed: comment', help_text='A comment on the data', )
      numberofbuildingsdestroyed_q = models.ForeignKey(Lookupstatus, db_column='numberofbuildingsdestroyed_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Total number of buildings destroyed: status', help_text='The status of the data', blank=True, blank=True, )
      numberofbuildingsdamaged = models.IntegerField(verbose_name='Number of buildings damaged', help_text='Total number of buildings damaged due to tsunami', null=True, blank=True, )
      numberofbuildingsdamaged_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Number of buildings damaged: source', help_text='The source of the data', )
      numberofbuildingsdamaged_c = models.TextField(null=True, blank=True, verbose_name='Number of buildings damaged: comment', help_text='A comment on the data', )
      numberofbuildingsdamaged_q = models.ForeignKey(Lookupstatus, db_column='numberofbuildingsdamaged_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Number of buildings damaged: status', help_text='The status of the data', blank=True, blank=True, )
      numberofdwellingsdestroyed = models.IntegerField(verbose_name='Number of dwellings destroyed', help_text='Total number of dwelling units destroyed, collapsed or damaged beyond repair due to tsunami', null=True, blank=True, )
      numberofdwellingsdestroyed_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Number of dwellings destroyed: source', help_text='The source of the data', )
      numberofdwellingsdestroyed_c = models.TextField(null=True, blank=True, verbose_name='Number of dwellings destroyed: comment', help_text='A comment on the data', )
      numberofdwellingsdestroyed_q = models.ForeignKey(Lookupstatus, db_column='numberofdwellingsdestroyed_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Number of dwellings destroyed: status', help_text='The status of the data', blank=True, blank=True, )
      numberofdwellingsdamaged = models.IntegerField(verbose_name='Number of dwellings damaged', help_text='Total number of dwelling units damaged due to tsunami', null=True, blank=True, )
      numberofdwellingsdamaged_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Number of dwellings damaged: source', help_text='The source of the data', )
      numberofdwellingsdamaged_c = models.TextField(null=True, blank=True, verbose_name='Number of dwellings damaged: comment', help_text='A comment on the data', )
      numberofdwellingsdamaged_q = models.ForeignKey(Lookupstatus, db_column='numberofdwellingsdamaged_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Number of dwellings damaged: status', help_text='The status of the data', blank=True, blank=True, )
      peoplehomeless = models.IntegerField(verbose_name='People homeless', help_text='Total number of people homeless for a significant duration of time due to tsunami', null=True, blank=True, )
      peoplehomeless_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='People homeless: source', help_text='The source of the data', )
      peoplehomeless_c = models.TextField(null=True, blank=True, verbose_name='People homeless: comment', help_text='A comment on the data', )
      peoplehomeless_q = models.ForeignKey(Lookupstatus, db_column='peoplehomeless_q', related_name='+', max_length=10, null=False, default='0', verbose_name='People homeless: status', help_text='The status of the data', blank=True, blank=True, )
      directeconomicloss = models.FloatField(verbose_name='Direct economic loss', help_text='Total estimated direct economic loss due to tsunami, million US$, contemporaneous. In absolute US$ value of the year of occurrence. Only includes direct effects.', null=True, blank=True, )
      directeconomicloss_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Direct economic loss: source', help_text='The source of the data', )
      directeconomicloss_c = models.TextField(null=True, blank=True, verbose_name='Direct economic loss: comment', help_text='A comment on the data', )
      directeconomicloss_q = models.ForeignKey(Lookupstatus, db_column='directeconomicloss_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Direct economic loss: status', help_text='The status of the data', blank=True, blank=True, )
      indirecteconomicloss = models.FloatField(verbose_name='Indirect economic loss', help_text='Total estimated indirect economic loss due to tsunami, million US$, contemporaneous. In absolute US$ value of the year of occurrence. Only includes indirect effects. ', null=True, blank=True, )
      indirecteconomicloss_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Indirect economic loss: source', help_text='The source of the data', )
      indirecteconomicloss_c = models.TextField(null=True, blank=True, verbose_name='Indirect economic loss: comment', help_text='A comment on the data', )
      indirecteconomicloss_q = models.ForeignKey(Lookupstatus, db_column='indirecteconomicloss_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Indirect economic loss: status', help_text='The status of the data', blank=True, blank=True, )
      numberofhouseholds = models.IntegerField(verbose_name='Number of households', help_text='Total number of households in the tsunami affected zone (contemporaneous)', null=True, blank=True, )
      numberofhouseholds_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Number of households: source', help_text='The source of the data', )
      numberofhouseholds_c = models.TextField(null=True, blank=True, verbose_name='Number of households: comment', help_text='A comment on the data', )
      numberofhouseholds_q = models.ForeignKey(Lookupstatus, db_column='numberofhouseholds_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Number of households: status', help_text='The status of the data', blank=True, blank=True, )
      totalnumberofbuildings = models.IntegerField(verbose_name='Total number of buildings', help_text='Total number of buildings in the tsunami affected zone (contemporaneous)', null=True, blank=True, )
      totalnumberofbuildings_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Total number of buildings: source', help_text='The source of the data', )
      totalnumberofbuildings_c = models.TextField(null=True, blank=True, verbose_name='Total number of buildings: comment', help_text='A comment on the data', )
      totalnumberofbuildings_q = models.ForeignKey(Lookupstatus, db_column='totalnumberofbuildings_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Total number of buildings: status', help_text='The status of the data', blank=True, blank=True, )
      population = models.IntegerField(verbose_name='Population', help_text='Population (contemporaneous)', null=True, blank=True, )
      population_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Population: source', help_text='The source of the data', )
      population_c = models.TextField(null=True, blank=True, verbose_name='Population: comment', help_text='A comment on the data', )
      population_q = models.ForeignKey(Lookupstatus, db_column='population_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Population: status', help_text='The status of the data', blank=True, blank=True, )
      contemporaneousdate = models.DateTimeField(null=True, blank=True, verbose_name='Base date', help_text='Base date for contemporaneous data, if not date of event, eg 1970-05-31', )
      ownerid = models.IntegerField(null=True, default='1', verbose_name='Owner ID', help_text='ID of the creator/owner of the record', blank=True, )
      lastupdatebyid = models.IntegerField(null=True, default='1', verbose_name='Last update by ID', help_text='ID of the last person to update this record', blank=True, )
      lastupdate = models.DateTimeField(null=True, blank=True, help_text='Last record update date', )

      class Meta:
            db_table = u'econd\".\"tsunamisubevent'

      def __unicode__(self):
            return self.name


class Slopefailuresubevent(models.Model):
      id = models.AutoField(primary_key=True, null=False, help_text='Primary Key: Internal database id', blank=True, )
      name = models.CharField(max_length=255, null=False, default='untitled', verbose_name='Slope failure name', help_text='The name of the slope failure', blank=True, )
      parentid = models.ForeignKey(Slopefailurestudy, db_column='parentid', related_name='+', null=False, default='0', verbose_name='Parent slope failure study', help_text='The slope failure study of which this is a subevent', max_length=255, blank=True, )
      parenttype = models.CharField(max_length=25, null=True, blank=True, verbose_name='Parent study', help_text='The type of study which owns this subevent. Set on creation, this must not be changed.', )
      location = models.CharField(max_length=255, null=True, blank=True, default='', verbose_name='Address or location', help_text='Street address or description of location', )
      boundaryid = models.IntegerField(verbose_name='User defined boundary or administrative area id', help_text='User defined boundary or administrative area id', max_length=255, blank=True, )
      boundaryaffected = models.CharField(max_length=255, null=True, blank=True, verbose_name='Geometry (long/lat)', help_text='The location or boundary in WKT GIS format eg POINT (long lat). ', )
      boundary_c = models.TextField(null=True, blank=True, verbose_name='Location precision notes', help_text='A comment on the precision of the location or boundary', )
      typeofslopefailure = models.CharField(max_length=50, null=True, blank=True, default='', verbose_name='Type of slope failure', help_text='Type of slope failure: rock, soil, slide, debris flow', )
      subeventnarrative = models.TextField(null=True, blank=True, verbose_name='Notes on the slope failure', help_text='Descriptive text describing the slope failure', )
      dateoccurred = models.DateTimeField(null=True, blank=True, verbose_name='Date occurred (local)', help_text='The date of occurrance in local time, eg 1970-05-31', )
      timeoccurred = models.DateTimeField(null=True, blank=True, verbose_name='Time occurred (local)', help_text='The time of occurrance in local time, eg 14:30', )
      dateobserved = models.DateTimeField(null=True, blank=True, verbose_name='Date observed (local)', help_text='The date of observation in local time, eg 1970-05-31', )
      timeobserved = models.DateTimeField(null=True, blank=True, verbose_name='Time observed (local)', help_text='The time of observation in local time, eg 14:30', )
      duration = models.DateTimeField(null=True, blank=True, verbose_name='Duration', help_text='Duration: how long did it last, eg 03:30', )
      length = models.FloatField(verbose_name='Length or travel distance', help_text='Length or travel distance (top to bottom), metres', null=True, blank=True, )
      width = models.FloatField(verbose_name='Width of source area', help_text='Width of source area (along contour), metres', null=True, blank=True, )
      widthofdeposit = models.FloatField(verbose_name='Width of deposit', help_text='Width of deposit (along contour), metres', null=True, blank=True, )
      depth = models.FloatField(verbose_name='Depth of source area', help_text='Depth of source area, metres', null=True, blank=True, )
      depthofdeposit = models.FloatField(verbose_name='Depth of deposit', help_text='Depth of deposit, metres', null=True, blank=True, )
      volume = models.FloatField(verbose_name='Volume', help_text='Volume, cubic metres', null=True, blank=True, )
      generalsetting = models.CharField(max_length=255, null=True, blank=True, default='', verbose_name='General setting', help_text='General setting (Land use type): Sparse residential - wooden houses, Dense residential - wooden houses...', )
      continuityofmovement = models.CharField(max_length=255, null=True, blank=True, default='', verbose_name='Continuity of movement', help_text='Continuity of movement: Once/Sporadic, Continuous, Episodic, Other, or Unknown', )
      conditionsimmediatelyprior = models.CharField(max_length=255, null=True, blank=True, default='', verbose_name='Conditions immediately prior to the slope failure', help_text='Conditions immediately prior to the slope failure: Average weather, Unusually dry weather, Unusually wet weather...', )
      slopemodification = models.CharField(max_length=255, null=True, blank=True, default='', verbose_name='Slope modification', help_text='Slope modification: natural, cut, fill, embankment, graded (cut and fill), unknown', )
      material = models.CharField(max_length=255, null=True, blank=True, default='', verbose_name='Material', help_text='Material: Bedrock, Coarse (gravel-, cobble- and boulder-sized), Fine (sand, silt, clay), Mixture of coarse and fine, unknown', )
      consistency = models.CharField(max_length=255, null=True, blank=True, default='', verbose_name='Consistency', help_text='Consistency: liquid, solid-wet, solid-dry, rubble, unknown', )
      trees = models.CharField(max_length=255, null=True, blank=True, default='', verbose_name='Trees', help_text='Trees: standing upright, fallen, leaning uphill, leaning downhill, leaning all directions, none, unknown ', )
      treescarheight = models.FloatField(verbose_name='Scar height on trees', help_text='Scar height on trees, metres', null=True, blank=True, )
      treemudheight = models.FloatField(verbose_name='Mud coating height on trees', help_text='Mud coating height on trees, metres', null=True, blank=True, )
      movementtype = models.CharField(max_length=255, null=True, blank=True, default='', verbose_name='Movement type', help_text='Movement type: fall, flow, topple, rotational slide, translational slide, spread, avalanche, unknown', )
      speed = models.FloatField(verbose_name='Speed', help_text='Speed, metres per second', null=True, blank=True, )
      overallimpact = models.TextField(null=True, blank=True, verbose_name='Overall impact', help_text='Overall socio economic impact', )
      peopleinjuredduetoslopefailures = models.IntegerField(verbose_name='People injured due to slope failures', help_text='People injured due to slope failures', null=True, blank=True, )
      peopleinjuredduetoslopefailures_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='People injured due to slope failures: source', help_text='The source of the data', )
      peopleinjuredduetoslopefailures_c = models.TextField(null=True, blank=True, verbose_name='People injured due to slope failures: comment', help_text='A comment on the data', )
      peopleinjuredduetoslopefailures_q = models.ForeignKey(Lookupstatus, db_column='peopleinjuredduetoslopefailures_q', related_name='+', max_length=10, null=False, default='0', verbose_name='People injured due to slope failures: status', help_text='The status of the data', blank=True, blank=True, )
      peoplemissingduetoslopefailures = models.IntegerField(verbose_name='People missing due to slope failures', help_text='People missing due to slope failures', null=True, blank=True, )
      peoplemissingduetoslopefailures_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='People missing due to slope failures: source', help_text='The source of the data', )
      peoplemissingduetoslopefailures_c = models.TextField(null=True, blank=True, verbose_name='People missing due to slope failures: comment', help_text='A comment on the data', )
      peoplemissingduetoslopefailures_q = models.ForeignKey(Lookupstatus, db_column='peoplemissingduetoslopefailures_q', related_name='+', max_length=10, null=False, default='0', verbose_name='People missing due to slope failures: status', help_text='The status of the data', blank=True, blank=True, )
      peoplekilledduetoslopefailures = models.IntegerField(verbose_name='People killed due to slope failures', help_text='People killed due to slope failures', null=True, blank=True, )
      peoplekilledduetoslopefailures_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='People killed due to slope failures: source', help_text='The source of the data', )
      peoplekilledduetoslopefailures_c = models.TextField(null=True, blank=True, verbose_name='People killed due to slope failures: comment', help_text='A comment on the data', )
      peoplekilledduetoslopefailures_q = models.ForeignKey(Lookupstatus, db_column='peoplekilledduetoslopefailures_q', related_name='+', max_length=10, null=False, default='0', verbose_name='People killed due to slope failures: status', help_text='The status of the data', blank=True, blank=True, )
      peopledyingpostcatastrophe = models.IntegerField(verbose_name='People dying post catastrophe', help_text='People dying after time has passed but their deaths related to the original slope failure', null=True, blank=True, )
      peopledyingpostcatastrophe_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='People dying post catastrophe: source', help_text='The source of the data', )
      peopledyingpostcatastrophe_c = models.TextField(null=True, blank=True, verbose_name='People dying post catastrophe: comment', help_text='A comment on the data', )
      peopledyingpostcatastrophe_q = models.ForeignKey(Lookupstatus, db_column='peopledyingpostcatastrophe_q', related_name='+', max_length=10, null=False, default='0', verbose_name='People dying post catastrophe: status', help_text='The status of the data', blank=True, blank=True, )
      numberofbuildingsdestroyed = models.IntegerField(verbose_name='Total number of buildings destroyed', help_text='Total number of buildings destroyed, collapsed or damaged beyond repair due to slope failure', null=True, blank=True, )
      numberofbuildingsdestroyed_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Total number of buildings destroyed: source', help_text='The source of the data', )
      numberofbuildingsdestroyed_c = models.TextField(null=True, blank=True, verbose_name='Total number of buildings destroyed: comment', help_text='A comment on the data', )
      numberofbuildingsdestroyed_q = models.ForeignKey(Lookupstatus, db_column='numberofbuildingsdestroyed_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Total number of buildings destroyed: status', help_text='The status of the data', blank=True, blank=True, )
      numberofbuildingsdamaged = models.IntegerField(verbose_name='Number of buildings damaged', help_text='Total number of buildings damaged due to slope failure', null=True, blank=True, )
      numberofbuildingsdamaged_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Number of buildings damaged: source', help_text='The source of the data', )
      numberofbuildingsdamaged_c = models.TextField(null=True, blank=True, verbose_name='Number of buildings damaged: comment', help_text='A comment on the data', )
      numberofbuildingsdamaged_q = models.ForeignKey(Lookupstatus, db_column='numberofbuildingsdamaged_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Number of buildings damaged: status', help_text='The status of the data', blank=True, blank=True, )
      numberofdwellingsdestroyed = models.IntegerField(verbose_name='Number of dwellings destroyed', help_text='Total number of dwelling units destroyed, collapsed or damaged beyond repair due to slope failure', null=True, blank=True, )
      numberofdwellingsdestroyed_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Number of dwellings destroyed: source', help_text='The source of the data', )
      numberofdwellingsdestroyed_c = models.TextField(null=True, blank=True, verbose_name='Number of dwellings destroyed: comment', help_text='A comment on the data', )
      numberofdwellingsdestroyed_q = models.ForeignKey(Lookupstatus, db_column='numberofdwellingsdestroyed_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Number of dwellings destroyed: status', help_text='The status of the data', blank=True, blank=True, )
      numberofdwellingsdamaged = models.IntegerField(verbose_name='Number of dwellings damaged', help_text='Total number of dwelling units damaged due to slope failure', null=True, blank=True, )
      numberofdwellingsdamaged_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Number of dwellings damaged: source', help_text='The source of the data', )
      numberofdwellingsdamaged_c = models.TextField(null=True, blank=True, verbose_name='Number of dwellings damaged: comment', help_text='A comment on the data', )
      numberofdwellingsdamaged_q = models.ForeignKey(Lookupstatus, db_column='numberofdwellingsdamaged_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Number of dwellings damaged: status', help_text='The status of the data', blank=True, blank=True, )
      peoplehomeless = models.IntegerField(verbose_name='People homeless', help_text='Total number of people homeless for a significant duration of time due to slope failure', null=True, blank=True, )
      peoplehomeless_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='People homeless: source', help_text='The source of the data', )
      peoplehomeless_c = models.TextField(null=True, blank=True, verbose_name='People homeless: comment', help_text='A comment on the data', )
      peoplehomeless_q = models.ForeignKey(Lookupstatus, db_column='peoplehomeless_q', related_name='+', max_length=10, null=False, default='0', verbose_name='People homeless: status', help_text='The status of the data', blank=True, blank=True, )
      directeconomicloss = models.FloatField(verbose_name='Direct economic loss', help_text='Total estimated direct economic loss due to slope failure, million US$, contemporaneous. In absolute US$ value of the year of occurrence. Only includes direct effects.', null=True, blank=True, )
      directeconomicloss_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Direct economic loss: source', help_text='The source of the data', )
      directeconomicloss_c = models.TextField(null=True, blank=True, verbose_name='Direct economic loss: comment', help_text='A comment on the data', )
      directeconomicloss_q = models.ForeignKey(Lookupstatus, db_column='directeconomicloss_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Direct economic loss: status', help_text='The status of the data', blank=True, blank=True, )
      indirecteconomicloss = models.FloatField(verbose_name='Indirect economic loss', help_text='Total estimated indirect economic loss due to slope failure, million US$, contemporaneous. In absolute US$ value of the year of occurrence. Only includes indirect effects. ', null=True, blank=True, )
      indirecteconomicloss_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Indirect economic loss: source', help_text='The source of the data', )
      indirecteconomicloss_c = models.TextField(null=True, blank=True, verbose_name='Indirect economic loss: comment', help_text='A comment on the data', )
      indirecteconomicloss_q = models.ForeignKey(Lookupstatus, db_column='indirecteconomicloss_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Indirect economic loss: status', help_text='The status of the data', blank=True, blank=True, )
      numberofhouseholds = models.IntegerField(verbose_name='Number of households', help_text='Total number of households in the affected slope failure zone (contemporaneous)', null=True, blank=True, )
      numberofhouseholds_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Number of households: source', help_text='The source of the data', )
      numberofhouseholds_c = models.TextField(null=True, blank=True, verbose_name='Number of households: comment', help_text='A comment on the data', )
      numberofhouseholds_q = models.ForeignKey(Lookupstatus, db_column='numberofhouseholds_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Number of households: status', help_text='The status of the data', blank=True, blank=True, )
      totalnumberofbuildings = models.IntegerField(verbose_name='Total number of buildings', help_text='Total number of buildings in the affected slope failure zone (contemporaneous)', null=True, blank=True, )
      totalnumberofbuildings_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Total number of buildings: source', help_text='The source of the data', )
      totalnumberofbuildings_c = models.TextField(null=True, blank=True, verbose_name='Total number of buildings: comment', help_text='A comment on the data', )
      totalnumberofbuildings_q = models.ForeignKey(Lookupstatus, db_column='totalnumberofbuildings_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Total number of buildings: status', help_text='The status of the data', blank=True, blank=True, )
      population = models.IntegerField(verbose_name='Population', help_text='Population (contemporaneous)', null=True, blank=True, )
      population_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Population: source', help_text='The source of the data', )
      population_c = models.TextField(null=True, blank=True, verbose_name='Population: comment', help_text='A comment on the data', )
      population_q = models.ForeignKey(Lookupstatus, db_column='population_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Population: status', help_text='The status of the data', blank=True, blank=True, )
      contemporaneousdate = models.DateTimeField(null=True, blank=True, verbose_name='Base date', help_text='Base date for contemporaneous data, if not date of event, eg 1970-05-31', )
      ownerid = models.IntegerField(null=True, default='1', verbose_name='Owner ID', help_text='ID of the creator/owner of the record', blank=True, )
      lastupdatebyid = models.IntegerField(null=True, default='1', verbose_name='Last update by ID', help_text='ID of the last person to update this record', blank=True, )
      lastupdate = models.DateTimeField(null=True, blank=True, help_text='Last record update date', )

      class Meta:
            db_table = u'econd\".\"slopefailuresubevent'

      def __unicode__(self):
            return self.name


class Firefollowingsubevent(models.Model):
      id = models.AutoField(primary_key=True, null=False, help_text='Primary Key: Internal database id', blank=True, )
      name = models.CharField(max_length=255, null=False, default='untitled', verbose_name='Fire name', help_text='The name of the fire', blank=True, )
      parentid = models.ForeignKey(Tsunamistudy, db_column='parentid', related_name='+', null=False, default='0', verbose_name='Parent fire following study', help_text='The fire following study of which this is a subevent', max_length=255, blank=True, )
      parenttype = models.CharField(max_length=25, null=True, blank=True, verbose_name='Parent study', help_text='The type of study which owns this subevent. Set on creation, this must not be changed.', )
      location = models.CharField(max_length=255, null=True, blank=True, default='', verbose_name='Address or location', help_text='Street address or description of location', )
      boundaryid = models.IntegerField(verbose_name='User defined boundary or administrative area id', help_text='User defined boundary or administrative area id', max_length=255, blank=True, )
      boundaryaffected = models.CharField(max_length=255, null=True, blank=True, verbose_name='Geometry (long/lat)', help_text='The location or boundary in WKT GIS format eg POINT (long lat). ', )
      boundary_c = models.TextField(null=True, blank=True, verbose_name='Location precision notes', help_text='A comment on the precision of the location or boundary', )
      subeventnarrative = models.TextField(null=True, blank=True, verbose_name='Notes on the fire', help_text='Descriptive text describing the fire', )
      datestarted = models.DateTimeField(null=True, blank=True, verbose_name='Date started (local)', help_text='The date of fire start in local time, eg 1970-05-31', )
      timestarted = models.DateTimeField(null=True, blank=True, verbose_name='Time started (local)', help_text='The time of start in local time, eg 14:30', )
      dateended = models.DateTimeField(null=True, blank=True, verbose_name='Date ended (local)', help_text='The date of end in local time, eg 1970-05-31', )
      timeended = models.DateTimeField(null=True, blank=True, verbose_name='Time ended (local)', help_text='The time of end in local time, eg 14:30', )
      duration = models.DateTimeField(null=True, blank=True, verbose_name='Duration', help_text='Duration: how long did it last, eg 03:30', )
      area = models.FloatField(verbose_name='Burnt area', help_text='Burnt area footprint, square metres', null=True, blank=True, )
      width = models.FloatField(verbose_name='Width of burnt area', help_text='Width of burnt area (estimated along contour), metres', null=True, blank=True, )
      length = models.FloatField(verbose_name='Length of burnt area', help_text='Length of burnt area (estimated along contour), metres', null=True, blank=True, )
      finalburntarea = models.FloatField(verbose_name='Final burnt area', help_text='Final burnt area: SFED (single family equivalent dwelling)', null=True, blank=True, )
      finalburntarea_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Final burnt area: source', help_text='The source of the data', )
      finalburntarea_c = models.TextField(null=True, blank=True, verbose_name='Final burnt area: comment', help_text='A comment on the data', )
      finalburntarea_q = models.ForeignKey(Lookupstatus, db_column='finalburntarea_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Final burnt area: status', help_text='The status of the data', blank=True, blank=True, )
      generalsetting = models.CharField(max_length=255, null=True, blank=True, default='', verbose_name='General setting', help_text='General setting (Land use type): Sparse residential - wooden houses, Dense residential - wooden houses...', )
      conditionsimmediatelyprior = models.CharField(max_length=255, null=True, blank=True, default='', verbose_name='Conditions immediately prior to the fire', help_text='Conditions immediately prior to the fire: Average for the season, Unseasonably dry, Unusually wet,...', )
      conditionsduring = models.CharField(max_length=255, null=True, blank=True, default='', verbose_name='Conditions during the fire', help_text='Conditions during the fire: Average for the season, Unseasonably dry, Unusually wet,...', )
      continuityofpropagation = models.CharField(max_length=255, null=True, blank=True, default='', verbose_name='Continuity of fire propagation', help_text='Continuity of fire propagation: Did not propagate, Limited spread, Episodic, Extensive spread, Other, or Unknown', )
      naturalbreaks = models.CharField(max_length=255, null=True, blank=True, default='', verbose_name='Natural breaks', help_text='Natural breaks: Large road, Open ground, Other, Unknown', )
      speed = models.FloatField(verbose_name='Speed of propagation', help_text='Speed of fire propagation, metres per second', null=True, blank=True, )
      totalnumberofignitions = models.IntegerField(verbose_name='Total number of ignitions', help_text='Total number of ignitions', null=True, blank=True, )
      totalnumberofignitions_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Total number of ignitions: source', help_text='The source of the data', )
      totalnumberofignitions_c = models.TextField(null=True, blank=True, verbose_name='Total number of ignitions: comment', help_text='A comment on the data', )
      totalnumberofignitions_q = models.ForeignKey(Lookupstatus, db_column='totalnumberofignitions_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Total number of ignitions: status', help_text='The status of the data', blank=True, blank=True, )
      numberoflargefires = models.IntegerField(verbose_name='Number of large fires', help_text='Number of large fires', null=True, blank=True, )
      numberoflargefires_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Number of large fires: source', help_text='The source of the data', )
      numberoflargefires_c = models.TextField(null=True, blank=True, verbose_name='Number of large fires: comment', help_text='A comment on the data', )
      numberoflargefires_q = models.ForeignKey(Lookupstatus, db_column='numberoflargefires_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Number of large fires: status', help_text='The status of the data', blank=True, blank=True, )
      overallimpact = models.TextField(null=True, blank=True, verbose_name='Overall impact', help_text='Overall socio economic impact', )
      peopleinjuredduetofirefollowing = models.IntegerField(verbose_name='People injured due to fire following', help_text='People injured due to fire following', null=True, blank=True, )
      peopleinjuredduetofirefollowing_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='People injured due to fire following: source', help_text='The source of the data', )
      peopleinjuredduetofirefollowing_c = models.TextField(null=True, blank=True, verbose_name='People injured due to fire following: comment', help_text='A comment on the data', )
      peopleinjuredduetofirefollowing_q = models.ForeignKey(Lookupstatus, db_column='peopleinjuredduetofirefollowing_q', related_name='+', max_length=10, null=False, default='0', verbose_name='People injured due to fire following: status', help_text='The status of the data', blank=True, blank=True, )
      peoplemissingduetofirefollowing = models.IntegerField(verbose_name='People missing due to fire following', help_text='People missing due to fire following', null=True, blank=True, )
      peoplemissingduetofirefollowing_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='People missing due to fire following: source', help_text='The source of the data', )
      peoplemissingduetofirefollowing_c = models.TextField(null=True, blank=True, verbose_name='People missing due to fire following: comment', help_text='A comment on the data', )
      peoplemissingduetofirefollowing_q = models.ForeignKey(Lookupstatus, db_column='peoplemissingduetofirefollowing_q', related_name='+', max_length=10, null=False, default='0', verbose_name='People missing due to fire following: status', help_text='The status of the data', blank=True, blank=True, )
      peoplekilledduetofirefollowing = models.IntegerField(verbose_name='People killed due to fire following', help_text='People killed due to fire following', null=True, blank=True, )
      peoplekilledduetofirefollowing_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='People killed due to fire following: source', help_text='The source of the data', )
      peoplekilledduetofirefollowing_c = models.TextField(null=True, blank=True, verbose_name='People killed due to fire following: comment', help_text='A comment on the data', )
      peoplekilledduetofirefollowing_q = models.ForeignKey(Lookupstatus, db_column='peoplekilledduetofirefollowing_q', related_name='+', max_length=10, null=False, default='0', verbose_name='People killed due to fire following: status', help_text='The status of the data', blank=True, blank=True, )
      peopledyingpostcatastrophe = models.IntegerField(verbose_name='People dying post catastrophe', help_text='People dying after time has passed but their deaths related to the original fire following event', null=True, blank=True, )
      peopledyingpostcatastrophe_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='People dying post catastrophe: source', help_text='The source of the data', )
      peopledyingpostcatastrophe_c = models.TextField(null=True, blank=True, verbose_name='People dying post catastrophe: comment', help_text='A comment on the data', )
      peopledyingpostcatastrophe_q = models.ForeignKey(Lookupstatus, db_column='peopledyingpostcatastrophe_q', related_name='+', max_length=10, null=False, default='0', verbose_name='People dying post catastrophe: status', help_text='The status of the data', blank=True, blank=True, )
      numberofbuildingsdestroyed = models.IntegerField(verbose_name='Total number of buildings destroyed', help_text='Total number of buildings destroyed, collapsed or damaged beyond repair due to fire following', null=True, blank=True, )
      numberofbuildingsdestroyed_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Total number of buildings destroyed: source', help_text='The source of the data', )
      numberofbuildingsdestroyed_c = models.TextField(null=True, blank=True, verbose_name='Total number of buildings destroyed: comment', help_text='A comment on the data', )
      numberofbuildingsdestroyed_q = models.ForeignKey(Lookupstatus, db_column='numberofbuildingsdestroyed_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Total number of buildings destroyed: status', help_text='The status of the data', blank=True, blank=True, )
      numberofbuildingsdamaged = models.IntegerField(verbose_name='Number of buildings damaged', help_text='Total number of buildings damaged due to fire following', null=True, blank=True, )
      numberofbuildingsdamaged_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Number of buildings damaged: source', help_text='The source of the data', )
      numberofbuildingsdamaged_c = models.TextField(null=True, blank=True, verbose_name='Number of buildings damaged: comment', help_text='A comment on the data', )
      numberofbuildingsdamaged_q = models.ForeignKey(Lookupstatus, db_column='numberofbuildingsdamaged_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Number of buildings damaged: status', help_text='The status of the data', blank=True, blank=True, )
      numberofdwellingsdestroyed = models.IntegerField(verbose_name='Number of dwellings destroyed', help_text='Total number of dwelling units destroyed, collapsed or damaged beyond repair due to fire following', null=True, blank=True, )
      numberofdwellingsdestroyed_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Number of dwellings destroyed: source', help_text='The source of the data', )
      numberofdwellingsdestroyed_c = models.TextField(null=True, blank=True, verbose_name='Number of dwellings destroyed: comment', help_text='A comment on the data', )
      numberofdwellingsdestroyed_q = models.ForeignKey(Lookupstatus, db_column='numberofdwellingsdestroyed_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Number of dwellings destroyed: status', help_text='The status of the data', blank=True, blank=True, )
      numberofdwellingsdamaged = models.IntegerField(verbose_name='Number of dwellings damaged', help_text='Total number of dwelling units damaged due to fire following', null=True, blank=True, )
      numberofdwellingsdamaged_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Number of dwellings damaged: source', help_text='The source of the data', )
      numberofdwellingsdamaged_c = models.TextField(null=True, blank=True, verbose_name='Number of dwellings damaged: comment', help_text='A comment on the data', )
      numberofdwellingsdamaged_q = models.ForeignKey(Lookupstatus, db_column='numberofdwellingsdamaged_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Number of dwellings damaged: status', help_text='The status of the data', blank=True, blank=True, )
      peoplehomeless = models.IntegerField(verbose_name='People homeless', help_text='Total number of people homeless for a significant duration of time due to fire following', null=True, blank=True, )
      peoplehomeless_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='People homeless: source', help_text='The source of the data', )
      peoplehomeless_c = models.TextField(null=True, blank=True, verbose_name='People homeless: comment', help_text='A comment on the data', )
      peoplehomeless_q = models.ForeignKey(Lookupstatus, db_column='peoplehomeless_q', related_name='+', max_length=10, null=False, default='0', verbose_name='People homeless: status', help_text='The status of the data', blank=True, blank=True, )
      directeconomicloss = models.FloatField(verbose_name='Direct economic loss', help_text='Total estimated direct economic loss due to fire following, million US$, contemporaneous. In absolute US$ value of the year of occurrence. Only includes direct effects.', null=True, blank=True, )
      directeconomicloss_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Direct economic loss: source', help_text='The source of the data', )
      directeconomicloss_c = models.TextField(null=True, blank=True, verbose_name='Direct economic loss: comment', help_text='A comment on the data', )
      directeconomicloss_q = models.ForeignKey(Lookupstatus, db_column='directeconomicloss_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Direct economic loss: status', help_text='The status of the data', blank=True, blank=True, )
      indirecteconomicloss = models.FloatField(verbose_name='Indirect economic loss', help_text='Total estimated indirect economic loss due to fire following, million US$, contemporaneous. In absolute US$ value of the year of occurrence. Only includes indirect effects. ', null=True, blank=True, )
      indirecteconomicloss_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Indirect economic loss: source', help_text='The source of the data', )
      indirecteconomicloss_c = models.TextField(null=True, blank=True, verbose_name='Indirect economic loss: comment', help_text='A comment on the data', )
      indirecteconomicloss_q = models.ForeignKey(Lookupstatus, db_column='indirecteconomicloss_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Indirect economic loss: status', help_text='The status of the data', blank=True, blank=True, )
      numberofhouseholds = models.IntegerField(verbose_name='Number of households', help_text='Total number of households in the zone affected by fire following (contemporaneous)', null=True, blank=True, )
      numberofhouseholds_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Number of households: source', help_text='The source of the data', )
      numberofhouseholds_c = models.TextField(null=True, blank=True, verbose_name='Number of households: comment', help_text='A comment on the data', )
      numberofhouseholds_q = models.ForeignKey(Lookupstatus, db_column='numberofhouseholds_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Number of households: status', help_text='The status of the data', blank=True, blank=True, )
      totalnumberofbuildings = models.IntegerField(verbose_name='Total number of buildings', help_text='Total number of buildings in the zone affected by fire following (contemporaneous)', null=True, blank=True, )
      totalnumberofbuildings_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Total number of buildings: source', help_text='The source of the data', )
      totalnumberofbuildings_c = models.TextField(null=True, blank=True, verbose_name='Total number of buildings: comment', help_text='A comment on the data', )
      totalnumberofbuildings_q = models.ForeignKey(Lookupstatus, db_column='totalnumberofbuildings_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Total number of buildings: status', help_text='The status of the data', blank=True, blank=True, )
      population = models.IntegerField(verbose_name='Population', help_text='Population (contemporaneous)', null=True, blank=True, )
      population_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Population: source', help_text='The source of the data', )
      population_c = models.TextField(null=True, blank=True, verbose_name='Population: comment', help_text='A comment on the data', )
      population_q = models.ForeignKey(Lookupstatus, db_column='population_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Population: status', help_text='The status of the data', blank=True, blank=True, )
      contemporaneousdate = models.DateTimeField(null=True, blank=True, verbose_name='Base date', help_text='Base date for contemporaneous data, if not date of event, eg 1970-05-31', )
      ownerid = models.IntegerField(null=True, default='1', verbose_name='Owner ID', help_text='ID of the creator/owner of the record', blank=True, )
      lastupdatebyid = models.IntegerField(null=True, default='1', verbose_name='Last update by ID', help_text='ID of the last person to update this record', blank=True, )
      lastupdate = models.DateTimeField(null=True, blank=True, help_text='Last record update date', )

      class Meta:
            db_table = u'econd\".\"firefollowingsubevent'

      def __unicode__(self):
            return self.name


class Liquefactionsubevent(models.Model):
      id = models.AutoField(primary_key=True, null=False, help_text='Primary Key: Internal database id', blank=True, )
      name = models.CharField(max_length=255, null=False, default='untitled', verbose_name='Liquefaction name', help_text='The name of the liquefaction: Commonly accepted name', blank=True, )
      parentid = models.ForeignKey(Liquefactionstudy, db_column='parentid', related_name='+', null=False, default='0', verbose_name='Parent liquefaction study', help_text='The liquefaction study of which this is a subevent', max_length=255, blank=True, )
      parenttype = models.CharField(max_length=25, null=True, blank=True, verbose_name='Parent study', help_text='The type of study which owns this subevent. Set on creation, this must not be changed.', )
      location = models.CharField(max_length=255, null=True, blank=True, default='', verbose_name='Address or location', help_text='Street address or description of location', )
      boundaryid = models.IntegerField(verbose_name='User defined boundary or administrative area id', help_text='User defined boundary or administrative area id', max_length=255, blank=True, )
      boundaryaffected = models.CharField(max_length=255, null=True, blank=True, verbose_name='Geometry (long/lat)', help_text='The location or boundary in WKT GIS format eg POINT (long lat). ', )
      boundary_c = models.TextField(null=True, blank=True, verbose_name='Location precision notes', help_text='A comment on the precision of the location or boundary', )
      subeventnarrative = models.TextField(null=True, blank=True, verbose_name='Notes on the liquefaction sub event', help_text='Descriptive text describing the liquefaction sub event', )
      totallandareaaffected = models.FloatField(verbose_name='Total land area affected', help_text='Total land area affected by liquefaction, sq km', null=True, blank=True, )
      totallandareaaffected_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Total land area affected: source', help_text='The source of the data', )
      totallandareaaffected_c = models.TextField(null=True, blank=True, verbose_name='Total land area affected: comment', help_text='A comment on the data', )
      totallandareaaffected_q = models.ForeignKey(Lookupstatus, db_column='totallandareaaffected_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Total land area affected: status', help_text='The status of the data', blank=True, blank=True, )
      occurrenceofliquefaction = models.CharField(max_length=255, null=True, blank=True, default='', verbose_name='Occurrence of liquefaction', help_text='Occurrence of liquefaction: Yes or No, if Yes give brief description', )
      occurrenceoflateralspreading = models.CharField(max_length=255, null=True, blank=True, default='', verbose_name='Occurrence of lateral spreading', help_text='Occurrence of lateral spreading: Yes or No, if Yes give brief description', )
      occurrenceofsubsidence = models.CharField(max_length=255, null=True, blank=True, default='', verbose_name='Occurrence of ground or coastal subsidence', help_text='Occurrence of ground or coastal subsidence: Yes or No, if Yes give brief description', )
      totalareaaffectedbyliquefaction = models.FloatField(verbose_name='Total land area affected by liquefaction and/or lateral spreading', help_text='Total land area affected by liquefaction and/or lateral spreading, square kilometres', null=True, blank=True, )
      totalareaaffectedbysubsidence = models.FloatField(verbose_name='Total land area affected by land and/or coastal subsidence', help_text='Total land area affected by land and/or coastal subsidence, square kilometres', null=True, blank=True, )
      soiltype = models.CharField(max_length=255, null=True, blank=True, default='', verbose_name='Soil type', help_text='Soil type in the affected location: Soft soil: Vs<180 m/s (NEHRP Site class E) or Very poor soil requiring specific evaluation (NEHRP Site class F)', )
      landtype = models.CharField(max_length=255, null=True, blank=True, default='', verbose_name='Land type', help_text='Land type: Man-made island, Other artificial fill, Ports, Previously a swampland or wetland,...', )
      landusetype = models.CharField(max_length=255, null=True, blank=True, default='', verbose_name='Land use type', help_text='Land use type: Sparse residential - wooden houses, Dense residential - wooden houses,,...', )
      existenceofpreviousimprovements = models.CharField(max_length=255, null=True, blank=True, default='', verbose_name='Existence of previous improvements', help_text='Existence of previous improvements: Yes or No, if Yes give brief description', )
      peopleinsideliquefactionzone = models.IntegerField(verbose_name='Population inside the liquefaction zone', help_text='Population inside the liquefaction zone', null=True, blank=True, )
      peopleinsideliquefactionzone_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Population inside the liquefaction zone: source', help_text='The source of the data', )
      peopleinsideliquefactionzone_c = models.TextField(null=True, blank=True, verbose_name='Population inside the liquefaction zone: comment', help_text='A comment on the data', )
      peopleinsideliquefactionzone_q = models.ForeignKey(Lookupstatus, db_column='peopleinsideliquefactionzone_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Population inside the liquefaction zone: status', help_text='The status of the data', blank=True, blank=True, )
      numberbuildingsaffected = models.IntegerField(verbose_name='Number of buildings affected by liquefaction', help_text='Number of buildings affected', null=True, blank=True, )
      numberbuildingssaffected_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Number of buildings affected: source', help_text='The source of the data', )
      numberbuildingssaffected_c = models.TextField(null=True, blank=True, verbose_name='Number of buildings affected: comment', help_text='A comment on the data', )
      numberbuildingssaffected_q = models.ForeignKey(Lookupstatus, db_column='numberbuildingssaffected_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Number of buildings affected: status', help_text='The status of the data', blank=True, blank=True, )
      numberbuildingspulleddown = models.IntegerField(verbose_name='Number of buildings pulled down', help_text='Number of buildings pulled down', null=True, blank=True, )
      numberbuildingspulleddown_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Number of buildings pulled down: source', help_text='The source of the data', )
      numberbuildingspulleddown_c = models.TextField(null=True, blank=True, verbose_name='Number of buildings pulled down: comment', help_text='A comment on the data', )
      numberbuildingspulleddown_q = models.ForeignKey(Lookupstatus, db_column='numberbuildingspulleddown_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Number of buildings pulled down: status', help_text='The status of the data', blank=True, blank=True, )
      numberroadsaffected = models.IntegerField(verbose_name='Number of roads affected', help_text='Number of roads affected', null=True, blank=True, )
      numberroadsaffected_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Number of roads affected: source', help_text='The source of the data', )
      numberroadsaffected_c = models.TextField(null=True, blank=True, verbose_name='Number of roads affected: comment', help_text='A comment on the data', )
      numberroadsaffected_q = models.ForeignKey(Lookupstatus, db_column='numberroadsaffected_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Number of roads affected: status', help_text='The status of the data', blank=True, blank=True, )
      overallimpact = models.TextField(null=True, blank=True, verbose_name='Overall impact', help_text='Overall socio economic impact', )
      peoplehomeless = models.IntegerField(verbose_name='People homeless', help_text='Total number of people homeless for a significant duration of time due to liquefaction', null=True, blank=True, )
      peoplehomeless_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='People homeless: source', help_text='The source of the data', )
      peoplehomeless_c = models.TextField(null=True, blank=True, verbose_name='People homeless: comment', help_text='A comment on the data', )
      peoplehomeless_q = models.ForeignKey(Lookupstatus, db_column='peoplehomeless_q', related_name='+', max_length=10, null=False, default='0', verbose_name='People homeless: status', help_text='The status of the data', blank=True, blank=True, )
      directeconomicloss = models.FloatField(verbose_name='Direct economic loss', help_text='Total estimated direct economic loss due to liquefaction, million US$, contemporaneous. In absolute US$ value of the year of occurrence. Only includes direct effects.', null=True, blank=True, )
      directeconomicloss_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Direct economic loss: source', help_text='The source of the data', )
      directeconomicloss_c = models.TextField(null=True, blank=True, verbose_name='Direct economic loss: comment', help_text='A comment on the data', )
      directeconomicloss_q = models.ForeignKey(Lookupstatus, db_column='directeconomicloss_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Direct economic loss: status', help_text='The status of the data', blank=True, blank=True, )
      indirecteconomicloss = models.FloatField(verbose_name='Indirect economic loss', help_text='Total estimated indirect economic loss due to liquefaction, million US$, contemporaneous. In absolute US$ value of the year of occurrence. Only includes indirect effects. ', null=True, blank=True, )
      indirecteconomicloss_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Indirect economic loss: source', help_text='The source of the data', )
      indirecteconomicloss_c = models.TextField(null=True, blank=True, verbose_name='Indirect economic loss: comment', help_text='A comment on the data', )
      indirecteconomicloss_q = models.ForeignKey(Lookupstatus, db_column='indirecteconomicloss_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Indirect economic loss: status', help_text='The status of the data', blank=True, blank=True, )
      numberofhouseholds = models.IntegerField(verbose_name='Number of households', help_text='Total number of households in the zone affected by liquefaction (contemporaneous)', null=True, blank=True, )
      numberofhouseholds_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Number of households: source', help_text='The source of the data', )
      numberofhouseholds_c = models.TextField(null=True, blank=True, verbose_name='Number of households: comment', help_text='A comment on the data', )
      numberofhouseholds_q = models.ForeignKey(Lookupstatus, db_column='numberofhouseholds_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Number of households: status', help_text='The status of the data', blank=True, blank=True, )
      totalnumberofbuildings = models.IntegerField(verbose_name='Total number of buildings', help_text='Total number of buildings in the zone affected by liquefaction (contemporaneous)', null=True, blank=True, )
      totalnumberofbuildings_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Total number of buildings: source', help_text='The source of the data', )
      totalnumberofbuildings_c = models.TextField(null=True, blank=True, verbose_name='Total number of buildings: comment', help_text='A comment on the data', )
      totalnumberofbuildings_q = models.ForeignKey(Lookupstatus, db_column='totalnumberofbuildings_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Total number of buildings: status', help_text='The status of the data', blank=True, blank=True, )
      population = models.IntegerField(verbose_name='Population', help_text='Population (contemporaneous)', null=True, blank=True, )
      population_s = models.CharField(max_length=255, null=True, blank=True, verbose_name='Population: source', help_text='The source of the data', )
      population_c = models.TextField(null=True, blank=True, verbose_name='Population: comment', help_text='A comment on the data', )
      population_q = models.ForeignKey(Lookupstatus, db_column='population_q', related_name='+', max_length=10, null=False, default='0', verbose_name='Population: status', help_text='The status of the data', blank=True, blank=True, )
      contemporaneousdate = models.DateTimeField(null=True, blank=True, verbose_name='Base date', help_text='Base date for contemporaneous data, if not date of event, eg 1970-05-31', )
      ownerid = models.IntegerField(null=True, default='1', verbose_name='Owner ID', help_text='ID of the creator/owner of the record', blank=True, )
      lastupdatebyid = models.IntegerField(null=True, default='1', verbose_name='Last update by ID', help_text='ID of the last person to update this record', blank=True, )
      lastupdate = models.DateTimeField(null=True, blank=True, help_text='Last record update date', )

      class Meta:
            db_table = u'econd\".\"liquefactionsubevent'

      def __unicode__(self):
            return self.name
