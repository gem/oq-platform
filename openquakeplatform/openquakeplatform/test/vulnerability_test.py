#!/usr/bin/env python
import unittest
import os, sys
import csv
import time

from openquakeplatform.test import pla


def general_information(pl, name, categ, struct_type, taxo_type,
                        taxo_text, taxo_gem_vis, type_ass, auth, art_tit,
                        conference, year, web_link, gen_comm, use_case):

    dom_name = pl.xpath_finduniq("//form[@id='generalinformation_form']/div/"
                                 "fieldset/div/div/input[@id='id_name']")
    dom_name.send_keys(name)

    dom_categ = pl.xpath_finduniq(
        "//form[@id='generalinformation_form']/div/"
        "fieldset/div/div/select[@id='id_category']")
    pl.select_item_set(dom_categ, categ)

    dom_struct_type = pl.xpath_finduniq(
        "//form[@id='generalinformation_form']/div/"
        "fieldset/div/div/select[@id='id_structure_type']")
    pl.select_item_set(dom_struct_type, struct_type)

    dom_taxo_type = pl.xpath_finduniq(
        "//form[@id='generalinformation_form']/div/"
        "fieldset/div/div/select[@id='id_taxonomy_type']")
    pl.select_item_set(dom_taxo_type, taxo_type)

    dom_taxo_text = pl.xpath_finduniq(
        "//form[@id='generalinformation_form']/div/"
        "fieldset/div/div/input[@id='id_taxonomy_text_1']")
    dom_taxo_text.send_keys(taxo_text)

    pl.driver.execute_script('$(arguments[0]).trigger("change")', dom_taxo_text)

    dom_taxo_text_taxtweb = pl.xpath_finduniq(
        "//form[@id='generalinformation_form']/div/"
        "fieldset/div/div/a[@id='id_taxonomy_text_taxtweb']")

    dom_taxo_text_taxtweb.click()


class VulnerabilityTest(unittest.TestCase):
    def jasmine_test(self):
        # go to test page
        pla.get('/vulnerability/test')

        # wait DOM population via async JS
        pla.xpath_finduniq(
            "//div[@class='jasmine_html-reporter']/div"
            "[@class='results']/div[@class='summary']",
            100, 0.1)

        # check the result of tests
        pla.xpath_finduniq(
            "//span[@class='bar passed' and contains"
            "(normalize-space(text()), ', 0 failures')]")

    def taxonomy_full2short_test(self):
        from openquakeplatform.common.taxonomy import taxonomy_full2short

        failed = 0
        data_path = os.path.join(os.path.dirname(
            sys.modules[self.__module__].__file__), 'data')

        with open(os.path.join(data_path, 'taxonomies.txt')) as f:
            csv_rows = csv.reader(f, delimiter='|')
            for csv_row in csv_rows:
                taxonomy_type = csv_row[0]
                full = csv_row[1]
                short_exp = csv_row[2]

                # if taxonomy_type != gem_taxonomy => continue
                if taxonomy_type != '1':
                    continue
                short = taxonomy_full2short(full)
                if short != short_exp:
                    sys.stderr.write("IN: [%s] OUT: [%s] EXP: [%s]\n" % (
                        full, short, short_exp))
                    failed += 1
                # Uncomment to see tested taxonomies with correct conversion
                # else:
                #     sys.stderr.write("[%s] Ok\n" % short)

        self.assertEqual(failed, 0)

    def taxonomy_test(self):
        pla.user_add('one', 'one', 'one@example.com')
        plb = pla.platform_create(user='one', passwd='one')
        plb.init(landing='/vulnerability/list')

        new_func_btn = plb.xpath_finduniq(
            "//li[@class='vuln_menu']/form[@action='/admin/vulnerability/"
            "generalinformation/add/']/button[@type='submit' and "
            "@value='New function']", 300, 1)

        new_func_btn.click()
        plb.wait_new_page(new_func_btn,
                          '/admin/vulnerability/generalinformation/add', timeout=20)

        general_information(plb, "test function from selenium",
                            "Structure specific", "Building", "GEM",
                            "CU+CIP", "taxo_gem_vis", "type_ass",
                            "auth", "art_tit",
                            "conference", "year", "web_link", "gen_comm",
                            "use_case")

        # taxtweb popup
        plb.select_window_by_name("taxtweb - GEM building taxonomy editor")

        try:
            dontshow_tag = plb.xpath_finduniq(
                "//div[@id='taxtweb_splash']//input[@name='dontshowmeagain']",
                times=10)
            plb.wait_visibility(dontshow_tag)
            dontshow_tag.click()
            close_tag = plb.xpath_finduniq(
                "//div[@id='taxtweb_splash']//button[@name='close_btn']")
            print close_tag
            close_tag.click()
        # for future inspections if needed
        #except Exception as e:
            # print "EXCEPT HERE ! %s" % type(e)
        except Exception:
            pass

        samedirect = plb.xpath_finduniq("//input[@id='DirectionCB']")
        samedirect.click()

        dir_y = plb.xpath_finduniq("//li[@id='sub1tab_id-2']")
        dir_y.click()

        material_y = plb.xpath_finduniq("//select[@id='MaterialCB12']")
        plb.select_item_set(material_y, "Steel")

        mat_tech_y = plb.xpath_finduniq("//select[@id='MaterialCB22']")
        plb.select_item_set(mat_tech_y, "Hot-rolled steel members")

        mat_prop_y = plb.xpath_finduniq("//select[@id='MaterialCB32']")
        plb.select_item_set(mat_prop_y, "Riveted connections")

        popform = plb.xpath_finduniq("//li[@id='id_populate_form']")
        popform.click()
        time.sleep(1)

        # close popup and return to main window
        plb.windows_reset()

        taxt_view = plb.xpath_finduniq("//input[@id='id_taxonomy_gem_view']")
        self.assertEqual(taxt_view.get_attribute('value'),
                         u'DX/CU+CIP/DY/S+SR+RIV')

        outtype = plb.xpath_finduniq("//select[@id='OutTypeCB']")
        plb.select_item_set(outtype, "Full")

        taxt_view = plb.xpath_finduniq("//input[@id='id_taxonomy_gem_view']")
        self.assertEqual(taxt_view.get_attribute('value'),
                         u'DX+D99/CU+CIP/L99/DY+D99/S+SR+RIV/L99/H99/Y99/OC99/'
                         'BP99/PLF99/IR99/EW99/RSH99+RMT99+R99+RWC99/'
                         'F99+FWC99/FOS99')

        # to be continue ...
        pla.platform_destroy(plb)

        pla.user_del('one')
