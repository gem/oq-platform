/*
   Copyright (c) 2015, GEM Foundation.

      This program is free software: you can redistribute it and/or modify
      it under the terms of the GNU Affero General Public License as
      published by the Free Software Foundation, either version 3 of the
      License, or (at your option) any later version.

      This program is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU Affero General Public License for more details.

      You should have received a copy of the GNU Affero General Public License
      along with this program.  If not, see <https://www.gnu.org/licenses/agpl.html>.
*/

var vTable;
var vHeader = [];
var vActiveTablesObj = {};
var dataVF = {};
var discreteImlHeader = [];
var vCount = 0;

$('#outputVFDiv').hide();

$('#addVfsProbMass').click(function() {
    var vFormat = 'probability mass function';
    updatevfsTable(vFormat);
});

function destoyDiscrete () {
    // Logic to remove a table
    $('.destroyVTable').click(function() {
        $('#vTable'+this.id).remove();
        var removedTable = this.id;
        delete vActiveTablesObj[removedTable];
    });
}

$('#addVfsDiscrete').click(function() {

    var vFormat = 'discrete';
    updatevfsTable(vFormat);
    //$('#outputVFDiv').css('display', 'none');

    // Watch for imt selection
    // There can be manu vulnerability discrete tables
    // so we need to find the corresponding imt selections for each table
    $(".imtSelection").unbind('change');
    $('.imtSelection').change(function() {
        // Use limit to check discreteImlHeader only once per change
        var limit = 0;
        // Get the selected id
        var selectedImlTable = $(this).attr('id');
        // access the integer from the returned string
        selectedImlTable = selectedImlTable.match(/\d+/)[0];
        var selectedIml = $(this).val();

        vCount = parseInt(selectedImlTable);

        var selectedImlPrint = $('#imtSelection'+vCount+' option:selected').text();
        var tmpObj = {};
        tmpObj.tableNumber = selectedImlTable;
        tmpObj.imlValue = selectedIml;

        // Keep track of existing tables in order to avoid duplicates
        var existingTables = [];
        for (var i = 0; i < discreteImlHeader.length; i++) {
            existingTables.push(discreteImlHeader[i].tableNumber);
        }

        function isInArray(value, array) {
            return array.indexOf(value) > -1;
        }

        // Check for existing entries
        if (discreteImlHeader.length > 0) {
            for (var i = 0; i < discreteImlHeader.length; i++) {

                if (discreteImlHeader[i].tableNumber === selectedImlTable && limit === 0) {
                    // Each time a the discreteImlHeader array is updated
                    // we set the limit equal to 1 in order to prevent duplicates.
                    limit = 1;
                    // Update the existing obj
                    discreteImlHeader[i].imlValue = selectedIml;
                } else if (!isInArray(selectedImlTable, existingTables) && limit === 0) {
                    // Each time a new tmpObj is added to the discreteImlHeader array
                    // we set the limit equal to 1 in order to prevent duplicates.
                    limit = 1;
                    //Create new obj
                    discreteImlHeader.push(tmpObj);
                }
            }
        } else {
            // Create new obj (first time only)
            discreteImlHeader.push(tmpObj);
        }
        // If SA is selected, the user must first provide a SA value before the table can be created
        if (selectedIml !== 'sa') {
            createVulnDiscreteTable(vFormat, selectedImlPrint);
            $('#saValueInputDiv'+vCount).hide();
        } else {
            // Show the user the SA value input field
            $('#saValueInputDiv'+vCount).show();

            $('#saValue'+vCount).click(function() {
                var saValue = $('#saValueInput'+vCount).val();
                tmpObj.saValue = saValue;
                createVulnDiscreteTable(vFormat, selectedImlPrint, saValue);
            });
        }
    });
    destoyDiscrete();
});

function updatevfsTable (vFormat) {
    // Create the table containers, as many as the user wants
    vCount += 1;

    var imls;
    // Imls value needs to be an array for probability mass function functions,
    // and minIML & maxIML for discrete
    if (vFormat == 'probability mass function') {
        imls =
            '<label>IML: </label>' +
            '<input id="'+vCount+'" class="imls vfsTable" placeholder="imls array" type="text">' +
            '<input id="'+vCount+'" type="hidden" class="distributionSelect" value="PM" >';
    } else if (vFormat == 'discrete') {
        imls =
            '<label> Dist: </label>' +
            '<select id="'+vCount+'" class="vfsTable distributionSelect">' +
                '<option value="LN">LN</option>' +
                '<option value="BT">BT</option>' +
            '</select><br>';
    }

    // Create the fragility function set (vfs)
    $('#vTables').append(
        '<div id="vTable'+vCount+'" class="vfsTableDiv panel panel-default">' +
        '<strong class="vfsTitle">'+vFormat.toUpperCase()+'</strong><button id="'+vCount+'" class="btn-danger btn destroyVTable">Remove</button><br>' +
            '<div class="vfsForm" >' +
                '<label> ID: </label>' +
                '<input id="'+vCount+'" class="id vfsTable" type="text"><br>' +
                '<label> IMT: </label>' +
                '<select id="imtSelection'+vCount+'" class="imtSelection">'+
                    '<option>Select an IMT</option>'+
                    '<option value="pga">PGA (g)</option>'+
                    '<option value="pgv">PGV (cm/sec)</option>'+
                    '<option value="pgd">PGD (cm)</option>'+
                    '<option value="sa">SA (T)</option>'+
                    '<option value="ia">IA (m/s)</option>'+
                    '<option value="cav">CAV</option>'+
                    '<option value="rsd">RSD</option>'+
                    '<option value="mmi">MMI</option>'+
                '</select>'+
                '<div id="saValueInputDiv'+vCount+'">'+
                    '<button id="saValue'+vCount+'" type="button" class="btn btn-default" aria-label="Left Align">' +
                        '<span class="glyphicon glyphicon-plus" aria-hidden="true">+</span>' +
                    '</button>' +
                    '<input id="saValueInput'+vCount+'" class="saValue vfsTable" type="text" placeholder="0.05"><br>' +
                '</div>'+
                imls +
                '<input id="'+vCount+'" type="hidden" class="vFormat vfsTable" value="'+vFormat+'" >' +
                '<br>' +
            '</div>'+
            '<div id="tableOverflow">'+
                '<div id="vTableDiv'+vCount+'" class="theVTable"></div><br><br>' +
                '<br><br>' +
                '</div>' +
            '</div>' +
        '</div>'
    );

    $('#saValueInputDiv'+vCount).hide();

    // force bootstrap style
    $('.btn-danger').css({'background-color': '#da4f49'});
}

function createVulnDiscreteTable(vFormat, selectedImlPrint) {

    if (arguments[2]) {
        selectedImlPrint = 'SA ('+arguments[2]+')';
    }
    var colWidth, maxRows;

    // Setup the header
    if (vFormat == 'probability mass function') {
        vHeader = ['intensity measure'];
        //vHeader = ['loss ratio', 'probabilities'];
        colWidth = 150;
        maxRows = "Infinity";
    } else if (vFormat == 'discrete') {
        vHeader = [selectedImlPrint, 'meanLRs', 'covLRs'];
        colWidth = 70;
        maxRows = "Infinity";
    }

    var vHeaderLength = vHeader.length;

    // Remove table if one has already been created
    $('#vTableDiv'+vCount).empty();

    var container = document.getElementById('vTableDiv'+vCount);

    //////////////////////
    /// Table Settings ///
    //////////////////////

    vTable = new Handsontable(container, {
        colHeaders: vHeader,
        startCols: vHeaderLength,
        maxCols: vHeaderLength,
        startRows: 1,
        colWidths: colWidth,
        maxRows: maxRows
    });

    vActiveTablesObj[vCount] = vTable;

    // insert new row using keyboard input
    $(document).keyup(function(e) {
        // 17 is the 'ctr' key
        if (e.keyCode == 17 ) {
            var rowIndex = $('.currentRow').parent().index();

            vTable.alter("insert_row", rowIndex);
        }
    });

    $('#outPutVF').empty();
    $('#saveBtnVF').css('display', 'block');

    destoyDiscrete();
}

$('#saveBtnVF').click(function() {

    // Get all the vf ids
    var idObj = {};
    $(".id").each(function() {
        idObj[this.id] = ($(this).val());
    });

    // Get the vFormat types
    var vFormatObj = {};
    $(".vFormat").each(function() {
        vFormatObj[this.id] = ($(this).val());
    });

    // Get all the distribution selections
    var distributionSelectObj = {};
    $(".distributionSelect").each(function() {
        distributionSelectObj[this.id] = ($(this).val());
    });

    // Loop through the function format object and get probability mass function and discrete values
    for(var k in vFormatObj) {
        if (vFormatObj[k] == 'probability mass function') {
            // Get all the imls values
            var imlsObj = {};
            $(".imls").each(function() {
                imlsObj[this.id] = ($(this).val());
            });

            // Get all the imt values
            var imtObj = {};
            $(".imt").each(function() {
                imtObj[this.id] = ($(this).val());
            });
        } else if (vFormatObj[k] == 'discrete') {
            // Get all the imls values
            var imlsObj = {};
            $(".imls").each(function() {
                imlsObj[this.id] = ($(this).val());
            });

            // Get all the minIML values
            var minImlObj = {};
            $(".minImls").each(function() {
                minImlObj[this.id] = ($(this).val());
            });
            // Get all the maxIML values
            var maxImlObj = {};
            $(".maxImls").each(function() {
                maxImlObj[this.id] = ($(this).val());
            });

            // Get all the imt values
            var imtObj = {};
            $(".imtSelection").each(function() {
                imtObj[this.id] = ($(this).val());
            });
            // Get SA value
            $('.saValue').each(function() {
                imtObj[this.id] = ($(this).val());
            });
        }
    }

    // get the data for each table
    for(var k in vActiveTablesObj) {
        dataVF[k] = vActiveTablesObj[k].getData();
    }

    // Check for null values
    for(var k in dataVF) {
        for (var i = 0; i < dataVF[k].length; i++) {
            for (var j = 0; j < dataVF[k][i].length; j++) {
                if (dataVF[k][i][j] === null) {
                    alert("whoops, there seem to be some empty cells");
                    return;
                }
            }
        }
    }

    var functionId = $('#vFunctionId').val();
    var assetCategory = $('#vAssetCategory').val();
    var lossCategory = $('#vlossCategory').find(":selected").val();
    var functionDescription = $('#vFunctionDescription').val();


    ////////////////
    // Create vfs //
    ////////////////

    var vulnFunction = '';
    // Create the vfs elements
    for (var k in dataVF) {
        var vfs;
        // Opening vfs tag
        vfs = '\t\t<vulnerabilityFunction id="'+idObj[k]+'" dist="'+distributionSelectObj[k]+'">\n';

        // Create the imls, meanLRs and covLRs tags
        var imlsTag;
        if (vFormatObj[k] == 'probability mass function') {
            imlsTag = '\t\t\t<imls imt="'+imtObj[k]+'">'+imlsObj[k]+'</imls>\n';
        } else if (vFormatObj[k] == 'discrete') {
            var thisImtSelection = 'imtSelection' + k;
            // Manage SA cases
            if (imtObj[thisImtSelection] == 'sa') {
                var saValueInput = 'saValueInput' + k;
                imlsTag = '\t\t\t<imls imt="'+(imtObj[thisImtSelection]).toUpperCase()+' ('+imtObj[saValueInput]+')">';
            } else {
                imlsTag = '\t\t\t<imls imt="'+(imtObj[thisImtSelection]).toUpperCase()+'">';
            }

            meanLRsTag = '\t\t\t<meanLRs>';
            covLRsTag = '\t\t\t<covLRs>';
            for (var i = 0; i < dataVF[k].length; i++) {
                if (i !== (dataVF[k].length -1)) {
                    imlsTag += dataVF[k][i][0]+' ';
                    meanLRsTag += dataVF[k][i][1]+' ';
                    covLRsTag += dataVF[k][i][2]+' ';
                } else {
                    // Avoid trailing whitespace
                    imlsTag += dataVF[k][i][0];
                    meanLRsTag += dataVF[k][i][1];
                    covLRsTag += dataVF[k][i][2];
                }
            }

            // Closing tags
            imlsTag += '</imls>\n';
            meanLRsTag += '</meanLRs>\n';
            covLRsTag += '</covLRs>\n';
        }
        // Put all the tags together
        vfs += imlsTag;
        vfs += meanLRsTag;
        vfs += covLRsTag;

        // Loop through the table rows and create the probabilities tags
        for (var i = 0; i < dataVF[k].length; i++) {
            // Dynamic vfs tag(s)
            if (vFormatObj[k] == 'probability mass function') {
                vfs += '\t\t\t<probabilities lr="'+dataVF[k][i][0]+'">'+dataVF[k][i][1]+'</probabilities>\n';
            }
        }
        // Closing vfs tags
        vfs += '\t\t</vulnerabilityFunction>\n';
        vulnFunction += vfs;
    }

    // Create a NRML element
    var NRML =
        '<?xml version="1.0" encoding="UTF-8"?> \n' +
        '<nrml xmlns="http://openquake.org/xmlns/nrml/0.5"> \n' +
            '\t<vulnerabilityModel id="'+functionId+'" assetCategory="'+assetCategory+'" lossCategory="'+lossCategory+'"> \n' +
                '\t\t<description>'+functionDescription+'</description> \n' +
                vulnFunction +
            '\t</vulnerabilityModel> \n' +
        '</nrml>';

    // Provide the user with the xml output
    $('#outPutVF').empty();
    $('#outPutVF').append('<textarea id="textarea">'+NRML+'</textarea>');
    $('#outputVFDiv').css('display', 'block');
    selectAllVFText();
});

$('#selectAllVF').click(function() {
    var textBox = document.getElementById("textarea");
    textBox.select();
});

function selectAllVFText () {
    var textBox = document.getElementById("textarea");
    textBox.onfocus = function() {
        textBox.select();

        // Work around Chrome's little problem
        textBox.onmouseup = function() {
            // Prevent further mouseup intervention
            textBox.onmouseup = null;
            return false;
        };
    };
}
