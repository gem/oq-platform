/*
   Copyright (c) 2014, GEM Foundation.

      This program is free software: you can redistribute it and/or modify
      it under the terms of the GNU Affero General Public License as
      published by the Free Software Foundation, either version 3 of the
      License, or (at your option) any later version.

      This program is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU Affero General Public License for more details.

      You should have received a copy of the GNU Affero General Public License
      along with this program.  If not, see <https://www.gnu.org/licenses/agpl.html>.
*/

/////////////////////////////////
//////// Jquery Stuff ///////////
/////////////////////////////////

// Remove GeoNode artifact
$(".span12").remove();


$(function() {
    $("#vulnAccordion").accordion({
        collapsible: true
    }); 
});

/////////////////////////////////
////// Vulnerability Information ////
/////////////////////////////////
// the json to be expected from the other app

// Discrete example
var jsonObj = {"pk": 6, "model": "vulnerability.generalinformation", "fields": {"category": "Structure class", "article_title": "Displacement-Based Fragility Curves for Seismic Assessment of Adobe Buildings in Cusco, Peru", "name": "Adobe_vul_Cusco", "publication_conference_name": "Earthquake Spectra, Volume 28, No. 2, pages 759\u2013794", "type_of_assessment": "Vulnerability", "year": 2012, "web_link": "", "general_comments": "The seismic vulnerability of single-story adobe dwellings located in Cusco, Peru ere compared with the data obtained from the 2007 Peruvian earthquake.", "use_case_information": "Comparison of performance during Cusco earthquake 2007", "vulnerability_func": {"pk": 1, "model": "vulnerability.vulnerabilityfunc", "fields": {"analytical_model_info": {"pk": 3, "model": "vulnerability.analyticalmodelinfo", "fields": {"damage_to_loss_func": null, "capacity_curve_func": null, "fragility_func": null, "model_type": "3D", "vulnerability_func": 1, "analysis_type": {"pk": 1, "model": "vulnerability.analysistype", "fields": {"name": "Nonlinear dynamic analysis (NLD)"}}, "method_uncert_propag": "Set of index buildings", "models_num": 50}}, "general_information": 6, "predictor_var": {"pk": 2, "model": "vulnerability.predictorvar", "fields": {"minimum_im": 0.0, "intensity_measure_type": "PGA", "fragility_func": null, "vulnerability_func": 1, "maximum_im": 1.5, "intensity_measure_unit": "Acceleration (g)", "evaluation_of_im": "Spectrum-compatible Accelerograms"}}, "func_distr_vuln_discr": {"pk": 1, "model": "vulnerability.funcdistrvulndiscr", "fields": {"predictor_var_im_val": "0.010;0.050;0.100;0.150;0.200;0.250;0.300;0.350;0.400;0.450;0.500;0.550;0.600;0.650;0.700;0.750;0.800;0.850;0.900;0.950;1.000", "resp_var_val_coeff": "1.5000;1.4582;1.0230;0.1663;0.3881;0.3732;0.3583;0.3438;0.3298;0.3165;0.3037;0.2915;0.2797;0.2685;0.2577;0.2474;0.2375;0.2280;0.2189;0.2102;0.2018", "vulnerability_func": 1, "resp_var_mean_val": "0.000;0.001;0.016;0.044;0.080;0.117;0.154;0.191;0.225;0.259;0.291;0.321;0.351;0.379;0.406;0.431;0.456;0.480;0.503;0.525;0.545", "data_pts_num": 8}}, "method_of_estimation": "Analytical", "func_distr_type": "Discrete", "resp_var": "Damage factor", "stat_info": {"pk": 1, "model": "vulnerability.statisticalinformation", "fields": {"damage_to_loss_func": null, "capacity_curve_func": null, "stat_model": {"pk": 1, "model": "vulnerability.statmodel", "fields": {"name": "Kernel smoothing"}}, "fit_assessment_goodness": {"pk": 1, "model": "vulnerability.fitassessmentgoodness", "fields": {"name": "Acceptable mean function"}}, "fragility_func": null, "stat_model_fitting_method": {"pk": 1, "model": "vulnerability.statmodelfittingmethod", "fields": {"name": "Maximum likelihood"}}, "vulnerability_func": 1, "proc_constr_pred_int": {"pk": 1, "model": "vulnerability.procconstrint", "fields": {"name": "Bayesian"}}, "model_fitting_method_assumptions": 1, "proc_constr_conf_int": {"pk": 1, "model": "vulnerability.procconstrint", "fields": {"name": "Bayesian"}}}}, "qrs_analytical": {"pk": 2, "model": "vulnerability.qrsanalytical", "fields": {"structural_details": "Superior", "documentation_quality": "Superior", "hazard_model": "Average", "model_completeness": "Marginal", "documentation_type": "Superior", "fragility_func": null, "site_specific": "Average", "vulnerability_func": 1, "seismic_demand": "Average", "typology_repr": "Average"}}}}, "authors": "Tarque et al., + Combination of Damage-to-loss functions", "taxonomy_type": {"pk": 1, "model": "vulnerability.taxonomytype", "fields": {"name": "PAGER"}}, "taxonomy_text": "A"}};

// Continuous example
//old
//var jsonObj = {"pk": 2, "model": "vulnerability.generalinformation", "fields": {"category": "Structure class", "article_title": "Vulnerability models for RC moment frame structures - Low Rise - High Code located in Greece", "name": "Example_Cont_Vulnerability", "publication_conference_name": "GEM newsletter", "llrs": null, "material": null, "year": 2010, "web_link": "", "general_comments": "RC3.1LH RC frame, High seismic code design (1995), Low-rise (2 storeys), Fully infilled Mediterranean AUTh Kappos", "authors": "A. J. Kappos, C.Panagiotopoulos, G. Panagopoulos, El. Papadopoulos. ", "use_case_information": "", "structure_type": "Building", "taxonomy_gem": "", "type_of_assessment": "Vulnerability", "taxonomy_type": {"pk": 2, "model": "vulnerability.taxonomytype", "fields": {"user_def": false, "name": "PAGER"}}, "taxonomy_text": "RC3_1LH", "vulnerability_func": {"pk": 2, "model": "vulnerability.vulnerabilityfunc", "fields": {"general_information": 2, "empirical_model_info": {"pk": 1, "model": "vulnerability.empiricalmodelinfo", "fields": {"damage_to_loss_func": null, "building_aggr_min_num": null, "capacity_curve_func": null, "fragility_func": null, "building_x_class_num": null, "empirical_data_src": "", "vulnerability_func": 2, "aggr_unit_def": "Bins of IM", "building_aggr": null, "structural_unit": null}}, "predictor_var": {"pk": 2, "model": "vulnerability.predictorvar", "fields": {"type_of_period": null, "intensity_measure_type": "1", "minimum_im": 0, "fragility_func": null, "period": null, "vulnerability_func": 2, "maximum_im": null, "intensity_measure_unit": "1"}}, "method_of_estimation": "Empirical", "func_distr_type": "Continuous", "resp_var": "Direct economic factor", "func_distr_vuln_cont": {"pk": 1, "model": "vulnerability.funcdistrvulncont", "fields": {"func_distr_shape": {"pk": 1, "model": "vulnerability.funcdistrshape", "fields": {"user_def": false, "name": "Lognormal"}}, "discretization_data_pts_num": null, "std_dev": 1.742, "vulnerability_func": 2, "mean": 2.137}}}}}};
//new
//var jsonObj = {"pk": 2, "model": "vulnerability.generalinformation", "fields": {"category": "Structure class", "article_title": "Vulnerability models for RC moment frame structures - Low Rise - High Code located in Greece", "name": "Example_Cont_Vulnerability", "publication_conference_name": "GEM newsletter", "llrs": null, "material": null, "year": 2010, "web_link": "", "general_comments": "RC3.1LH RC frame, High seismic code design (1995), Low-rise (2 storeys), Fully infilled Mediterranean AUTh Kappos", "authors": "A. J. Kappos, C.Panagiotopoulos, G. Panagopoulos, El. Papadopoulos. ", "use_case_information": "", "structure_type": "Building", "taxonomy_gem": "", "type_of_assessment": "Vulnerability", "taxonomy_type": {"pk": 2, "model": "vulnerability.taxonomytype", "fields": {"user_def": false, "name": "PAGER"}}, "taxonomy_text": "RC3_1LH", "vulnerability_func": {"pk": 2, "model": "vulnerability.vulnerabilityfunc", "fields": {"general_information": 2, "empirical_model_info": {"pk": 1, "model": "vulnerability.empiricalmodelinfo", "fields": {"damage_to_loss_func": null, "building_aggr_min_num": null, "capacity_curve_func": null, "fragility_func": null, "building_x_class_num": null, "empirical_data_src": "", "vulnerability_func": 2, "aggr_unit_def": "Bins of IM", "building_aggr": null, "structural_unit": null}}, "predictor_var": {"pk": 2, "model": "vulnerability.predictorvar", "fields": {"type_of_period": null, "intensity_measure_type": "1", "minimum_im": null, "fragility_func": null, "period": null, "vulnerability_func": 2, "maximum_im": 1.2, "intensity_measure_unit": "1"}}, "method_of_estimation": "Empirical", "func_distr_type": "Continuous", "resp_var": "Direct economic factor", "func_distr_vuln_cont": {"pk": 1, "model": "vulnerability.funcdistrvulncont", "fields": {"func_distr_shape": {"pk": 1, "model": "vulnerability.funcdistrshape", "fields": {"user_def": false, "name": "Lognormal"}}, "discretization_data_pts_num": null, "std_dev": 1.742, "vulnerability_func": 2, "mean": 2.137}}}}}};


/////////////////////////////////
/// Create Vulnerability Metadata ///
/////////////////////////////////

var vulnName = jsonObj.fields.name;
var category = jsonObj.fields.category;
var typeOfAssessment = jsonObj.fields.type_of_assessment;
var dlName = jsonObj.fields.name;
var taxText = jsonObj.fields.taxonomy_text;
var taxType = jsonObj.fields.taxonomy_type.fields.name
var publication = jsonObj.fields.publication_conference_name;
var articleTitle = jsonObj.fields.article_title;
var authors = jsonObj.fields.authors;
var generalComments = jsonObj.fields.general_comments;
var year = jsonObj.fields.year;
var useCase = jsonObj.fields.use_case_information;
var funcDistrType = jsonObj.fields.vulnerability_func.fields.func_distr_type;
var geoApp = "Mediterranean";
if (funcDistrType == "Discrete") {
    var analysisType = jsonObj.fields.vulnerability_func.fields.analytical_model_info.fields.analysis_type.fields.name;
    var modelType = jsonObj.fields.vulnerability_func.fields.analytical_model_info.fields.model_type;
    var methodUncertPropag = jsonObj.fields.vulnerability_func.fields.analytical_model_info.fields.method_uncert_propag;
    var modelsNum = jsonObj.fields.vulnerability_func.fields.analytical_model_info.fields.models_num;

};

// General info
if (typeOfAssessment != undefined && typeOfAssessment != "") {
    $("#genInfo").append('<p><b>Assessment Type: </b>'+typeOfAssessment+'</p>');
};

if (vulnName != undefined && vulnName != "") {
    $("#genInfo").append('<p><b>Name: </b>'+vulnName+'</p>');
};

if (category != undefined && category != "") {
    $("#genInfo").append('<p><b>Category: </b>'+category+'</p>');
};

if (taxType != undefined && taxType != "") {
    $("#genInfo").append('<p><b>Taxonomy: </b>'+taxText+' ('+taxType+')</p>');
};

if (articleTitle != undefined && articleTitle != "") {
    $("#genInfo").append('<p><b>Reference: </b>'+articleTitle+' ('+authors+', '+year+') - '+publication+'</p>');
};

if (geoApp != undefined && geoApp != "") {
    $("#genInfo").append('<p><b>Geographical Applicability: </b>'+geoApp+'</p>');
};

if (generalComments != undefined && generalComments != "") {
    $("#genInfo").append('<p><b>General Comments: </b>'+generalComments+'</p>');
};

if (useCase != undefined && useCase != "") {
    $("#genInfo").append('<p><b>Use Case Information: </b>'+useCase+'</p>');
};

// Modelling info
if (analysisType != undefined && analysisType != "") {
    $("#modellingInfo").append('<p><b>Analysis Type: </b>'+analysisType+'</p>');
}
if (modelType != undefined && modelType != "") {
    $("#modellingInfo").append('<p><b>Model Type: </b>'+modelType+'</p>');
};
if (methodUncertPropag != undefined && methodUncertPropag != "") {
    $("#modellingInfo").append('<p><b>Method of Uncertainty Propagation: </b>'+methodUncertPropag+'</p>');
};
if (modelsNum != undefined && modelsNum != "") {
    $("#modellingInfo").append('<p><b>Number of Distinct Structural Models Analysed: </b>'+modelsNum+'</p>');
};

// Statistical Information
if (jsonObj.fields.vulnerability_func.fields.stat_info != undefined) {
    var statModel = jsonObj.fields.vulnerability_func.fields.stat_info.fields.stat_model.fields.name;
    if (statModel != undefined && statModel != "") {
        $("#statInfo").append('<p><b>Statistical Model: </b>'+statModel+'</p>');
    };
    
    var statModelFittingMethod = jsonObj.fields.vulnerability_func.fields.stat_info.fields.stat_model_fitting_method.fields.name;
    if (statModelFittingMethod != undefined && statModelFittingMethod != "") {
        $("#statInfo").append('<p><b>Statistical model fitting method: </b>'+statModelFittingMethod+'</p>');
    };
    
    var modelFittingMethodAssumptions = jsonObj.fields.vulnerability_func.fields.stat_info.fields.model_fitting_method_assumptions;
    if (modelFittingMethodAssumptions != undefined && modelFittingMethodAssumptions != "") {
        $("#statInfo").append('<p><b>Model Fitting Method Assumption: </b>'+modelFittingMethodAssumptions+'</p>');
    };
    
    var fitAssessmentGoodness = jsonObj.fields.vulnerability_func.fields.stat_info.fields.fit_assessment_goodness.fields.name;
    if (fitAssessmentGoodness != undefined && fitAssessmentGoodness != "") {
        $("#statInfo").append('<p><b>Goodness of fit assessment (GLM/GAM): </b>'+fitAssessmentGoodness+'</p>');
    };
    
    var procConstrPredInt = jsonObj.fields.vulnerability_func.fields.stat_info.fields.proc_constr_pred_int.fields.name;
    if (procConstrPredInt != undefined && procConstrPredInt != "") {
        $("#statInfo").append('<p><b>Procedure for the Construction of Prediction Intervals: </b>'+procConstrPredInt+'</p>');
    };
};

// Quality Information
//TODO add quality info

/////////////////////////////////////////////
/// Create Discrete Vulnerability Curves ////
/////////////////////////////////////////////

if (funcDistrType == "Discrete") {
    var coeffArray = jsonObj.fields.vulnerability_func.fields.func_distr_vuln_discr.fields.resp_var_val_coeff;
    coeffArray = coeffArray.split(";");
    for (var i = 0; i < coeffArray.length; i++)
        coeffArray[i] = coeffArray[i].trim();
    for (var i = 0; i < coeffArray.length; i++) {
        coeffArray[i] = parseFloat(coeffArray[i]);
    };

    var predVal = jsonObj.fields.vulnerability_func.fields.func_distr_vuln_discr.fields.predictor_var_im_val;
    predVal = predVal.split(";");
    for (var i = 0; i < predVal.length; i++)
        predVal[i] = predVal[i].trim();
    for (var i = 0; i < predVal.length; i++) {
        predVal[i] = parseFloat(predVal[i]);
    };
    
    var respMean = jsonObj.fields.vulnerability_func.fields.func_distr_vuln_discr.fields.resp_var_mean_val;
    respMean = respMean.split(";");
    for (var i = 0; i < respMean.length; i++)
        respMean[i] = respMean[i].trim();
    for (var i = 0; i < respMean.length; i++) {
        respMean[i] = parseFloat(respMean[i]);
    };
    
    var respCoeff = jsonObj.fields.vulnerability_func.fields.func_distr_vuln_discr.fields.resp_var_mean_val;
    respCoeff = respCoeff.split(";");
    for (var i = 0; i < respCoeff.length; i++)
        respCoeff[i] = respCoeff[i].trim();
    for (var i = 0; i < respCoeff.length; i++) {
        respCoeff[i] = parseFloat(respCoeff[i]);
    };
    
    var chartData = [];
    
    for (var i = 0; i < respMean.length; i++) {
        chartData.push([predVal[i], respMean[i], coeffArray[i]]);
    };
    
    buildMixedD3Chart(chartData);


/////////////////////////////////////
///// Vulnerability Data Table //////
/////////////////////////////////////

    $(document).ready(function() {
        var aaData = [];
            
        for (var i = 0; i < respMean.length; i++) {
            var tmp = [];
            tmp.push(predVal[i]);
            tmp.push(respMean[i]);
            aaData.push(tmp);
        };
    
        $('#vulnerability-table').dataTable({
            "aaData": aaData,
            "aoColumns": [
                {"sTitle": "PGA (g)"},
                {"sTitle": "Loss Ratio"}
            ],
            "bLengthChange": false,
            "bFilter": false
        });
    });

///////////////////////////////////////////////
/// Create Continuous Vulnerability Curves ////
///////////////////////////////////////////////

} else if (funcDistrType == "Continuous") {

    // Get values out of JSON
    var dataObj = [];
    var chartData = [];
    var iml = [];
    var mean = jsonObj.fields.vulnerability_func.fields.func_distr_vuln_cont.fields.mean;
    var stddev = jsonObj.fields.vulnerability_func.fields.func_distr_vuln_cont.fields.std_dev;
    var min = jsonObj.fields.vulnerability_func.fields.predictor_var.fields.minimum_im;
    
    if (jsonObj.fields.vulnerability_func.fields.predictor_var.fields.maximum_im == undefined) {
        var max = (2 * mean);
    } else {
        var max = jsonObj.fields.vulnerability_func.fields.predictor_var.fields.maximum_im;
    };

    //var imtTitle = jsonObj.fields.vulnerability_func.fields.predictor_var.fields.intensity_measure_type;
    var imTitle = "temp title"
    var inc = ((max - min) / 100);

    // create the x axis values
    for(var i=min; i<max;i=i+inc) {
        iml.push(Math.round(i*1000) / 1000);
    }
    iml.push(max);

    var tmp = makeFragilityFunctionContinuous(mean, stddev);

    for (var j = 0; j < iml.length; j++) {
        var val = tmp(iml[j]);
        dataObj.push([iml[j], val]);
    };
    
    // create the x axis values
    for(var i=min; i<max;i=i+inc) {
        iml.push(Math.round(i*1000) / 1000);
    }
    iml.push(max);
    
    function normalCumulativeProbability(z) {
        var b1 = 0.31938153;
        var b2 = -0.356563782;
        var b3 = 1.781477937;
        var b4 = -1.821255978;
        var b5 = 1.330274429;
        var p = 0.2316419;
        var c2 = 0.3989423;
        if (z > 6.0){
            return 1.0};  // this guards against overflow
        if (z < -6.0){
            return 0.0};
        var a = Math.abs(z);
        var t = 1.0 / (1.0 + a * p);
        var b = c2 * Math.exp((-z)*(z / 2.0));
        var n = ((((b5 * t + b4) * t + b3) * t + b2) * t + b1) * t;
        var n = 1.0 - b * n;
        if (z < 0.0){
            n = 1.0 - n};
        return n;
    };
    
    function makeFragilityFunctionContinuous(mean, stddev) {
        var variance = stddev * stddev;
        var sigma = Math.sqrt(Math.log((variance / (mean * mean)) + 1.0));
    
        mu = (mean * mean) / Math.sqrt(variance + mean * mean);
    
        return function(iml) {
           return normalCumulativeProbability((Math.log(iml / mu)) / sigma);
        };
    };
    
    function capitalize(str) {
        return str.replace(/\w\S*/g, function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();});
    }
    
    //continuousTable();
    buildMixedD3Chart(dataObj);

////////////////////////////////////////////////
///// Continuous Vulnerability Data Table //////
////////////////////////////////////////////////

    $(document).ready(function() {
        var aaData = [];

        for (var i = dataObj.length - 1; i >= 0; i--) {
            
            for (var j = dataObj[i].length - 1; j >= 0; j--) {
                var tmp = [dataObj[i][0], Math.round(dataObj[i][1] * 10000) / 10000];
                aaData.push(tmp);
            };
        };
        
        $('#vulnerability-table').dataTable({
            "aaData": aaData,
            "aoColumns": [
                {"sTitle": "PGA (g)"},
                {"sTitle": "Loss Ratio"}
            ],
            "bLengthChange": false,
            "bFilter": false
        });
    });
};

//////////////////////////////////////
/////// Vulnerability Chart //////////
//////////////////////////////////////

function buildMixedD3Chart(chartData) {

    if (funcDistrType == "Continuous") {
        predVal = iml;
        respMean = mean;
    }

    // grid line functions
    function make_x_axis() {        
        return d3.svg.axis()
            .scale(x_scale)
            .orient("bottom")
            .ticks(5)
    }
    function make_y_axis() {        
        return d3.svg.axis()
            .scale(y_scale)
            .orient("left")
            .ticks(5)
    }
    function capitalise(string) {
        return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
    }
    function makeCircles(data) {
        // Points along the line
        svg.selectAll("circle.line")
            .data(data)
            .enter().append("circle")
            .attr("class", "line")
            .attr("cx", function(d) { return x_scale(d[0]); })
            .attr("cy", function(d) { return y_scale(d[1]); })
            .attr("r", 2.5)
            .style("fill", "blue")
            .style("opacity", 1)
            .on("mouseover", function() {
                d3.select(this)
                    .attr('r', 6)
                    .text(circleX + ", " + circleY)
                    .style("fill", "blue")
                    .style("opacity", 1)
                var circleX = d3.select(this.__data__[0]);
                circleX = circleX.toString();
                circleX = circleX.split(","[0]);

                var cov = this.__data__[2] // coefficient
                var circleY = d3.select(this.__data__[1]);
                circleY = circleY.toString();
                circleY = circleY.split(","[0]);

                textTop.text("Point value (x/y): " + Math.round(circleX * 1000) / 1000 + ", " + Math.round(circleY * 1000) / 1000 + " COV: "+cov);

            }).on("mouseout", function() {
                d3.select(this)
                    .attr('r', 2.5)
                    .style("opacity", 1)
                    .style("fill", "blue");
            });
    }
    var margin = {top: 55, right: 100, bottom: 80, left: 60},
    width = 480 - margin.left - margin.right,
    height = 440 - margin.top - margin.bottom;

    formatter = d3.format(".0%");

    var x_scale = d3.scale.linear().range([0, width]).domain([d3.min(predVal), d3.max(predVal)]);
    // TODO allow the chart to peek at 110 if values dictate
    var y_scale = d3.scale.linear().range([0, height]).domain([1, 0]);
    var xAxis = d3.svg.axis()
        .scale(x_scale)
        .tickFormat(function (d) { return d; })
        .orient("bottom");
    var yAxis = d3.svg.axis()
        .scale(y_scale)
        .orient("left")
        .tickFormat(formatter);
    var line = d3.svg.line()
        .x(function(d) {
            return x_scale(d[0]); 
        })
        .y(function(d) {
            return y_scale(d[1]); 
        });
    var svg = d3.select("#vulnerabilityChart").append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
        .append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
    // grid lines
    svg.append("g")         
        .attr("class", "grid")
        .attr("transform", "translate(0," + height + ")")
        .call(make_x_axis()
            .tickSize(-height, 0, 0)
            .tickFormat("")
        );

    svg.append("g")         
        .attr("class", "grid")
        .call(make_y_axis()
            .tickSize(-width, 0, 0)
            .tickFormat("")
        );
    var legend = d3.select("#chartDialog").append("svg")
        .attr("height", 25);
    var count = 0;

    svg.append("path")
        .data([chartData])
        .attr("class", "line")
        .attr()
        .attr("d", line);
        
    var data = chartData;

    if (funcDistrType == "Discrete") {
        makeCircles(data);
    }
   
    svg.append("g")
        .attr("class", "x axis")
        .attr("transform", "translate(0," + height + ")")
        .call(xAxis)
        .append("text")
        .attr("x", 160)
        .attr("y", 30)
        .attr("dy", ".71em")
        .attr("text-anchor", "middle")
        .style("font-weight", "bold")
        .attr("font-size","14px")
        .text("PGA (g)");
        
    svg.append("g")
        .attr("class", "y axis")
        .call(yAxis)
        .append("text")
        .attr("transform", "rotate(-90)")
        .attr("y", -60)
        .attr("x", -100)
        .attr("dy", ".71em")
        .style("text-anchor", "end")
        .style("font-weight", "bold")
        .attr("font-size","14px")
        .text("Loss Ratio (%)");

    textTopLable = svg.append("text")
        .attr("x", 0)
        .attr("y", -35)
        .attr("dy", ".35em")
        .style("font-weight", "bold")
        .attr("font-size","14px")
        .text(typeOfAssessment +' '+ vulnName);
        
    textTop = svg.append("text")
        .attr("x", 0)
        .attr("y", -15)
        .attr("dy", ".35em")
        .text("");
} // End Chart


