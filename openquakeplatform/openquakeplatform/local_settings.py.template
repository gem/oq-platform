import os
import geonode
import openquakeplatform

from geonode.settings import TEMPLATE_CONTEXT_PROCESSORS

SITENAME = 'OpenQuake Platform'
SITEURL = 'http://%(siteurl)s/'

OQPLATFORM_ROOT = os.path.dirname(openquakeplatform.__file__)
GEONODE_ROOT = os.path.abspath(os.path.dirname(geonode.__file__))

ROOT_URLCONF = 'openquakeplatform.urls'

# GEM Experimental apps enabled
GEM_EXPERIMENTAL = %(is_gem_experimental)s
USE_I18N = False

SERIALIZATION_MODULES = {
    'json': 'wadofstuff.django.serializers.json'
}

DATABASES = {
    'default': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'NAME': '%(db_name)s',
        'USER': '%(db_user)s',
        'PASSWORD': '%(db_pass)s',
        'HOST': '127.0.0.1',
        'PORT': '5432',
    },
    # vector datastore for uploads
    'datastore': {
        'ENGINE': 'django.contrib.gis.db.backends.postgis',
        'NAME': '%(db_name)s',
        'USER': '%(db_user)s',
        'PASSWORD': '%(db_pass)s',
        'HOST': '127.0.0.1',
        'PORT': '5432',
    }
}

MEDIA_ROOT = '%(mediaroot)s'
STATIC_ROOT = '%(staticroot)s'

# Additional directories which hold static files
STATICFILES_DIRS = [
    '/etc/openquake/platform/media',
    os.path.join(OQPLATFORM_ROOT, 'static'),
    '/etc/geonode/media',
    os.path.join(GEONODE_ROOT, 'static')
]

ALLOWED_DOCUMENT_TYPES = [
    'csv', 'doc', 'docx', 'xls', 'xlsx', 'odt', 'ods', 'pdf',
    'jpg', 'jpeg', 'tif', 'tiff', 'png', 'gif', 'txt', 'zip',
    'tar', 'tgz', 'tbz', 'tar.gz', 'tar.bz2'
]
MAX_DOCUMENT_SIZE = 100

try:
    from openquakeplatform import ged_settings
    DATABASES.update(ged_settings.DATABASES)
except ImportError:
    import warnings
    warnings.warn('Global Exposure Database (GED) configuration not found!',
                  ImportWarning)

TIME_ZONE = 'UTC'

SECRET_KEY = '%(oq_secret_key)s'

BING_KEY = {
    'bing_key': (
        '%(oq_bing_key)s'
    ),
}

# FIXME production doesn't work without 'testserver'.
# Production must be fixed and 'testserver' removed from here.
ALLOWED_HOSTS = ['%(hostname)s', 'testserver', 'localhost']

PROXY_ALLOWED_HOSTS = ('%(hostname)s', 'localhost')

MEDIA_ROOT = '%(mediaroot)s'
STATIC_ROOT = '%(staticroot)s'

# Additional directories which hold static files
STATICFILES_DIRS = [
    '/etc/openquake/platform/media',
    os.path.join(OQPLATFORM_ROOT, 'static'),
    '/etc/geonode/media',
    os.path.join(GEONODE_ROOT, 'static')
]

# Additional directories which hold static files
STATICFILES_DIRS = [
    os.path.join(OQPLATFORM_ROOT, 'static'),
    os.path.join(GEONODE_ROOT, 'static'),
    '/etc/geonode/media',
]

TEMPLATE_DIRS = (
    os.path.join(OQPLATFORM_ROOT, 'templates'),
    os.path.join(OQPLATFORM_ROOT, 'gemecdwebsite'),
    os.path.join(OQPLATFORM_ROOT, 'gemecdwebsite/templates'),
    os.path.join(GEONODE_ROOT, 'templates'),
)

LOCALE_PATHS = (
    os.path.join(OQPLATFORM_ROOT, "locale"),
    os.path.join(GEONODE_ROOT, "locale"),
)

THIRD_PARTY_URLS = {
    'leaflet_base_map': (
        'http://{s}.tiles.mapbox.com/v3/unhcr.map-8bkai3wa/{z}/{x}/{y}.png'
    ),
}

TILESTREAM_URL = '//tilestream.openquake.org'

HELP_URL = 'http://www.globalquakemodel.org/openquake/support/documentation/platform'

# The GEOSERVER_URL must be an absolute URL to let GXP working correctly.
# To produce fixture for maps to be installed during setup it must be set
# to the '/geoserver/' relative path
GEOSERVER_URL = SITEURL + 'geoserver/'

TEMPLATE_CONTEXT_PROCESSORS += (
    'openquakeplatform.utils.oq_context_processor',
)

# OGC (WMS/WFS/WCS) Server Settings
OGC_SERVER = {
    'default': {
        'BACKEND': 'geonode.geoserver',
         # Do not change the internal channel
        'LOCATION': 'http://localhost:%(geoserver_port)s/geoserver/',
        'PUBLIC_LOCATION': GEOSERVER_URL,
        'USER': 'admin',
        'PASSWORD': 'geoserver',
        'MAPFISH_PRINT_ENABLED': True,
        'PRINTNG_ENABLED': True,
        'GEONODE_SECURITY_ENABLED': True,
        'GEOGIT_ENABLED': False,
        'WMST_ENABLED': False,
        'BACKEND_WRITE_ENABLED': True,
        'WPS_ENABLED': True,
        # Set to name of database in DATABASES dictionary to enable
        'DATASTORE': 'datastore',
    }
}

# CSW settings
CATALOGUE = {
    'default': {
        # The underlying CSW backend
        # ("pycsw_http", "pycsw_local", "geonetwork", "deegree")
        'ENGINE': 'geonode.catalogue.backends.pycsw_local',
        # The FULLY QUALIFIED base url to the CSW instance for this GeoNode
        'URL': '%%scatalogue/csw' %% SITEURL,
    }
}

# pycsw settings
PYCSW = {
    # pycsw configuration
    'CONFIGURATION': {
        'metadata:main': {
            'identification_title': 'OQ Catalogue',
            'identification_abstract': 'OQ abstract',
            'identification_keywords': (
                'sdi,catalogue,discovery,metadata,GeoNode'),
            'identification_keywords_type': 'theme',
            'identification_fees': 'None',
            'identification_accessconstraints': 'None',
            'provider_name': 'Organization Name',
            'provider_url': SITEURL,
            'contact_name': 'Lastname, Firstname',
            'contact_position': 'Position Title',
            'contact_address': 'Mailing Address',
            'contact_city': 'City',
            'contact_stateorprovince': 'Administrative Area',
            'contact_postalcode': 'Zip or Postal Code',
            'contact_country': 'Country',
            'contact_phone': '+xx-xxx-xxx-xxxx',
            'contact_fax': '+xx-xxx-xxx-xxxx',
            'contact_email': 'Email Address',
            'contact_url': 'Contact URL',
            'contact_hours': 'Hours of Service',
            'contact_instructions': 'openquake-users@google-groups.com',
            'contact_role': 'pointOfContact',
        },
        'metadata:inspire': {
            'enabled': 'true',
            'languages_supported': 'eng,gre',
            'default_language': 'eng',
            'date': 'YYYY-MM-DD',
            'gemet_keywords': 'Utility and governmental services',
            'conformity_service': 'notEvaluated',
            'contact_name': 'Organization Name',
            'contact_email': 'Email Address',
            'temp_extent': 'YYYY-MM-DD/YYYY-MM-DD',
        }
    }
}

INSTALLED_APPS = (

    # Apps bundled with Django
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.sites',
    'nested_inlines',  # it must be BEFORE django.contrib.admin
    'django.contrib.admin',
    'django.contrib.sitemaps',
    'django.contrib.staticfiles',
    'django.contrib.messages',
    'django.contrib.humanize',
    'django.contrib.gis',
    'django.contrib.redirects',

    # Third party apps
    'photologue',
    'chained_selectbox',

    # Utility
    'pagination',
    'taggit',
    'taggit_templatetags',
    'south',
    'friendlytagloader',
    'geoexplorer',
    'django_extensions',
    'chained_multi_checkboxes',

    # Development
    # 'devserver',

    # Theme
    "pinax_theme_bootstrap_account",
    "pinax_theme_bootstrap",
    'django_forms_bootstrap',

    # Social
    'account',
    'avatar',
    'dialogos',
    'agon_ratings',
    'notification',
    'announcements',
    'actstream',
    'user_messages',

    # GeoNode internal apps
    'geonode.people',
    'geonode.base',
    'geonode.layers',
    'geonode.upload',
    'geonode.maps',
    'geonode.proxy',
    'geonode.security',
    'geonode.search',
    'geonode.social',
    'geonode.catalogue',
    'geonode.documents',
    'geonode.social',

    # Our apps
    'openquakeplatform.common',
    'openquakeplatform.world',
    'openquakeplatform.isc_viewer',
    'openquakeplatform.ghec_viewer',
    'openquakeplatform.gaf_viewer',
    'openquakeplatform.geodetic',
    'openquakeplatform.exposure',
    'openquakeplatform.faulted_earth',
    'openquakeplatform.vulnerability',
    'openquakeplatform.svir',
    'openquakeplatform.grv',
    'openquakeplatform.hazus',
    'openquakeplatform.hrde',
    'openquakeplatform.irv',
    'openquakeplatform.ript',

    # gemecd
    'openquakeplatform.weblib',
    'openquakeplatform.econd',
    'openquakeplatform.gemecdwebsite',

    'openquakeplatform.taxtweb',

)

MIDDLEWARE_CLASSES = (
    'django.middleware.common.CommonMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.contrib.redirects.middleware.RedirectFallbackMiddleware',
    'pagination.middleware.PaginationMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    # geonode.security is enabled to lockdown the website
    'geonode.security.middleware.LoginRequiredMiddleware',
)

MAP_BASELAYERS = [{
    "source": {
        "ptype": "gxp_wmscsource",
        "url": OGC_SERVER['default']['PUBLIC_LOCATION'] + "wms",
        "restUrl": "/gs/rest"
     },
    "name":"geoserver"
  },{
    "source": {"ptype": "gxp_olsource"},
    "type":"OpenLayers.Layer",
    "args":["No background"],
    "name":"nobackground",
    "visibility": False,
    "fixed": True,
    "group":"background"
  }, {
    "source": {"ptype": "gxp_osmsource"},
    "type":"OpenLayers.Layer.OSM",
    "name":"mapnik",
    "visibility": False,
    "fixed": True,
    "group":"background"
  }, {
    "source": {"ptype": "gxp_mapquestsource"},
    "name":"osm",
    "group":"background",
    "visibility": True
  }, {
    "source": {"ptype": "gxp_mapquestsource"},
    "name":"naip",
    "group":"background",
    "visibility": False
  },{
    "source": {"ptype": "gxp_tilestreamsource" },
    "name":"tilestream"
  }, {
    "source": {"ptype": "gxp_mapboxsource"},
    "name":"mapbox"
}]

if BING_KEY['bing_key']:
    MAP_BASELAYERS.append(
        {
            "source": {"ptype": "gxp_bingsource",
                       "apiKey": BING_KEY['bing_key']
                       },
            "name": "AerialWithLabels",
            "fixed": True,
            "visibility": False,
            "group":"background"
            }
        )

# Add additional paths (as regular expressions) that don't require
# authentication.
AUTH_EXEMPT_URLS = ('/$',
                    '/account/signup/',
                    '/geoserver/',
                    '/vulnerability/intensity_measure_csc?.*',
                    '/vulnerability/engineering_demand_csc?.*',
                    '/vulnerability/resp_var_par_csc?.*',
                    '/vulnerability/resp_var_units_csc?.*',
                    '/taxtweb/',
                    '/ript/')

# Uncomment to allow open registration.
# FIXME: there's no admin validation on new accounts.
# REGISTRATION_OPEN = True

# Uncomment to allow open registration.
# This setting define in how many days an account
# must be verified by the user.
# ACCOUNT_ACTIVATION_DAYS = 1

# A valid mailserver must be configured to make open registration work.
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'localhost'
# EMAIL_PORT = 25
# DEFAULT_FROM_EMAIL = 'info@%(hostname)s'
# THEME_ACCOUNT_CONTACT_EMAIL = 'info@%(hostname)s'

# Max input upload size for Icebox
ICEBOX_MAX_SIZE_MB = 10
# Send an email with an Icebox job report
# WARNING: untested feature
ICEBOX_SEND_EMAIL = False

# These limits define the maximum data that can be retreived
# from GEM in the Exposure app
# Max area size in degrees (i.e. 2 * 2)
EXPOSURE_MAX_EXPORT_AREA_SQ_DEG = 4
# Max number of rows
EXPOSURE_MAX_TOT_GRID_COUNT = 100000

AVATAR_GRAVATAR_DEFAULT = 'http://ftp.openquake.org/oq-platform/oq-avatar-40.png'

# Enable Google Analytics tracking code
# You must provide a valid UA code
# GOOGLE_UA = 'UA-********-*'
