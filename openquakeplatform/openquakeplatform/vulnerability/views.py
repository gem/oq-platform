import json
from django.http import HttpResponse
from django.http import Http404
from django.shortcuts import render_to_response
from django.core import serializers
from django.core.serializers.json import DjangoJSONEncoder
from django.views.generic.detail import BaseDetailView
from django.utils.cache import add_never_cache_headers
from models import (GeneralInformation,
                    IMT_PGA,
                    IMT_PGV,
                    IMT_PGD,
                    IMT_SAT,
                    IMT_SDT,
                    IMT_IA,
                    IMT_CAV,
                    IMT_RSD,
                    IMT_MMI,
                    EDP_INTERSTOREY_DRIFT,
                    EDP_GLOBAL_DRIFT,
                    EDP_LATERAL_ROOF_DISPLACEMENT,
                    EDP_CHORD_ROTATION,
                    EDP_CURVATURE,
                    EDP_SPECTRAL_DISPLACEMENT, )


def index(request, **kwargs):
    print dir(kwargs)
    return HttpResponse("Hello world!")


class IntensityMeasureCSC(BaseDetailView):
    """
    View to handle the ajax request for the field options.
    """

    def get(self, request, *args, **kwargs):
        parent_value = request.GET.get("parent_value")
        if parent_value:
            parent_value_int = int(parent_value)
        #else:
            #raise ValueError

        if not parent_value:
            vals_list = []
        elif parent_value_int in (IMT_PGA, IMT_SAT):
            vals_list = ['g', 'cm/s^2', 'm/s^2']
        elif parent_value_int in (IMT_PGV, IMT_IA):
            vals_list = ['cm/s', 'm/s']
        elif parent_value_int in (IMT_PGD, IMT_SDT):
            vals_list = ['cm', 'm']
        elif parent_value_int == IMT_RSD:
            vals_list = ['s']
        elif parent_value_int == IMT_CAV:
            vals_list = ['g-s']
        elif parent_value_int == IMT_MMI:
            vals_list = ['Roman numbers']
        else:
            raise ValueError

        if vals_list:
            indices = range(1, len(vals_list) + 1)
            choices = tuple(zip(indices, vals_list))
        else:
            choices = (('', '-'*8), )

        response = HttpResponse(
            json.dumps(choices, cls=DjangoJSONEncoder),
            mimetype='application/javascript'
        )
        add_never_cache_headers(response)
        return response


class EngineeringDemandCSC(BaseDetailView):
    """
    View to handle the ajax request for the field options.
    """

    def get(self, request, *args, **kwargs):
        parent_value = request.GET.get("parent_value")
        if parent_value:
            parent_value_int = int(parent_value)
        #else:
            #raise ValueError

        if not parent_value:
            vals_list = []
        elif parent_value_int in (EDP_INTERSTOREY_DRIFT, EDP_GLOBAL_DRIFT):
            vals_list = ['Dimensionless']
        elif parent_value_int in (EDP_LATERAL_ROOF_DISPLACEMENT,
                                  EDP_SPECTRAL_DISPLACEMENT):
            vals_list = ['cm', 'm']
        elif parent_value_int == EDP_CHORD_ROTATION:
            vals_list = ['rad']
        elif parent_value_int == EDP_CURVATURE:
            vals_list = ['rad/km', 'rad/m']
        else:
            raise ValueError

        if vals_list:
            indices = range(1, len(vals_list) + 1)
            choices = tuple(zip(indices, vals_list))
        else:
            choices = (('', '-'*8), )

        response = HttpResponse(
            json.dumps(choices, cls=DjangoJSONEncoder),
            mimetype='application/javascript'
        )
        add_never_cache_headers(response)
        return response


def show_general_information(request, gen_info_id):
    try:
        #gi = GeneralInformation.objects.get(pk=gen_info_id)
        gi = GeneralInformation.objects.select_related().get(pk=gen_info_id)
        #gi = GeneralInformation.objects.filter(id=gen_info_id)
    except GeneralInformation.DoesNotExist:
        raise Http404
    print dir(gi)
    gi_json = serializers.serialize(
        "json",
        [gi],
        #indent=4,
        choices=True,
        relations={
            'fragility_func': {
                'choices': True,
                'relations': {
                    'analytical_model_info': {
                        'choices': True,
                        'relations': ('analysis_type', )
                    },
                    'empirical_model_info': {'choices': True},
                    'stat_info': {
                        'choices': True,
                        'relations': ('stat_model',
                                      'stat_model_fitting_method',
                                      'model_fitting_method_assumption',
                                      'fit_assessment_goodness',
                                      'proc_constr_conf_int',
                                      'proc_constr_pred_int', )
                    },
                    'predictor_var': {'choices': True},
                    'func_distr_frag_discr': {'choices': True},
                    'func_distr_frag_cont': {
                        'choices': True,
                        'relations': ('func_distr_shape', )
                    },
                    'engineering_demand_par': {'choices': True},
                    'qrs_analytical': {'choices': True},
                    'qrs_empirical': {'choices': True},
                },
            },
            'vulnerability_func': {
                'choices': True,
                'relations': {
                    'analytical_model_info': {
                        'choices': True,
                        'relations': ('analysis_type', )
                    },
                    'empirical_model_info': {'choices': True},
                    'stat_info': {
                        'choices': True,
                        'relations': ('stat_model',
                                      'stat_model_fitting_method',
                                      'model_fitting_method_assumption',
                                      'fit_assessment_goodness',
                                      'proc_constr_conf_int',
                                      'proc_constr_pred_int', )
                    },
                    'predictor_var': {'choices': True},
                    'func_distr_vuln_discr': {'choices': True},
                    'func_distr_vuln_cont': {
                        'choices': True,
                        'relations': ('func_distr_shape', )
                    },
                    'qrs_analytical': {'choices': True},
                    'qrs_empirical': {'choices': True},
                }
            },
            'damage_to_loss_func': {
                'choices': True,
                'relations': {
                    'analytical_model_info': {
                        'choices': True,
                        'relations': ('analysis_type', )
                    },
                    'empirical_model_info': {'choices': True},
                    'stat_info': {
                        'choices': True,
                        'relations': ('stat_model',
                                      'stat_model_fitting_method',
                                      'model_fitting_method_assumption',
                                      'fit_assessment_goodness',
                                      'proc_constr_conf_int',
                                      'proc_constr_pred_int', )
                    },
                    'func_distr_dtl_discr': {
                        'choices': True,
                        'relations': ('func_distr_shape', )
                    },
                }
            },
            'capacity_curve_func': {
                'choices': True,
                'relations': {
                    'analytical_model_info': {
                        'choices': True,
                        'relations': ('analysis_type', )
                    },
                    'empirical_model_info': {'choices': True},
                    'stat_info': {
                        'choices': True,
                        'relations': ('stat_model',
                                      'stat_model_fitting_method',
                                      'model_fitting_method_assumption',
                                      'fit_assessment_goodness',
                                      'proc_constr_conf_int',
                                      'proc_constr_pred_int', )
                    },
                    'cc_predictor_var': {
                        'choices': True,
                        'relations': ('engineering_demand_param', )
                    },
                }
            },
            'taxonomy_type': {'choices': True}
        })
    #return HttpResponse(gi_json)
    return render_to_response(
        'vulnerability/show_general_information.html',
        {'general_information': gi_json[1:-1]})  # remove the wrapping "[]"
