# Copyright (c) 2012-2013, GEM Foundation.
#
# This program is free software: you can redistribute it and/or modify
# under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import json
from django.http import HttpResponse
from django.http import Http404
from django.shortcuts import render_to_response
from django.core import serializers
from django.core.serializers.json import DjangoJSONEncoder
# from django.core.paginator import Paginator, InvalidPage, EmptyPage
# from django.core.urlresolvers import reverse
from django.views.generic.detail import BaseDetailView
from django.utils.cache import add_never_cache_headers
from models import (GeneralInformation, IMT, IMU, EDP, RVP, RVU, EDU, TA,
                    TYPES_OF_ASSESSMENT)
from forms import FiltersForm  # , HiddenInput


def index(request, **kwargs):
    return HttpResponse("Hello world!")


def list_entries(request, **kwargs):
    """Main listing."""
    geninfo = GeneralInformation.objects.all()
    types_of_assessment = dict(
        (key, value) for (key, value) in TYPES_OF_ASSESSMENT)
    try:
        type_of_assessment = int(request.GET.get("type_of_assessment",
                                 TA.FRAGILITY))
    except ValueError as e:
        print 'Invalid type of assessment: %s' % e
        type_of_assessment = TA.FRAGILITY
    geninfo = geninfo.filter(type_of_assessment=type_of_assessment)
    category = request.POST.get('category')
    material = request.POST.get('material')
    llrs = request.POST.get('llrs')
    author = request.POST.get('author')
    method_of_estimation = request.POST.get('method_of_estimation')
    intensity_measure_type = request.POST.get('intensity_measure_type')
    damage_scale = request.POST.get('damage_scale')
    country = request.POST.get('country')
    region = request.POST.get('region')
    if category:
        geninfo = geninfo.filter(category=category)
    if type_of_assessment:
        geninfo = geninfo.filter(type_of_assessment=type_of_assessment)
        if method_of_estimation:
            if type_of_assessment == TA.FRAGILITY:
                geninfo = geninfo.filter(
                    fragility_func__method_of_estimation=method_of_estimation)
                if intensity_measure_type:
                    geninfo = geninfo.filter(
                        fragility_func__predictor_var__intensity_measure_type=
                        intensity_measure_type)
                if damage_scale:
                    geninfo = geninfo.filter(
                        fragility_func__damage_scale=damage_scale)
            elif type_of_assessment == TA.VULNERABILITY:
                geninfo = geninfo.filter(
                    vulnerability_func__method_of_estimation=
                    method_of_estimation)
                if intensity_measure_type:
                    geninfo = geninfo.filter(
                        vulnerability_func__predictor_var__intensity_measure_type=
                        intensity_measure_type)
            elif type_of_assessment == TA.DAMAGE_TO_LOSS:
                geninfo = geninfo.filter(
                    damage_to_loss_func__method_of_estimation=
                    method_of_estimation)
                if damage_scale:
                    geninfo = geninfo.filter(
                        damage_to_loss_func__damage_scale=damage_scale)
            elif type_of_assessment == TA.CAPACITY_CURVE:
                geninfo = geninfo.filter(
                    capacity_curve_func__method_of_estimation=
                    method_of_estimation)
    if material:
        geninfo = geninfo.filter(material=material)
    if llrs:
        geninfo = geninfo.filter(llrs=llrs)
    if author:
        geninfo = geninfo.filter(authors__icontains=author)
    if country:
        geninfo = geninfo.filter(
            geo_applicability__countries__name__iexact=country)
    if region:
        geninfo = geninfo.filter(geo_applicability__countries__region=region)

    # paginator = Paginator(geninfo, 2)

    #try:
    #    page = int(request.GET.get("page", '1'))
    #except ValueError:
    #    page = 1

    #try:
    #    geninfo = paginator.page(page)
    #except (InvalidPage, EmptyPage):
    #    geninfo = paginator.page(paginator.num_pages)
    if request.method == 'POST':  # If the form has been submitted...
        form = FiltersForm(request.POST)  # A form bound to the POST data
    else:
        form = FiltersForm()  # An unbound form
    # form.fields['type_of_assessment'].widget = forms.HiddenInput()
    if type_of_assessment not in [TA.FRAGILITY, TA.DAMAGE_TO_LOSS]:
        form.fields.pop('damage_scale')
    if type_of_assessment in [TA.DAMAGE_TO_LOSS, TA.CAPACITY_CURVE]:
        form.fields.pop('intensity_measure_type')
    return render_to_response("vulnerability/list.html",
                              dict(form=form,
                                   geninfo=geninfo,
                                   types_of_assessment=types_of_assessment,
                                   type_of_assessment=type_of_assessment,
                                   user=request.user,
                                   body_class='bodyclass',
                                   STATIC_URL='/static/'))


class IntensityMeasureCSC(BaseDetailView):
    """
    View to handle the ajax request for the field options.
    """

    def get(self, request, *args, **kwargs):
        parent_value = request.GET.get("parent_value")
        if parent_value:
            parent_value_int = int(parent_value)
        #else:
            #raise ValueError

        if not parent_value:
            choices = (('', '--------'), )
        elif parent_value_int in (IMT.PGA, IMT.SAT):
            choices = ((IMU.G, 'g'),
                       (IMU.CM_S2, 'cm/s^2'),
                       (IMU.M_S2, 'm/s^2'))
        elif parent_value_int in (IMT.PGV, IMT.IA):
            choices = ((IMU.CM_S, 'cm/s'),
                       (IMU.M_S, 'm/s'))
        elif parent_value_int in (IMT.PGD, IMT.SDT):
            choices = ((IMU.CM, 'cm'),
                       (IMU.M, 'm'))
        elif parent_value_int == IMT.RSD:
            choices = ((IMU.S, 's'), )
        elif parent_value_int == IMT.CAV:
            choices = ((IMU.GS, 'g-s'), )
        elif parent_value_int == IMT.MMI:
            choices = ((IMU.ROMAN, 'Roman numbers'), )
        else:
            raise ValueError

        response = HttpResponse(
            json.dumps(choices, cls=DjangoJSONEncoder),
            mimetype='application/javascript'
        )
        add_never_cache_headers(response)
        return response


class EngineeringDemandCSC(BaseDetailView):
    """
    View to handle the ajax request for the field options.
    """

    def get(self, request, *args, **kwargs):
        # field = request.GET.get("field")
        parent_value = request.GET.get("parent_value")
        if parent_value:
            parent_value_int = int(parent_value)
        #else:
            #raise ValueError

        if not parent_value:
            choices = (('', '--------'), )
        elif parent_value_int in (EDP.INTERSTOREY_DRIFT, EDP.GLOBAL_DRIFT):
            choices = ((EDU.PURE, 'Dimensionless'), )
        elif parent_value_int in (EDP.LATERAL_ROOF_DISPLACEMENT,
                                  EDP.SPECTRAL_DISPLACEMENT):
            choices = ((EDU.CM, 'cm'), (EDU.M, 'm'))
        elif parent_value_int == EDP.CHORD_ROTATION:
            choices = ((EDU.RAD, 'rad'), )
        elif parent_value_int == EDP.CURVATURE:
            choices = ((EDU.RAD_KM, 'rad/km'), (EDU.RAD_M, 'rad/m'))
        else:
            raise ValueError

        response = HttpResponse(
            json.dumps(choices, cls=DjangoJSONEncoder),
            mimetype='application/javascript'
        )
        add_never_cache_headers(response)
        return response


class RespVarParCSC(BaseDetailView):
    """
    View to handle the ajax request for the field options.
    """

    def get(self, request, *args, **kwargs):
        # field = request.GET.get("field")
        parent_value = request.GET.get("parent_value")
        if parent_value:
            parent_value_int = int(parent_value)
        #else:
            #raise ValueError

        if not parent_value:
            choices = (('', '--------'), )
        elif parent_value_int in (EDP.INTERSTOREY_DRIFT,
                                  EDP.GLOBAL_DRIFT,
                                  EDP.LATERAL_ROOF_DISPLACEMENT):
            choices = ((RVP.BASE_SHEAR, 'Base shear'), )
        elif parent_value_int in (EDP.CHORD_ROTATION,
                                  EDP.CURVATURE):
            choices = ((RVP.BASE_BENDING_MOMENT, 'Base bending moment'), )
        elif parent_value_int == EDP.SPECTRAL_DISPLACEMENT:
            choices = ((RVP.SPECTRAL_ACCELERATION, 'Spectral acceleration'), )
        else:
            raise ValueError

        response = HttpResponse(
            json.dumps(choices, cls=DjangoJSONEncoder),
            mimetype='application/javascript'
        )
        add_never_cache_headers(response)
        return response


class RespVarUnitsCSC(BaseDetailView):
    """
    View to handle the ajax request for the field options.
    """

    def get(self, request, *args, **kwargs):
        # field = request.GET.get("field")
        parent_value = request.GET.get("parent_value")
        if parent_value:
            parent_value_int = int(parent_value)
        #else:
            #raise ValueError

        if not parent_value:
            choices = (('', '--------'), )
        elif parent_value_int == RVP.BASE_SHEAR:
            choices = ((RVU.KN, 'kN'), )
        elif parent_value_int == RVP.BASE_BENDING_MOMENT:
            choices = ((RVU.KNM, 'kN*m'), )
        elif parent_value_int == RVP.SPECTRAL_ACCELERATION:
            choices = ((RVU.G, 'g'), (RVU.CMS2, 'cm/s^2'), (RVU.MS2, 'm/s^2'))
        else:
            raise ValueError

        response = HttpResponse(
            json.dumps(choices, cls=DjangoJSONEncoder),
            mimetype='application/javascript'
        )
        add_never_cache_headers(response)
        return response


def show_general_information(request, gen_info_id):
    try:
        #gi = GeneralInformation.objects.get(pk=gen_info_id)
        gi = GeneralInformation.objects.select_related().get(pk=gen_info_id)
        #gi = GeneralInformation.objects.filter(id=gen_info_id)
    except GeneralInformation.DoesNotExist:
        raise Http404
    gi_json = serializers.serialize(
        "json",
        [gi],
        #indent=4,
        choices=True,
        relations={
            'fragility_func': {
                'choices': True,
                'relations': {
                    'analytical_model_info': {
                        'choices': True,
                        'relations': ('analysis_type', )
                    },
                    'empirical_model_info': {'choices': True},
                    'stat_info': {
                        'choices': True,
                        'relations': ('stat_model',
                                      'stat_model_fitting_method',
                                      'model_fitting_method_assumption',
                                      'fit_assessment_goodness',
                                      'proc_constr_conf_int',
                                      'proc_constr_pred_int', )
                    },
                    'predictor_var': {'choices': True},
                    'func_distr_frag_discr': {'choices': True},
                    'func_distr_frag_cont': {
                        'choices': True,
                        'relations': ('func_distr_shape', )
                    },
                    'engineering_demand_par': {'choices': True},
                    'qrs_analytical': {'choices': True},
                    'qrs_empirical': {'choices': True},
                },
            },
            'vulnerability_func': {
                'choices': True,
                'relations': {
                    'analytical_model_info': {
                        'choices': True,
                        'relations': ('analysis_type', )
                    },
                    'empirical_model_info': {'choices': True},
                    'stat_info': {
                        'choices': True,
                        'relations': ('stat_model',
                                      'stat_model_fitting_method',
                                      'model_fitting_method_assumption',
                                      'fit_assessment_goodness',
                                      'proc_constr_conf_int',
                                      'proc_constr_pred_int', )
                    },
                    'predictor_var': {'choices': True},
                    'func_distr_vuln_discr': {'choices': True},
                    'func_distr_vuln_cont': {
                        'choices': True,
                        'relations': ('func_distr_shape', )
                    },
                    'qrs_analytical': {'choices': True},
                    'qrs_empirical': {'choices': True},
                }
            },
            'damage_to_loss_func': {
                'choices': True,
                'relations': {
                    'analytical_model_info': {
                        'choices': True,
                        'relations': ('analysis_type', )
                    },
                    'empirical_model_info': {'choices': True},
                    'stat_info': {
                        'choices': True,
                        'relations': ('stat_model',
                                      'stat_model_fitting_method',
                                      'model_fitting_method_assumption',
                                      'fit_assessment_goodness',
                                      'proc_constr_conf_int',
                                      'proc_constr_pred_int', )
                    },
                    'func_distr_dtl_discr': {
                        'choices': True,
                        'relations': ('func_distr_shape', )
                    },
                }
            },
            'capacity_curve_func': {
                'choices': True,
                'relations': {
                    'analytical_model_info': {
                        'choices': True,
                        'relations': ('analysis_type', )
                    },
                    'empirical_model_info': {'choices': True},
                    'stat_info': {
                        'choices': True,
                        'relations': ('stat_model',
                                      'stat_model_fitting_method',
                                      'model_fitting_method_assumption',
                                      'fit_assessment_goodness',
                                      'proc_constr_conf_int',
                                      'proc_constr_pred_int', )
                    },
                    'cc_predictor_var': {
                        'choices': True,
                        'relations': ('engineering_demand_param', )
                    },
                }
            },
            'taxonomy_type': {'choices': True},
            'geo_applicability': {
                'choices': True,
                'relations': {
                    'countries': {
                        'excludes': ('the_geom', ),
                    }
                },
            },
        })
    #return HttpResponse(gi_json)
    return render_to_response(
        'vulnerability/show_general_information.html',
        dict(general_information=gi_json[1:-1], STATIC_URL='/static/'))
