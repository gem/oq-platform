import json
from django.http import HttpResponse
from django.http import Http404
from django.shortcuts import render_to_response
from django.core import serializers
from django.core.serializers.json import DjangoJSONEncoder
from django.views.generic.detail import BaseDetailView
from django.utils.cache import add_never_cache_headers
from models import GeneralInformation, IMT, IMU, EDP, RVP, RVU, EDU


def index(request, **kwargs):
    print dir(kwargs)
    return HttpResponse("Hello world!")


class IntensityMeasureCSC(BaseDetailView):
    """
    View to handle the ajax request for the field options.
    """

    def get(self, request, *args, **kwargs):
        parent_value = request.GET.get("parent_value")
        if parent_value:
            parent_value_int = int(parent_value)
        #else:
            #raise ValueError

        if not parent_value:
            choices = (('', '--------'), )
        elif parent_value_int in (IMT.PGA, IMT.SAT):
            choices = ((IMU.G, 'g'),
                       (IMU.CM_S2, 'cm/s^2'),
                       (IMU.M_S2, 'm/s^2'))
        elif parent_value_int in (IMT.PGV, IMT.IA):
            choices = ((IMU.CM_S, 'cm/s'),
                       (IMU.M_S, 'm/s'))
        elif parent_value_int in (IMT.PGD, IMT.SDT):
            choices = ((IMU.CM, 'cm'),
                       (IMU.M, 'm'))
        elif parent_value_int == IMT.RSD:
            choices = ((IMU.S, 's'), )
        elif parent_value_int == IMT.CAV:
            choices = ((IMU.GS, 'g-s'), )
        elif parent_value_int == IMT.MMI:
            choices = ((IMU.ROMAN, 'Roman numbers'), )
        else:
            raise ValueError

        response = HttpResponse(
            json.dumps(choices, cls=DjangoJSONEncoder),
            mimetype='application/javascript'
        )
        add_never_cache_headers(response)
        return response


class EngineeringDemandCSC(BaseDetailView):
    """
    View to handle the ajax request for the field options.
    """

    def get(self, request, *args, **kwargs):
        print ""
        print "*~"*15 + "  INSIDE EngineeringDemandCSC  " + "*~"*15
        print ""
        field = request.GET.get("field")
        print "FIELD:", field
        parent_value = request.GET.get("parent_value")
        if parent_value:
            parent_value_int = int(parent_value)
        #else:
            #raise ValueError

        if not parent_value:
            choices = (('', '--------'), )
        elif parent_value_int in (EDP.INTERSTOREY_DRIFT, EDP.GLOBAL_DRIFT):
            choices = ((EDU.PURE, 'Dimensionless'), )
        elif parent_value_int in (EDP.LATERAL_ROOF_DISPLACEMENT,
                                  EDP.SPECTRAL_DISPLACEMENT):
            choices = ((EDU.CM, 'cm'), (EDU.M, 'm'))
        elif parent_value_int == EDP.CHORD_ROTATION:
            choices = ((EDU.RAD, 'rad'), )
        elif parent_value_int == EDP.CURVATURE:
            choices = ((EDU.RAD_KM, 'rad/km'), (EDU.RAD_M, 'rad/m'))
        else:
            raise ValueError

        response = HttpResponse(
            json.dumps(choices, cls=DjangoJSONEncoder),
            mimetype='application/javascript'
        )
        add_never_cache_headers(response)
        return response


class RespVarParCSC(BaseDetailView):
    """
    View to handle the ajax request for the field options.
    """

    def get(self, request, *args, **kwargs):
        print ""
        print "*~"*15 + "  INSIDE RespVarParCSC  " + "*~"*15
        print ""
        field = request.GET.get("field")
        print "FIELD:", field
        parent_value = request.GET.get("parent_value")
        if parent_value:
            parent_value_int = int(parent_value)
        #else:
            #raise ValueError

        if not parent_value:
            choices = (('', '--------'), )
        elif parent_value_int in (EDP.INTERSTOREY_DRIFT,
                                  EDP.GLOBAL_DRIFT,
                                  EDP.LATERAL_ROOF_DISPLACEMENT):
            choices = ((RVP.BASE_SHEAR, 'Base shear'), )
        elif parent_value_int in (EDP.CHORD_ROTATION,
                                  EDP.CURVATURE):
            choices = ((RVP.BASE_BENDING_MOMENT, 'Base bending moment'), )
        elif parent_value_int == EDP.SPECTRAL_DISPLACEMENT:
            choices = ((RVP.SPECTRAL_ACCELERATION, 'Spectral acceleration'), )
        else:
            raise ValueError

        response = HttpResponse(
            json.dumps(choices, cls=DjangoJSONEncoder),
            mimetype='application/javascript'
        )
        add_never_cache_headers(response)
        return response


class RespVarUnitsCSC(BaseDetailView):
    """
    View to handle the ajax request for the field options.
    """

    def get(self, request, *args, **kwargs):
        print ""
        print "*~"*15 + "  INSIDE RespVarUnitsCSC  " + "*~"*15
        print ""
        field = request.GET.get("field")
        print "FIELD:", field
        parent_value = request.GET.get("parent_value")
        if parent_value:
            parent_value_int = int(parent_value)
        #else:
            #raise ValueError

        if not parent_value:
            choices = (('', '--------'), )
        elif parent_value_int == RVP.BASE_SHEAR:
            choices = ((RVU.KN, 'kN'), )
        elif parent_value_int == RVP.BASE_BENDING_MOMENT:
            choices = ((RVU.KNM, 'kN*m'), )
        elif parent_value_int == RVP.SPECTRAL_ACCELERATION:
            choices = ((RVU.G, 'g'), (RVU.CMS2, 'cm/s^2'), (RVU.MS2, 'm/s^2'))
        else:
            raise ValueError

        response = HttpResponse(
            json.dumps(choices, cls=DjangoJSONEncoder),
            mimetype='application/javascript'
        )
        add_never_cache_headers(response)
        return response


def show_general_information(request, gen_info_id):
    try:
        #gi = GeneralInformation.objects.get(pk=gen_info_id)
        gi = GeneralInformation.objects.select_related().get(pk=gen_info_id)
        #gi = GeneralInformation.objects.filter(id=gen_info_id)
    except GeneralInformation.DoesNotExist:
        raise Http404
    print dir(gi)
    gi_json = serializers.serialize(
        "json",
        [gi],
        #indent=4,
        choices=True,
        relations={
            'fragility_func': {
                'choices': True,
                'relations': {
                    'analytical_model_info': {
                        'choices': True,
                        'relations': ('analysis_type', )
                    },
                    'empirical_model_info': {'choices': True},
                    'stat_info': {
                        'choices': True,
                        'relations': ('stat_model',
                                      'stat_model_fitting_method',
                                      'model_fitting_method_assumption',
                                      'fit_assessment_goodness',
                                      'proc_constr_conf_int',
                                      'proc_constr_pred_int', )
                    },
                    'predictor_var': {'choices': True},
                    'func_distr_frag_discr': {'choices': True},
                    'func_distr_frag_cont': {
                        'choices': True,
                        'relations': ('func_distr_shape', )
                    },
                    'engineering_demand_par': {'choices': True},
                    'qrs_analytical': {'choices': True},
                    'qrs_empirical': {'choices': True},
                },
            },
            'vulnerability_func': {
                'choices': True,
                'relations': {
                    'analytical_model_info': {
                        'choices': True,
                        'relations': ('analysis_type', )
                    },
                    'empirical_model_info': {'choices': True},
                    'stat_info': {
                        'choices': True,
                        'relations': ('stat_model',
                                      'stat_model_fitting_method',
                                      'model_fitting_method_assumption',
                                      'fit_assessment_goodness',
                                      'proc_constr_conf_int',
                                      'proc_constr_pred_int', )
                    },
                    'predictor_var': {'choices': True},
                    'func_distr_vuln_discr': {'choices': True},
                    'func_distr_vuln_cont': {
                        'choices': True,
                        'relations': ('func_distr_shape', )
                    },
                    'qrs_analytical': {'choices': True},
                    'qrs_empirical': {'choices': True},
                }
            },
            'damage_to_loss_func': {
                'choices': True,
                'relations': {
                    'analytical_model_info': {
                        'choices': True,
                        'relations': ('analysis_type', )
                    },
                    'empirical_model_info': {'choices': True},
                    'stat_info': {
                        'choices': True,
                        'relations': ('stat_model',
                                      'stat_model_fitting_method',
                                      'model_fitting_method_assumption',
                                      'fit_assessment_goodness',
                                      'proc_constr_conf_int',
                                      'proc_constr_pred_int', )
                    },
                    'func_distr_dtl_discr': {
                        'choices': True,
                        'relations': ('func_distr_shape', )
                    },
                }
            },
            'capacity_curve_func': {
                'choices': True,
                'relations': {
                    'analytical_model_info': {
                        'choices': True,
                        'relations': ('analysis_type', )
                    },
                    'empirical_model_info': {'choices': True},
                    'stat_info': {
                        'choices': True,
                        'relations': ('stat_model',
                                      'stat_model_fitting_method',
                                      'model_fitting_method_assumption',
                                      'fit_assessment_goodness',
                                      'proc_constr_conf_int',
                                      'proc_constr_pred_int', )
                    },
                    'cc_predictor_var': {
                        'choices': True,
                        'relations': ('engineering_demand_param', )
                    },
                }
            },
            'taxonomy_type': {'choices': True}
        })
    #return HttpResponse(gi_json)
    return render_to_response(
        'vulnerability/show_general_information.html',
        {'general_information': gi_json[1:-1]})  # remove the wrapping "[]"
