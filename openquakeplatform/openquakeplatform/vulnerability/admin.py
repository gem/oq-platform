from django.contrib import admin

from models import QualityRatingSystem
from models import StatisticalInformation
from models import EmpiricalModelInfo
from models import AnalysisType
from models import AnalyticalModelInfo
from models import ModellingInformation
from models import TaxonomyClassifForBuildings
from models import RegionAsGeographicalApplicability
from models import Applicability
from models import FuncDistributionShape
from models import CC_EngineeringDemandPar
from models import CC_PredictorVar
from models import CapacityCurveFunc
from models import DamageToLossFunc
from models import FuncDistributionVulnContinuous
from models import FuncDistributionVulnDiscrete
from models import PredictorVar
from models import VulnerabilityFunc
from models import FuncDistributionFragContinuous
from models import FuncDistributionFragDiscrete
from models import EngineeringDemandPar
from models import FragilityFunc
from models import GeneralInformation

admin.site.register(QualityRatingSystem)
admin.site.register(StatisticalInformation)
admin.site.register(EmpiricalModelInfo)
admin.site.register(AnalysisType)
admin.site.register(AnalyticalModelInfo)
admin.site.register(ModellingInformation)
admin.site.register(TaxonomyClassifForBuildings)
admin.site.register(RegionAsGeographicalApplicability)
admin.site.register(Applicability)
admin.site.register(FuncDistributionShape)
admin.site.register(CC_EngineeringDemandPar)
admin.site.register(CC_PredictorVar)
admin.site.register(CapacityCurveFunc)
admin.site.register(DamageToLossFunc)
admin.site.register(FuncDistributionVulnContinuous)
admin.site.register(FuncDistributionVulnDiscrete)
admin.site.register(PredictorVar)
admin.site.register(VulnerabilityFunc)
admin.site.register(FuncDistributionFragContinuous)
admin.site.register(FuncDistributionFragDiscrete)
admin.site.register(EngineeringDemandPar)
admin.site.register(FragilityFunc)
admin.site.register(GeneralInformation)


class CC_PredictorVarInline(admin.StackedInline):
    model = CC_PredictorVar
    fk_name = 'capacity_curve_func'


class CC_AnalyticalModelInfoInline(admin.StackedInline):
    model = AnalyticalModelInfo
    fk_name = 'capacity_curve_func'


class CapacityCurveFuncAdmin(admin.ModelAdmin):
    inlines = [
        CC_AnalyticalModelInfoInline,
        CC_PredictorVarInline,
    ]


admin.site.unregister(CapacityCurveFunc)
admin.site.register(CapacityCurveFunc, CapacityCurveFuncAdmin)


class DL_AnalyticalModelInfoInline(admin.StackedInline):
    model = AnalyticalModelInfo
    exclude = ('capacity_curve_func',
               'fragility_func',
               'vulnerability_func')
    fk_name = 'damage_to_loss_func'


class DL_EmpiricalModelInfoInline(admin.StackedInline):
    model = EmpiricalModelInfo
    exclude = ('fragility_func',
               'vulnerability_func')
    fk_name = 'damage_to_loss_func'


class DamageToLossFuncAdmin(admin.ModelAdmin):
    inlines = [
        DL_AnalyticalModelInfoInline,
        DL_EmpiricalModelInfoInline,
    ]


admin.site.unregister(DamageToLossFunc)
admin.site.register(DamageToLossFunc, DamageToLossFuncAdmin)


class VU_AnalyticalModelInfoInline(admin.StackedInline):
    model = AnalyticalModelInfo
    exclude = ('capacity_curve_func',
               'damage_to_loss_func',
               'fragility_func')
    fk_name = 'vulnerability_func'


class VU_EmpiricalModelInfoInline(admin.StackedInline):
    model = EmpiricalModelInfo
    exclude = ('damage_to_loss_func',
               'fragility_func')
    fk_name = 'vulnerability_func'


class VulnerabilityFuncAdmin(admin.ModelAdmin):
    inlines = [
        VU_AnalyticalModelInfoInline,
        VU_EmpiricalModelInfoInline,
    ]


admin.site.unregister(VulnerabilityFunc)
admin.site.register(VulnerabilityFunc, VulnerabilityFuncAdmin)


class FR_AnalyticalModelInfoInline(admin.StackedInline):
    model = AnalyticalModelInfo
    exclude = ('capacity_curve_func',
               'damage_to_loss_func',
               'vulnerability_func')
    fk_name = 'fragility_func'


class FR_EmpiricalModelInfoInline(admin.StackedInline):
    model = EmpiricalModelInfo
    exclude = ('damage_to_loss_func',
               'vulnerability_func')
    fk_name = 'fragility_func'


class FragilityFuncAdmin(admin.ModelAdmin):
    inlines = [
        FR_AnalyticalModelInfoInline,
        FR_EmpiricalModelInfoInline,
    ]


admin.site.unregister(FragilityFunc)
admin.site.register(FragilityFunc, FragilityFuncAdmin)


