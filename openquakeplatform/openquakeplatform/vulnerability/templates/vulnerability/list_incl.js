var g_type_of_assessment = {{ type_of_assessment }};
var g_list_filter = undefined;

function manage_list_click() {
    $('.list_entry').off('click');

    $("#curve_id").val(global_id);
    $("#permalink").attr("href", $(location).attr('href').split('?')[0] + '?type_of_assessment=' +
                         {{ type_of_assessment }} + '&curve_id=' + global_id);
    // Get the JSON object
    $.getJSON('{{STATIC}}/vulnerability/data/' + global_id + '/', function (data) {
        gl = data;
        var functionType = gl.fields.type_of_assessment;

        $('#functionContainer').empty();
        $('#functionContainer').append('<div id="functionChart"></div>')
        if (functionType == "Fragility") {
            $.getScript("{{ STATIC_URL }}vulnerability/js/fragility_curves.js", function(){
            });
        }
        else if (functionType == "Vulnerability") {
            $.getScript("{{ STATIC_URL }}vulnerability/js/vulnerability_curves.js", function(){
            });
        }
        else if (functionType == "Capacity curve") {
            $.getScript("{{ STATIC_URL }}vulnerability/js/capacity_curves.js", function(){
            });
        }
        else if (functionType == "Damage-to-loss") {
            $.getScript("{{ STATIC_URL }}vulnerability/js/damage_to_loss.js", function(){
            });
        }
        $('.list_entry').click(manage_list_click);
    });
}

$('.list_entry').click(manage_list_click);


function list_resize() {
    /* window_height - starting_h_point_of_container - footer_height - 1(border pixel) - 16(internal padding space) */
    var new_h = $(window).height() - $('#list_func_container').offset().top - $('#footer').height() - 1 - 16;
    $('#list_func').height(new_h);
}

function preview_resize() {
    /* window_height - starting_h_point_of_container - footer_height - 1(border pixel) */
    var new_h = $(window).height() - $('#preview_container').offset().top - $('#footer').height() - 1;
    $('#preview').height(new_h);
}

function more_details_cb(obj) {
    if (global_id != null) {

        obj.form.action = '/vulnerability/view/' + global_id;
        var from = $(obj.form).children("#from")
        from.val("list")
        obj.form.submit()
    }
    return false;
}

var g_filter_descrs = [
    [],
    [
        {'name': 'country', 'type': 'text'},
        {'name': 'region', 'type': 'ddown'},
        {'name': 'method_of_estimation', 'type': 'ddown'},
        {'name': 'material', 'type': 'ddown'},
        {'name': 'llrs', 'type': 'ddown'},
        {'name': 'author', 'type': 'text'},
        {'name': 'category', 'type': 'ddown'},
        {'name': 'intensity_measure_type', 'type': 'ddown'},
        {'name': 'damage_scale', 'type': 'ddown'}
    ],
    [
        {'name': 'country', 'type': 'text'},
        {'name': 'region', 'type': 'ddown'},
        {'name': 'method_of_estimation', 'type': 'ddown'},
        {'name': 'material', 'type': 'ddown'},
        {'name': 'llrs', 'type': 'ddown'},
        {'name': 'author', 'type': 'text'},
        {'name': 'category', 'type': 'ddown'},
        {'name': 'intensity_measure_type', 'type': 'ddown'}
    ],
    [
        {'name': 'country', 'type': 'text'},
        {'name': 'region', 'type': 'ddown'},
        {'name': 'method_of_estimation', 'type': 'ddown'},
        {'name': 'material', 'type': 'ddown'},
        {'name': 'llrs', 'type': 'ddown'},
        {'name': 'author', 'type': 'text'},
        {'name': 'category', 'type': 'ddown'},
        {'name': 'damage_scale', 'type': 'ddown'}
    ],
    [
        {'name': 'country', 'type': 'text'},
        {'name': 'region', 'type': 'ddown'},
        {'name': 'method_of_estimation', 'type': 'ddown'},
        {'name': 'material', 'type': 'ddown'},
        {'name': 'llrs', 'type': 'ddown'},
        {'name': 'author', 'type': 'text'},
        {'name': 'category', 'type': 'ddown'},
    ]
];

function stateful_filters_update_cb(e) {
    var $form = $(e.target);
    var filter_descr = g_filter_descrs[g_type_of_assessment];

    if (g_list_filter == undefined) {
        var obj = {};
    }
    else {
        var obj = g_list_filter;
    }

    for (var i = 0 ; i < filter_descr.length ; i++) {
        item_descr = filter_descr[i];
        if (item_descr['type'] == 'ddown' || item_descr['type'] == 'text') {
            obj[item_descr['name']] = $form.find('#id_' + item_descr['name']).val();
        }
        else {
            // error case
            return;
        }
    }
    Cookies.set('gem__vuln__list_filter', obj, { path: '' });
}

function stateful_filters_load(obj) {
    var $form = $("form[name='filter']");
    var filter_descr = g_filter_descrs[g_type_of_assessment];

    if (obj == undefined)
        return;

    for (var i = 0 ; i < filter_descr.length ; i++) {
        item_descr = filter_descr[i];
        if (item_descr['type'] == 'ddown' || item_descr['type'] == 'text') {
            $form.find('#id_' + item_descr['name']).val(obj[item_descr['name']]);
        }
        else {
            // error case
            return;
        }
    }
}

function stateful_filters_manager() {
    $('form[name="filter"]').submit(stateful_filters_update_cb);
}

window.onload = function () {
    g_list_filter = Cookies.getJSON('gem__vuln__list_filter');

    list_resize();
    preview_resize();
    stateful_filters_manager();
    $(window).resize(list_resize);
    $(window).resize(preview_resize);
    if (global_id != null) {
        entry_select(global_id);
        manage_list_click();
    }

    stateful_filters_load(g_list_filter);
    gem_app_initialized = true;
}

