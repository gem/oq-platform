import re
from django.forms.fields import CharField
from django.forms.util import ValidationError as FormValidationError
#from chained_selectbox.forms import ChainedChoicesForm
#from django import forms
#from chained_selectbox.form_fields import ChainedChoiceField
#from openquakeplatform.vulnerability.models import PredictorVar


#INTENSITY_MEASURE_TYPES = (
    #(1, 'PGA'),
    #(2, 'PGV'),
    #(3, 'PGD'),
    #(4, 'Sa(T)'),
    #(5, 'IA'),
    #(6, 'CAV'),
    #(7, 'RSD'),
    #(8, 'MMI'),
#)

#INTENSITY_MEASURE_UNITS = (
    #(1, 'Acceleration (g)'),
    #(2, 'Acceleration (cm/s^2)'),
    #(3, 'Acceleration (m/s^2)'),
    #(4, 'Velocity (cm/s)'),
    #(5, 'Velocity (m/s)'),
    #(6, 'Displacement (cm)'),
    #(7, 'Displacement (m)'),
    #(8, 'Time (s)'),
    #(9, 'CAV (g-s)'),
    #(10, 'MMI roman numbers'),
#)


#class PredictorVarForm(ChainedChoicesForm):
    #class Meta:
        #model = PredictorVar

    #intensity_measure_type = forms.ChoiceField(
        #choices=(INTENSITY_MEASURE_TYPES))
    #intensity_measure_unit = ChainedChoiceField(
        #parent_field='intensity_measure_type',
        #ajax_url='/chainedselectchoices')


class SemicolonSeparatedFloatFormField(CharField):
    def __init__(self, *args, **kwargs):
        self.max_length = 1024
        super(SemicolonSeparatedFloatFormField, self).__init__(*args, **kwargs)

    def clean(self, value):
        value = super(CharField, self).clean(value)
        value = value.replace('\t', ';').replace(' ', '')
        value = re.sub(r';+', ';', value)
        try:
            [float(x) for x in value.split(";")]
        except ValueError as e:
            raise FormValidationError(e)
        return value
