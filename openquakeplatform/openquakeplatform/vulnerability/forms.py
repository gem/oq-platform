# Copyright (c) 2012-2013, GEM Foundation.
#
# This program is free software: you can redistribute it and/or modify
# under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from chained_selectbox.forms import ChainedChoicesForm
from django import forms
from django.forms import ModelForm
from chained_selectbox.form_fields import ChainedChoiceField
from nested_inlines.forms import BaseNestedModelForm

from django.forms import ChoiceField, CharField

from chained_multi_checkboxes.forms import ModelChainedMultipleChoiceField

from models import (INTENSITY_MEASURE_TYPES,
                    CC_ENGINEERING_DEMAND_PARAMETERS,
                    REGIONS,
                    CATEGORIES,
                    METHODS_OF_ESTIMATION,
                    DAMAGE_SCALES,
                    TYPES_OF_ASSESSMENT,
                    CHMAX,
                    PredictorVar,
                    CC_PredictorVar,
                    GeoApplicability,
                    Country,
                    GeneralInformation
                    )

from widgets import TaxonomyInput

class PredictorVarForm(ChainedChoicesForm):
    class Meta:
        model = PredictorVar
    intensity_measure_type = forms.ChoiceField(
        choices=INTENSITY_MEASURE_TYPES)
    intensity_measure_unit = ChainedChoiceField(
        parent_field='intensity_measure_type',
        ajax_url='/vulnerability/intensity_measure_csc')


class CC_PredictorVarForm(ChainedChoicesForm):
    class Meta:
        model = CC_PredictorVar
    engineering_demand_par = forms.ChoiceField(
        label='Engineering demand parameter',
        choices=CC_ENGINEERING_DEMAND_PARAMETERS)
    pred_var_units = ChainedChoiceField(
        label='Predictor variable units',
        parent_field='engineering_demand_par',
        ajax_url='/vulnerability/engineering_demand_csc', item_index=0)
    resp_var_par = ChainedChoiceField(
        label='Response variable parameter',
        parent_field='engineering_demand_par',
        ajax_url='/vulnerability/resp_var_par_csc', item_index=1)
    resp_var_units = ChainedChoiceField(
        label='Response variable units',
        parent_field='resp_var_par',
        ajax_url='/vulnerability/resp_var_units_csc')


    def __getattribute__off__(self, name):
        cc = object.__getattribute__(self, name)
        if callable(cc):
            print "CC_PredictorVarForm call:   %s" % name
        else:
            print "CC_PredictorVarForm access: %s" % name
        return cc


class GeoApplicabilityForm(ModelForm):
    class Meta:
        model = GeoApplicability
        # fields is required to impose the correct visualization order
        # FIXME remove owner and manage it correctly
        fields = ('owner', 'region', 'countries', 'area', 'lat', 'lon', 'address')

    region = ChoiceField(choices=REGIONS)

    countries = ModelChainedMultipleChoiceField(
        help_text='Mandatory if options are displayed only.',
        parent_field='region',
        order_fields=('region', 'name'),
        queryset=Country.objects.all(),
        required=True)


class FiltersForm(forms.Form):
    blank_choice = (('', '---------'),)
    # type_of_assessment = ChoiceField(
    #     choices=TYPES_OF_ASSESSMENT, required=False)
    country = CharField(max_length=CHMAX, required=False)
    region = ChoiceField(choices=blank_choice+REGIONS[1:], required=False)
    method_of_estimation = ChoiceField(label="Method of est.",
        choices=blank_choice+METHODS_OF_ESTIMATION, required=False)
    # material = CharField(required=False)
    # llrs = CharField(required=False)
    author = CharField(max_length=CHMAX, required=False)

    category = ChoiceField(choices=blank_choice+CATEGORIES, required=False)
    intensity_measure_type = ChoiceField(
        choices=INTENSITY_MEASURE_TYPES, required=False)
    damage_scale = ChoiceField(
        choices=blank_choice+DAMAGE_SCALES, required=False)

class GeneralInformationForm(BaseNestedModelForm):

    class Meta:
        model = GeneralInformation

    gem_was_clone = forms.CharField(widget=forms.HiddenInput(), required=False)
    taxonomy_text = forms.CharField(widget=TaxonomyInput())
