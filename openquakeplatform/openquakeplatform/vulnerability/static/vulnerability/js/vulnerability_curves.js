/*
   Copyright (c) 2014, GEM Foundation.

      This program is free software: you can redistribute it and/or modify
      it under the terms of the GNU Affero General Public License as
      published by the Free Software Foundation, either version 3 of the
      License, or (at your option) any later version.

      This program is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU Affero General Public License for more details.

      You should have received a copy of the GNU Affero General Public License
      along with this program.  If not, see <https://www.gnu.org/licenses/agpl.html>.
*/

/////////////////////////////////
//////// Jquery Stuff ///////////
/////////////////////////////////

// Remove GeoNode artifact
$(".span12").remove();


$(function() {
    $("#accordion").accordion({
        collapsible: true,
        heightStyle: "content"
    });
});

/////////////////////////////////////
/// Create Vulnerability Metadata ///
/////////////////////////////////////

var vulnName = gl.fields.name;
var category = gl.fields.category;
var typeOfAssessment = gl.fields.type_of_assessment;
var publication = gl.fields.publication_conference_name;
var articleTitle = gl.fields.article_title;
var authors = gl.fields.authors;
var year = gl.fields.year;
var funcDistrType = gl.fields.vulnerability_func.fields.func_distr_type;
var method = gl.fields.vulnerability_func.fields.method_of_estimation;
var lossType = gl.fields.vulnerability_func.fields.resp_var;
var imtTitle = gl.fields.vulnerability_func.fields.predictor_var.fields.intensity_measure_type;
var imtUnite = gl.fields.vulnerability_func.fields.predictor_var.fields.intensity_measure_unit;
var typeOfPeriod = gl.fields.vulnerability_func.fields.predictor_var.fields.type_of_period;

// Check if the variables are defined in the database
// and add them to the information dialog
// and do nothing if the information is not available in the database
try {
    var structureType = gl.fields.structure_type;
} catch(e) {
    var structureType = '';
}

try {
    var coeffArray = gl.fields.vulnerability_func.fields.func_distr_vuln_discr.fields.resp_var_val_coeff;
} catch(e) {
    // Continue
}

try {
    var period = gl.fields.vulnerability_func.fields.predictor_var.fields.period;
} catch(e) {
    // Continue
}

try {
    var taxText = gl.fields.taxonomy_text;
} catch(e) {
    // Continue
}

try {
    var taxType = gl.fields.taxonomy_type.fields.name;
} catch(e) {
    // Continue
}

try {
    var generalComments = gl.fields.general_comments;
    generalComments = escapeHtml(generalComments);

} catch(e) {
    // Continue
}

try {
    var useCase = gl.fields.use_case_information;
} catch(e) {
    // Continue
}

var GeoError;
try {
    var geoApp = gl.fields.geo_applicability.fields.countries;
    GeoError = false;
} catch(e) {
    GeoError = true;
}

if (GeoError === false) {
   var countriesArray = [];

    for (var i = geoApp.length - 1; i >= 0; i--) {
        var tmp = " "+geoApp[i].fields.name;
        countriesArray.push(tmp);
    }
}

if (funcDistrType == "Discrete") {
    var analysisType = gl.fields.vulnerability_func.fields.name;
    if (gl.fields.vulnerability_func.fields.analytical_model_info != undefined) {
        var methodUncertPropag = gl.fields.vulnerability_func.fields.analytical_model_info.fields.method_uncert_propag;
        var modelsNum = gl.fields.vulnerability_func.fields.analytical_model_info.fields.models_num;
        var modelType = gl.fields.vulnerability_func.fields.analytical_model_info.fields.model_type;
    }
}

function is_set(a) {
    return (a !== undefined && a !== "" && a !== null);
}

// General info
if (is_set(typeOfAssessment)) {
    $("#genInfo").append('<p><b>Assessment Type: </b>'+typeOfAssessment+'</p>');
}

if (is_set(lossType)) {
    $("#genInfo").append('<p><b>Loss Type: </b>'+lossType+'</p>');
}

if (is_set(vulnName)) {
    vulnName = vulnName.replace(/_/g, ' ');
    $("#genInfo").append('<p><b>Name: </b>'+vulnName+'</p>');
}

if (is_set(category)) {
    $("#genInfo").append('<p><b>Category: </b>'+category+' - '+structureType+'</p>');
}

if (is_set(taxType)) {
    $("#genInfo").append('<p><b>Taxonomy: </b>'+taxText+' ('+taxType+')</p>');
}

if (is_set(articleTitle)) {
    $("#genInfo").append('<p><b>Reference: </b>'+articleTitle+' ('+authors+', '+year+') - '+publication+'</p>');
}

if (gl.fields.web_link !== undefined && gl.fields.web_link != "") {
    var webLink = gl.fields.web_link;
    $("#genInfo").append('<p><b>Web Link: </b><a style="color:blue" href="'+webLink+'" target="_blank"> '+webLink+'</a></p>');
}

if (countriesArray.length > 0) {
    $("#genInfo").append('<p><b>Geographical Applicability: </b>'+countriesArray+'</p>');
}

if (is_set(method)) {
    $("#genInfo").append('<p><b>Methodology: </b>'+method+'</p>');
}

if (is_set(generalComments)) {
    $("#genInfo").append('<p><b>General Comments: </b>'+generalComments+'</p>');
}

if (is_set(useCase)) {
    $("#genInfo").append('<p><b>Use Case Information: </b>'+useCase+'</p>');
}

// Modelling info
try {
    var modelAnalysisType = gl.fields.vulnerability_func.fields.analytical_model_info.fields.analysis_type.fields.name;
    if (is_set(modelAnalysisType)) {
        $("#modellingInfo").append('<p><b>Analysis Type: </b>'+modelAnalysisType+'</p>');
    }
} catch(e) {
    // Continue
}

if (is_set(modelType)) {
    $("#modellingInfo").append('<p><b>Model Type: </b>'+modelType+'</p>');
}

if (is_set(methodUncertPropag)) {
    $("#modellingInfo").append('<p><b>Method of Uncertainty Propagation: </b>'+methodUncertPropag+'</p>');
}

if (is_set(modelsNum)) {
    $("#modellingInfo").append('<p><b>Number of Distinct Structural Models Analysed: </b>'+modelsNum+'</p>');
}

try {
    var buildingAggr = gl.fields.vulnerability_func.fields.empirical_model_info.fields.building_aggr;
    if (is_set(buildingAggr)) {
        $("#modellingInfo").append('<p><b>Dwelling / Building: </b>'+buildingAggr+'</p>');
    }
} catch(e) {
    // Continue
}

try {
    var buildingAggrMinNum = gl.fields.vulnerability_func.fields.empirical_model_info.fields.building_aggr_min_num;
    if (is_set(buildingAggrMinNum)) {
        $("#modellingInfo").append('<p><b>Min number of grouped buildings: </b>'+buildingAggrMinNum+'</p>');
    }
} catch(e) {
    // Continue
}

try {
    var aggrUnitDef = gl.fields.vulnerability_func.fields.empirical_model_info.fields.aggr_unit_def;
    if (is_set(aggrUnitDef)) {
        $("#modellingInfo").append('<p><b>Aggregated unit: </b>'+aggrUnitDef+'</p>');
    }
} catch(e) {
    // Continue
}

try {
    if(gl.fields.vulnerability_func.fields.analytical_model_info.fields.evaluation_of_im !== null) {
        var evaluationOfIM =  gl.fields.vulnerability_func.fields.analytical_model_info.fields.evaluation_of_im.fields.name;
        if (is_set(evaluationOfIM)) {
            $("#modellingInfo").append('<p><b>Evaluation of IM: </b>'+evaluationOfIM+'</p>');
        }
    }
} catch(e) {
    // Continue
}

try {
    if(gl.fields.vulnerability_func.fields.empirical_model_info.fields.evaluation_of_im !== null) {
        var evaluationOfIM =  gl.fields.vulnerability_func.fields.empirical_model_info.fields.evaluation_of_im.fields.name;
        if (is_set(evaluationOfIM)) {
            $("#modellingInfo").append('<p><b>Evaluation of IM: </b>'+evaluationOfIM+'</p>');
        }
    }
} catch(e) {
    // Continue
}

try {
    var structuralUnit =  gl.fields.vulnerability_func.fields.empirical_model_info.fields.structural_unit;
    if (is_set(structuralUnit)) {
        $("#modellingInfo").append('<p><b>Structural units: </b>'+structuralUnit+'</p>');
    }
} catch(e) {
    // Continue
}

try {
    var buildingXClass =  gl.fields.vulnerability_func.fields.empirical_model_info.fields.building_x_class_num;
    if (is_set(buildingXClass)) {
        $("#modellingInfo").append('<p><b>Number of buildings per class: </b>'+buildingXClass+'</p>');
    }
} catch(e) {
    // Continue
}

try {
    var empiricalDataSrc =  gl.fields.vulnerability_func.fields.empirical_model_info.fields.empirical_data_src;
    if (is_set(empiricalDataSrc)) {
        $("#modellingInfo").append('<p><b> Source of empirical data: </b>'+empiricalDataSrc+'</p>');
    }
} catch(e) {
    // Continue
}

try {
    var buildingAggr =  gl.fields.vulnerability_func.fields.empirical_model_info.fields.building_aggr;
    if (is_set(buildingAggr)) {
        $("#modellingInfo").append('<p><b> Building aggregation: </b>'+buildingAggr+'</p>');
    }
} catch(e) {
    // Continue
}

try {
    var buildingsMin =  gl.fields.vulnerability_func.fields.empirical_model_info.fields.building_aggr_min_num;
    if (is_set(buildingsMin)) {
        $("#modellingInfo").append('<p><b> Minimum Number of grouped buildings: </b>'+buildingsMin+'</p>');
    }
} catch(e) {
    // Continue
}


// Statistical Information

if (gl.fields.vulnerability_func.fields.stat_info != undefined) {

    if (gl.fields.vulnerability_func.fields.stat_info.fields.stat_model != undefined && gl.fields.vulnerability_func.fields.stat_info.fields.stat_model != null) {
        var statModel = gl.fields.vulnerability_func.fields.stat_info.fields.stat_model.fields.name;
        $("#statInfo").append('<p><b>Statistical Model: </b>'+statModel+'</p>');
    }

    try {
        var statModelFittingMethod = gl.fields.vulnerability_func.fields.stat_info.fields.stat_model_fitting_method.fields.name;
        $("#statInfo").append('<p><b>Statistical model fitting method: </b>'+statModelFittingMethod+'</p>');
        var fitAssessmentGoodness = gl.fields.vulnerability_func.fields.stat_info.fields.stat_model_fitting_method.fields.name;
        $("#statInfo").append('<p><b>Goodness of fit assessment (GLM/GAM): </b>'+fitAssessmentGoodness+'</p>');
    } catch(e) {
        // Continue
    }

    try {
        var modelFittingMethodAssumptions = gl.fields.vulnerability_func.fields.stat_info.fields.model_fitting_method_assumptions.fields.name;
        if (is_set(modelFittingMethodAssumptions)) {
            $("#statInfo").append('<p><b>Model Fitting Method Assumption: </b>'+modelFittingMethodAssumptions+'</p>');
        }
    } catch(e) {
        // Continue
    }

    try {
        var procConstrPredInt = gl.fields.vulnerability_func.fields.stat_info.fields.proc_constr_pred_int.fields.name;
        $("#statInfo").append('<p><b>Procedure for the Construction of Prediction Intervals: </b>'+procConstrPredInt+'</p>');
    } catch(e) {
        // Continue
    }

    try {
        var procConstrConfInt = gl.fields.vulnerability_func.fields.stat_info.fields.proc_constr_conf_int.fields.name;
        $("#statInfo").append('<p><b>Procedure for the Construction of Confidence Intervals: </b>'+procConstrConfInt+'</p>');
    } catch(e) {
        // Continue
    }
}

//  Quality rating system

try {
    var structuralDetails = gl.fields.vulnerability_func.fields.qrs_analytical.fields.structural_details;
    if (is_set(structuralDetails)) {
        $("#qualitySys").append('<p><b>Structural details: </b>'+structuralDetails+'</p>');
    }
} catch(e) {
    // Continue
}

try {
    var modelCompleteness = gl.fields.vulnerability_func.fields.qrs_analytical.fields.model_completeness;
    if (is_set(modelCompleteness)) {
        $("#qualitySys").append('<p><b>Completeness of model: </b>'+modelCompleteness+'</p>');
    }
} catch(e) {
    // Continue
}

try {
    var seismicDemand = gl.fields.vulnerability_func.fields.qrs_analytical.fields.seismic_demand;
    if (is_set(seismicDemand)) {
        $("#qualitySys").append('<p><b>Seismic demand: </b>'+seismicDemand+'</p>');
    }
} catch(e) {
    // Continue
}

try {
    var analysisType = gl.fields.vulnerability_func.fields.qrs_analytical.fields.analysis_type;
    if (is_set(analysisType)) {
        $("#qualitySys").append('<p><b>Analysis type: </b>'+analysisType+'</p>');
    }
} catch(e) {
    // Continue
}

try {
    var limitStatesDef = gl.fields.vulnerability_func.fields.qrs_analytical.fields.limit_states_def;
    if (is_set(limitStatesDef)) {
        $("#qualitySys").append('<p><b>Definition of Limit States: </b>'+limitStatesDef+'</p>');
    }
} catch(e) {
    // Continue
}

try {
    var samplingMethod = gl.fields.vulnerability_func.fields.qrs_analytical.fields.sampling_method;
    if (is_set(samplingMethod)) {
        $("#qualitySys").append('<p><b>Sampling method: </b>'+samplingMethod+'</p>');
    }
} catch(e) {
    // Continue
}

try {
    var crossValidation = gl.fields.vulnerability_func.fields.qrs_analytical.fields.sampling_method;
    if (is_set(crossValidation)) {
        $("#qualitySys").append('<p><b>Cross validation: </b>'+crossValidation+'</p>');
    }
} catch(e) {
    // Continue
}

try {
    var uncertaintiesTreatment = gl.fields.vulnerability_func.fields.qrs_analytical.fields.sampling_method;
    if (is_set(uncertaintiesTreatment)) {
        $("#qualitySys").append('<p><b>Treatment of uncertainties: </b>'+uncertaintiesTreatment+'</p>');
    }
} catch(e) {
    // Continue
}

try {
    var documentationQuality = gl.fields.vulnerability_func.fields.qrs_analytical.fields.documentation_quality;
    if (is_set(documentationQuality)) {
        $("#qualitySys").append('<p><b>Documentation quality: </b>'+documentationQuality+'</p>');
    }
} catch(e) {
    // Continue
}

try {
    var documentationType = gl.fields.vulnerability_func.fields.qrs_analytical.fields.documentation_type;
    if (is_set(documentationType)) {
        $("#qualitySys").append('<p><b>Type of documentation: </b>'+documentationType+'</p>');
    }
} catch(e) {
    // Continue
}

try {
    var typologyRep = gl.fields.vulnerability_func.fields.qrs_analytical.fields.typology_repr;
    if (is_set(typologyRep)) {
        $("#qualitySys").append('<p><b>Representation of typology: </b>'+typologyRep+'</p>');
    }
} catch(e) {
    // Continue
}

try {
    var siteSpecific = gl.fields.vulnerability_func.fields.qrs_analytical.fields.site_specific;
    if (is_set(siteSpecific)) {
        $("#qualitySys").append('<p><b>Site specific: </b>'+siteSpecific+'</p>');
    }
} catch(e) {
    // Continue
}

try {
    var hazardModel = gl.fields.vulnerability_func.fields.qrs_analytical.fields.hazard_model;
    if (is_set(hazardModel)) {
        $("#qualitySys").append('<p><b>Hazard model: </b>'+hazardModel+'</p>');
    }
} catch(e) {
    // Continue
}

try {
    var dataQuantity = gl.fields.vulnerability_func.fields.qrs_empirical.fields.data_quantity;
    if (is_set(dataQuantity)) {
        $("#qualitySys").append('<p><b>Data quality: </b>'+dataQuantity+'</p>');
    }
} catch(e) {
    // Continue
}

try {
    var constrainedCategories = gl.fields.vulnerability_func.fields.qrs_empirical.fields.constrained_categories;
    if (is_set(constrainedCategories)) {
        $("#qualitySys").append('<p><b>Constrained categories: </b>'+constrainedCategories+'</p>');
    }
} catch(e) {
    // Continue
}

try {
    var excitationObservation = gl.fields.vulnerability_func.fields.qrs_empirical.fields.excitation_observation;
    if (is_set(excitationObservation)) {
        $("#qualitySys").append('<p><b>Excitation observations: </b>'+excitationObservation+'</p>');
    }
} catch(e) {
    // Continue
}

try {
    var damageLossObservation = gl.fields.vulnerability_func.fields.qrs_empirical.fields.damage_loss_observation;
    if (is_set(damageLossObservation)) {
        $("#qualitySys").append('<p><b>Damage/loss observation: </b>'+damageLossObservation+'</p>');
    }
} catch(e) {
    // Continue
}

try {
    var firstPrinciples = gl.fields.vulnerability_func.fields.qrs_empirical.fields.first_principles;
    if (is_set(firstPrinciples)) {
        $("#qualitySys").append('<p><b>First principles: </b>'+firstPrinciples+'</p>');
    }
} catch(e) {
    // Continue
}

try {
    var hindcasting = gl.fields.vulnerability_func.fields.qrs_empirical.fields.hindcasting;
    if (is_set(hindcasting)) {
        $("#qualitySys").append('<p><b>Hindcasting: </b>'+hindcasting+'</p>');
    }
} catch(e) {
    // Continue
}

try {
    var crossValidation = gl.fields.vulnerability_func.fields.qrs_empirical.fields.cross_validation;
    if (is_set(crossValidation)) {
        $("#qualitySys").append('<p><b>Cross validation: </b>'+crossValidation+'</p>');
    }
} catch(e) {
    // Continue
}

try {
    var uncertaintiesTreatment = gl.fields.vulnerability_func.fields.qrs_empirical.fields.uncertainties_treatment;
    if (is_set(uncertaintiesTreatment)) {
        $("#qualitySys").append('<p><b>Treatment of uncertainties: </b>'+uncertaintiesTreatment+'</p>');
    }
} catch(e) {
    // Continue
}

try {
    var documentationQuality = gl.fields.vulnerability_func.fields.qrs_empirical.fields.documentation_quality;
    if (is_set(documentationQuality)) {
        $("#qualitySys").append('<p><b>Documentation quality: </b>'+documentationQuality+'</p>');
    }
} catch(e) {
    // Continue
}

try {
    var documentationType = gl.fields.vulnerability_func.fields.qrs_empirical.fields.documentation_type;
    if (is_set(documentationType)) {
        $("#qualitySys").append('<p><b>Type of documentation: </b>'+documentationType+'</p>');
    }
} catch(e) {
    // Continue
}

// Check to see if the accordions are full or empty
is_empty('modellingInfo');
is_empty('statInfo');
is_empty('qualitySys');

function is_empty(b) {
    if ( $('#'+b).children().length === 0) {
        $('#'+b+'-header').css({'color' : 'LightGray'});
    }
}

/////////////////////////////////////////////
/// Create Discrete Vulnerability Curves ////
/////////////////////////////////////////////

if (funcDistrType == "Discrete") {

    if (coeffArray != "" && coeffArray != undefined) {
        coeffArray = coeffArray.split(";");
        for (var i = 0; i < coeffArray.length; i++)
            coeffArray[i] = coeffArray[i].trim();
        for (var i = 0; i < coeffArray.length; i++) {
            coeffArray[i] = parseFloat(coeffArray[i]);
        }
    }

    var predVal = gl.fields.vulnerability_func.fields.func_distr_vuln_discr.fields.predictor_var_im_val;
    predVal = predVal.split(";");
    for (var i = 0; i < predVal.length; i++)
        predVal[i] = predVal[i].trim();
    for (var i = 0; i < predVal.length; i++) {
        predVal[i] = parseFloat(predVal[i]);
    }

    var respMean = gl.fields.vulnerability_func.fields.func_distr_vuln_discr.fields.resp_var_mean_val;
    respMean = respMean.split(";");
    for (var i = 0; i < respMean.length; i++)
        respMean[i] = respMean[i].trim();
    for (var i = 0; i < respMean.length; i++) {
        respMean[i] = parseFloat(respMean[i]);

    }

    var chartData = [];

    if (coeffArray != "" && coeffArray != undefined) {
        for (var i = 0; i < respMean.length; i++) {
            chartData.push([predVal[i], respMean[i], coeffArray[i]]);
        }
    } else {
        for (var i = 0; i < respMean.length; i++) {
            chartData.push([predVal[i], respMean[i]]);
        }
    }

    buildD3Chart(chartData);
    discreteTable();


///////////////////////////////////////////////
/// Create Continuous Vulnerability Curves ////
///////////////////////////////////////////////

} else if (funcDistrType == "Continuous") {

    // Get values out of JSON
    var dataObj = [];
    var chartData = [];
    var iml = [];
    var mean = gl.fields.vulnerability_func.fields.func_distr_vuln_cont.fields.mean;
    var stddev = gl.fields.vulnerability_func.fields.func_distr_vuln_cont.fields.std_dev;
    var min = gl.fields.vulnerability_func.fields.predictor_var.fields.minimum_im;

    if (gl.fields.vulnerability_func.fields.predictor_var.fields.maximum_im == undefined) {
        var max = (2 * mean);
    } else {
        var max = gl.fields.vulnerability_func.fields.predictor_var.fields.maximum_im;
    }

    var inc = ((max - min) / 100);

    // create the x axis values
    for(var i=min; i<max;i=i+inc) {
        iml.push(Math.round(i*1000) / 1000);
    }
    iml.push(max);

    var imlValues = makeFragilityFunctionContinuous(mean, stddev);

    for (var j = 0; j < iml.length; j++) {
        var val = imlValues(iml[j]);
        dataObj.push([iml[j], val]);
    }

    // create the x axis values
    for(var i=min; i<max;i=i+inc) {
        iml.push(Math.round(i*1000) / 1000);
    }
    iml.push(max);

    continuousTable();
    buildD3Chart(dataObj);
}


//////////////////////////////////////////////
///// Discrete Vulnerability Data Table //////
//////////////////////////////////////////////

function discreteTable() {

    // if there is a function distribution shape
    try{
        var funcDisShape = gl.fields.vulnerability_func.fields.func_distr_vuln_discr.fields.func_distr_shape;
    } catch(e) {
        var funcDisShape = "not available";
        // Continue
    }

    if (imtUnite == "Roman numbers") {
        imtUnite = "";
    } else {
        imtUnite = '['+imtUnite+']';
    }

    var aaData = [];
    var placeHolder = "";
    if (coeffArray.length === 0) {
        var header = [
            {"sTitle": imtTitle + ' '+imtUnite},
            {"sTitle": "Mean loss ratio"}
        ];
    } else {
        var header = [
            {"sTitle": imtTitle + ' '+imtUnite},
            {"sTitle": "Mean loss ratio"},
            {"sTitle": "CoV"}
        ];
    }

    for (var h = 0; h < header.length; h++) {
        placeHolder = placeHolder.concat('<th>place holder</th>');
    }

    for (var i = 0; i < respMean.length; i++) {
        var tmp = [];
        tmp.push(predVal[i]);
        tmp.push(respMean[i]);
        tmp.push(coeffArray[i]);
        aaData.push(tmp);
    }

    if (coeffArray.length > 0) {
        // empty the existing div and replace it with new content
        $('#function-table').empty();

        // Inject the table
        $('#function-table').append(
            '<thead id="tablehead">'+
                '<tr>'+
                    '<th colspan="2">Uncertainty Distribution: '+funcDisShape+'</th>'+
                '</tr>'+
                '<tr>'+
                    placeHolder+
                '</tr>'+
            '</thead>'
        );

        $('#function-table').dataTable({
        "aaSorting": [[1, 'asc']],
        "aaData": aaData,
        "aoColumns": header,
        "bFilter": false
    });
    } else {

        // Inject the table
        $('#function-table').append(
            '<thead id="tablehead">'+
                '<tr>'+
                    '<th colspan="2">Uncertainty Distribution: '+funcDisShape+'</th>'+
                '</tr>'+
                '<tr><th>Mean</th><th>Standard Dev</th></tr>'+
                    '<tbody id="tableBody">'+
                        '<tr><td>'+
                        '</td></tr>'+
                    '</tbody>'+
            '</thead>'
        );

        $('#function-table').dataTable({
            "aaSorting": [[1, 'asc']],
            "aaData": aaData,
            "aoColumns": header,
            "bFilter": false
        });

    }
}

////////////////////////////////////////////////
///// Continuous Vulnerability Data Table //////
////////////////////////////////////////////////

function continuousTable() {
    var aaData = [];
    for (var i = 0; i < dataObj.length; i++) {
            var tmp = [dataObj[i][0], Math.round(dataObj[i][1] * 10000) / 10000];
            aaData.push(tmp);
    }

    if (imtUnite == "Roman numbers") {
        imtUnite = "";
    } else {
        imtUnite = imtUnite;
    }

    // if there is a function distribution shape
    try{
        var funcDisShape = gl.fields.vulnerability_func.fields.func_distr_vuln_cont.fields.func_distr_shape;
        var funcShapeTableData = [];
        funcShapeTableData.push(['Mean', mean]);
        funcShapeTableData.push(['Standard deviation', stddev]);
        $('#functionContainer').append('<div id="dialog-shape-datagrid">'+
                '<table id="function-shape-table">'+
                    '<thead id="tablehead">'+
                        '<tr>'+
                            '<th rowspan="1">Function shape:</th>'+
                            '<th colspan="4">'+funcDisShape+'</th>'+
                        '</tr>'+
                        '<tr>'+
                            '<th>place holder</th>'+
                            '<th>place holder</th>'+
                        '</tr>'+
                    '</tbody>'+
                '</table>'+
            '</div>'
        );
        $('#function-shape-table').dataTable({
            "aaSorting": [[1, 'asc']],
            "aaData": funcShapeTableData,
            "aoColumns": [
                {"sTitle": "Intensity measure:"},
                {"sTitle": imtTitle+ ' ['+imtUnite+']'}
            ],
            "bLengthChange": false,
            "bFilter": false
        });
    } catch(e) {
        // continue
    }
}

function normalCumulativeProbability(z) {
    var b1 = 0.31938153;
    var b2 = -0.356563782;
    var b3 = 1.781477937;
    var b4 = -1.821255978;
    var b5 = 1.330274429;
    var p = 0.2316419;
    var c2 = 0.3989423;
    if (z > 6.0){
        return 1.0;}  // this guards against overflow
    if (z < -6.0){
        return 0.0;}
    var a = Math.abs(z);
    var t = 1.0 / (1.0 + a * p);
    var b = c2 * Math.exp((-z)*(z / 2.0));
    var n = ((((b5 * t + b4) * t + b3) * t + b2) * t + b1) * t;
    n = 1.0 - b * n;
    if (z < 0.0){
        n = 1.0 - n;}
    return n;
}

function makeFragilityFunctionContinuous(mean, stddev) {
    var variance = stddev * stddev;
    var sigma = Math.sqrt(Math.log((variance / (mean * mean)) + 1.0));

    mu = (mean * mean) / Math.sqrt(variance + mean * mean);

    return function(iml) {
       return normalCumulativeProbability((Math.log(iml / mu)) / sigma);
    };
}

function capitalize(str) {
    return str.replace(/\w\S*/g, function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();});
}

//////////////////////////////////////
/////// Vulnerability Chart //////////
//////////////////////////////////////

function buildD3Chart(chartData) {

    var maxIm = gl.fields.vulnerability_func.fields.predictor_var.fields.maximum_im;
    var minIm = gl.fields.vulnerability_func.fields.predictor_var.fields.minimum_im;

    //make sure that the plot does not go beyond the maxIm
    var chartDataFiltered = [];

    for (var i = 0; i < chartData.length; i++) {
        if (chartData[i][0] <= maxIm) {
            chartDataFiltered.push(chartData[i]);
        }
    }

    //prep the X axis lable
    var xAxisLable = "";
    if (imtTitle == "PGA") {
        xAxisLable = imtTitle+" ["+imtUnite+"]";
    } else if (imtTitle == "Sa(T)") {
        xAxisLable = imtTitle + " [" +imtUnite+ "] - T =" +typeOfPeriod+ " = "+period;
    } else if (imtTitle == "Sd(T)") {
        xAxisLable = imtTitle + " [" +imtUnite+ "] - T =" +typeOfPeriod+ " = "+period;
    } else if (imtTitle == "MMI") {
        xAxisLable = imtTitle;
    }  else if (imtTitle == "PGV") {
        xAxisLable = imtTitle + " [" +imtUnite+ "]";
    } else if (imtTitle == "PGD") {
        xAxisLable = imtTitle + " [" +imtUnite+ "]";
    } else if (imtTitle == "IA") {
        xAxisLable = imtTitle + " [" +imtUnite+ "]";
    } else if (imtTitle == "CAV") {
        xAxisLable = imtTitle + " [" +imtUnite+ "]";
    } else if (imtTitle == "RSD") {
        xAxisLable = imtTitle + " [" +imtUnite+ "]";
    }

    if (funcDistrType == "Continuous") {
        predVal = iml;
        respMean = mean;
    }

    // grid line functions
    function make_x_axis() {
        return d3.svg.axis()
            .scale(x_scale)
            .orient("bottom")
            .ticks(5);
    }
    function make_y_axis() {
        return d3.svg.axis()
            .scale(y_scale)
            .orient("left")
            .ticks(5);
    }
    function capitalise(string) {
        return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase();
    }
    function makeCircles(data) {;
        // Points along the line
        svg.selectAll("circle.line")
            .data(data)
            .enter().append("circle")
            .attr("class", "line")
            .attr("cx", function(d) { return x_scale(d[0]); })
            .attr("cy", function(d) { return y_scale(d[1]); })
            .attr("r", 2.5)
            .style("fill", "blue")
            .style("opacity", 1)
            .on("mouseover", function() {
                d3.select(this)
                    .attr('r', 6)
                    .text(circleX + ", " + circleY)
                    .style("fill", "blue")
                    .style("opacity", 1);
                var circleX = d3.select(this.__data__[0]);
                circleX = circleX.toString();
                circleX = circleX.split(","[0]);

                if (coeffArray !== "" && coeffArray !== undefined && coeffArray !== null) {
                    var cov = " COV: "+this.__data__[2];// coefficient
                } else {
                    cov = "";
                }
                var circleY = d3.select(this.__data__[1]);
                circleY = circleY.toString();
                circleY = circleY.split(","[0]);

                textTop.text("Point value (x/y): " + Math.round(circleX * 1000) / 1000 + ", " + Math.round(circleY * 1000) / 1000 +cov);

            }).on("mouseout", function() {
                d3.select(this)
                    .attr('r', 2.5)
                    .style("opacity", 1)
                    .style("fill", "blue");
            });
    }
    var margin = {top: 55, right: 10, bottom: 80, left: 60},
    width = 480 - margin.left - margin.right,
    height = 440 - margin.top - margin.bottom;

    formatter = d3.format(".0%");

    // deep copy the data for use in maxy
    var chartDataFilteredCopy = JSON.parse(JSON.stringify(chartDataFiltered));

    if (funcDistrType == "Discrete") {
        // Check the greatest value in the y axis, and then modify the data formatter accordingly
        var steps = [];
        for (var b = 0; b < chartData.length; b++) {
            steps.push(chartData[b][1]);
        }

        var theLastStep = steps[steps.length-1];

        if ((theLastStep) < 0.2) {
            formatter = d3.format(".2%");
        }

        var maxy = "";
        maxy = chartDataFilteredCopy.pop();
        maxy = maxy[1];

        var y_scale = d3.scale.linear().range([0, height]).domain([maxy, d3.min(respMean)]);
        var x_scale = d3.scale.linear().range([0, width]).domain([minIm, maxIm]);
    } else {
        // get the max values for the continuous curves so the chart y axis is limited to the maxy  
        var maxy = d3.max($.map(chartDataFiltered, function(d) { return d[1]; }));
        var y_scale = d3.scale.linear().range([0, height]).domain([maxy, 0]);
        var x_scale = d3.scale.linear().range([0, width]).domain([d3.min(predVal), d3.max(predVal)]);
    }

    var xAxis = d3.svg.axis()
        .scale(x_scale)
        .tickFormat(function (d) { return d; })
        .ticks(10)
        .orient("bottom");

    var yAxis = d3.svg.axis()
        .scale(y_scale)
        .orient("left")
        .tickFormat(formatter);

    var line = d3.svg.line()
        .x(function(d) {
            return x_scale(d[0]);
        })
        .y(function(d) {
            return y_scale(d[1]);
        });

    var svg = d3.select("#functionChart").append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
        .append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
    // grid lines
    svg.append("g")
        .attr("class", "grid")
        .attr("transform", "translate(0," + height + ")")
        .call(make_x_axis()
            .tickSize(-height, 0, 0)
            .tickFormat("")
        );

    svg.append("g")
        .attr("class", "grid")
        .call(make_y_axis()
            .tickSize(-width, 0, 0)
            .tickFormat("")
        );
    var legend = d3.select("#chartDialog").append("svg")
        .attr("height", 25);
    var count = 0;

    svg.append("path")
        .data([chartDataFiltered])
        .attr("class", "line")
        .attr()
        .attr("d", line);

    var data = chartDataFiltered;

    if (funcDistrType == "Discrete") {
        makeCircles(data);
    }

    svg.append("g")
        .attr("class", "x axis")
        .attr("transform", "translate(0," + height + ")")
        .call(xAxis);

    // x axis lable
    svg.append("text")
        .attr("x", width / 2 )
        .attr("y",  height + 40)
        .style("font-size","14px")
        .style("text-anchor", "middle")
        .style("font-weight", "bold")
        .text(xAxisLable);

    svg.append("g")
        .attr("class", "y axis")
        .call(yAxis)
        .append("text")
        .attr("transform", "rotate(-90)")
        .attr("y", -60)
        .attr("x", -100)
        .attr("dy", ".71em")
        .style("text-anchor", "end")
        .style("font-weight", "bold")
        .style("font-size","14px")
        .text("Loss Ratio (%)");

    svg.append("text")
        .attr("x", width / 2)
        .attr("y", -35)
        .attr("dy", ".35em")
        .style("font-weight", "bold")
        .style("text-anchor", "middle")
        .style("font-size","14px")
        .text(typeOfAssessment +' '+ vulnName);

    textTop = svg.append("text")
        .attr("x", width / 2 )
        .attr("y", -15)
        .attr("dy", ".35em")
        .style("text-anchor", "middle")
        .text("");
} // End Chart


