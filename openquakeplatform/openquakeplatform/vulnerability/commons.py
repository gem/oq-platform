import re
from django.forms.util import ValidationError as FormValidationError
from django.forms.fields import CharField
from roman import roman_to_int


class SemicolonSeparatedFloatFormField(CharField):
    def __init__(self, *args, **kwargs):
        self.max_length = 1024
        super(SemicolonSeparatedFloatFormField, self).__init__(*args, **kwargs)

    def clean(self, value):
        value = super(CharField, self).clean(value)
        value = preprocess_input(value)
        try:
            [float(x) for x in value.split(";")]
        except ValueError as e:
            raise FormValidationError(e)
        return value


class SemicolonSeparatedFloatRomanFormField(CharField):
    def __init__(self, *args, **kwargs):
        self.max_length = 1024
        super(SemicolonSeparatedFloatRomanFormField, self).__init__(
            *args, **kwargs)

    def clean(self, value):
        value = super(CharField, self).clean(value)
        value = preprocess_input(value)
        for element in value.split(";"):
            if not isinstance(element, float):
                try:
                    roman_to_int(element)
                except ValueError as e:
                    raise FormValidationError(e)
        return value


class SemicolonSeparatedStringFormField(CharField):
    def __init__(self, *args, **kwargs):
        self.max_length = 1024
        super(SemicolonSeparatedStringFormField, self).__init__(
            *args, **kwargs)

    def clean(self, value):
        value = super(CharField, self).clean(value)
        value = preprocess_input(value)
        try:
            [str(x) for x in value.split(";")]
        except ValueError as e:
            raise FormValidationError(e)
        return value


class BidimensionalFloatFormField(CharField):
    def __init__(self, *args, **kwargs):
        self.max_length = 1024
        super(BidimensionalFloatFormField, self).__init__(*args, **kwargs)

    def clean(self, value):
        value = super(CharField, self).clean(value)
        value = preprocess_input(value)
        for row in value.split("\n"):
            try:
                [float(x) for x in row.split(";")]
            except ValueError as e:
                raise FormValidationError(e)
        return value


def preprocess_input(value):
    value = value.replace('\t', ';').replace(' ', '')
    value = re.sub(r';+', ';', value)
    value = value.rstrip("\n")
    return value
