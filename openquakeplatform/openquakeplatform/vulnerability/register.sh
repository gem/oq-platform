#!/bin/bash
fname="$1"
NL="
"
IFS="
"
first=""
second=""
for cla in $(cat "$fname" | grep '^class.*models\.Model.*' | sed 's/^class //g;s/(.*//g'); do
    first="${first}${NL}from models import ${cla}"
    second="${second}${NL}admin.site.register(${cla})"
done

echo "from django.contrib import admin"
echo "$first"
echo "$second"

cat <<EOF


class CC_PredictorVarInline(admin.StackedInline):
    model = CC_PredictorVar
    fk_name = 'capacity_curve_func'


class CC_AnalyticalModelInfoInline(admin.StackedInline):
    model = AnalyticalModelInfo
    fk_name = 'capacity_curve_func'


class CapacityCurveFuncAdmin(admin.ModelAdmin):
    inlines = [
        CC_AnalyticalModelInfoInline,
        CC_PredictorVarInline,
    ]


admin.site.unregister(CapacityCurveFunc)
admin.site.register(CapacityCurveFunc, CapacityCurveFuncAdmin)


class DL_AnalyticalModelInfoInline(admin.StackedInline):
    model = AnalyticalModelInfo
    exclude = ('capacity_curve_func',
               'fragility_func',
               'vulnerability_func')
    fk_name = 'damage_to_loss_func'


class DL_EmpiricalModelInfoInline(admin.StackedInline):
    model = EmpiricalModelInfo
    exclude = ('fragility_func',
               'vulnerability_func')
    fk_name = 'damage_to_loss_func'


class DamageToLossFuncAdmin(admin.ModelAdmin):
    inlines = [
        DL_AnalyticalModelInfoInline,
        DL_EmpiricalModelInfoInline,
    ]


admin.site.unregister(DamageToLossFunc)
admin.site.register(DamageToLossFunc, DamageToLossFuncAdmin)


class VU_AnalyticalModelInfoInline(admin.StackedInline):
    model = AnalyticalModelInfo
    exclude = ('capacity_curve_func',
               'damage_to_loss_func',
               'fragility_func')
    fk_name = 'vulnerability_func'


class VU_EmpiricalModelInfoInline(admin.StackedInline):
    model = EmpiricalModelInfo
    exclude = ('damage_to_loss_func',
               'fragility_func')
    fk_name = 'vulnerability_func'


class VU_PredictorVarInline(admin.StackedInline):
    model = PredictorVar
    exclude = ('fragility_func',)
    fk_name = 'vulnerability_func'


class VulnerabilityFuncAdmin(admin.ModelAdmin):
    inlines = [
        VU_AnalyticalModelInfoInline,
        VU_EmpiricalModelInfoInline,
        VU_PredictorVarInline,
    ]


admin.site.unregister(VulnerabilityFunc)
admin.site.register(VulnerabilityFunc, VulnerabilityFuncAdmin)


class FR_AnalyticalModelInfoInline(admin.StackedInline):
    model = AnalyticalModelInfo
    exclude = ('capacity_curve_func',
               'damage_to_loss_func',
               'vulnerability_func')
    fk_name = 'fragility_func'


class FR_EmpiricalModelInfoInline(admin.StackedInline):
    model = EmpiricalModelInfo
    exclude = ('damage_to_loss_func',
               'vulnerability_func')
    fk_name = 'fragility_func'


class FR_PredictorVarInline(admin.StackedInline):
    model = PredictorVar
    exclude = ('vulnerability_func',)
    fk_name = 'fragility_func'


class FR_FuncDistributionFragContinuousInline(admin.StackedInline):
    model = FuncDistributionFragContinuous
    fk_name = 'fragility_func'


class FR_FuncDistributionFragDiscreteInline(admin.StackedInline):
    model = FuncDistributionFragDiscrete
    fk_name = 'fragility_func'


class FragilityFuncAdmin(admin.ModelAdmin):
    inlines = [
        FR_AnalyticalModelInfoInline,
        FR_EmpiricalModelInfoInline,
        FR_PredictorVarInline,
        FR_FuncDistributionFragContinuousInline,
        FR_FuncDistributionFragDiscreteInline,
    ]


admin.site.unregister(FragilityFunc)
admin.site.register(FragilityFunc, FragilityFuncAdmin)


EOF
