# Copyright (c) 2015, GEM Foundation.
#
# This program is free software: you can redistribute it and/or modify
# under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from django.utils.html import format_html
from django.forms.util import flatatt
from django.forms.widgets import Widget, TextInput

class TaxonomyInputBase(Widget):
    """
    Base class for all <input> widgets (except type='checkbox' and
    type='radio', which are special).
    """
    input_type = None # Subclasses must define this.

    def _format_value(self, value):
        if self.is_localized:
            return formats.localize_input(value)
        return value

    def render(self, name, value, attrs=None):
        if value is None:
            value = ''
        final_attrs = self.build_attrs(attrs, type=self.input_type, name=name)
        if value != '':
            # Only add the 'value' attribute if a value is non-empty.
            final_attrs['value'] = force_text(self._format_value(value))

        return format_html('<input{0} />&nbsp;&nbsp;<a style=\'font-size: 16px; font-weight: bold;\' href="#" onClick="var pu_win = window.open(\'/taxtweb/?is_popup=yes\', \'_blank\', \'scrollbars=no,resizable=yes, width=800,height=800,status=no,location=no,toolbar=no\');">TaxTweb</a>', flatatt(final_attrs))


class TaxonomyInput(TaxonomyInputBase):
    input_type = 'taxonomyinput'

    def __init__(self, attrs=None):
        if attrs is not None:
            self.input_type = attrs.pop('type', self.input_type)
        super(TaxonomyInput, self).__init__(attrs)
