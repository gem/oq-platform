# Copyright (c) 2012-2013, GEM Foundation.
#
# This program is free software: you can redistribute it and/or modify
# under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
import csv
from django.db import connections, transaction
from django.core.management.base import BaseCommand
from openquakeplatform.vulnerability.models import Country, REGIONS
# Accept big geometries
csv.field_size_limit(sys.maxsize)

def getcursor(route):
    """Return a cursor from a Django route"""
    return connections[route].cursor()


class Command(BaseCommand):
    args = '<csv filename>'
    help = 'Import csv of GEM countries'

    def handle(self, filename, *args, **options):
        # 'WKT' is needed if geometries are present
        wk_list = ['WKT', 'OBJECTID', 'NAME', 'ISO3', 'ISO2', 'FIPS',
                   'COUNTRY', 'ENGLISH', 'FRENCH', 'SPANISH', 'LOCAL', 'FAO',
                   'WAS_ISO', 'SOVEREIGN', 'CONTINENT', 'UNREG1', 'UNREG2',
                   'GEM_REG']
        # wk_list = ['OBJECTID', 'NAME', 'ISO3', 'ISO2', 'FIPS',
        #            'COUNTRY', 'ENGLISH', 'FRENCH', 'SPANISH', 'LOCAL', 'FAO',
        #            'WAS_ISO', 'SOVEREIGN', 'CONTINENT', 'UNREG1', 'UNREG2',
        #            'GEM_REG']

        data = csv.reader(open(filename))

        # skip empty lines or lines beginning with #
        while True:
            fields_ns = data.next()
            if len(fields_ns) < 1:
                continue
            s = fields_ns[0].strip()
            if s == '' or s[0] == '#':
                continue
            break

        fields = [field.strip() for field in fields_ns]

        if fields != wk_list:
            print "Unexpected fields in the input file"
            print "fields:", fields
            print "wk_list:", wk_list
            return False

        with transaction.commit_on_success(using='default'):
            cursor = getcursor('default')
            query = """ALTER TABLE vulnerability_geoapplicability_countries 
                           DROP CONSTRAINT vulnerability_geoapplicability_countries_country_id_fkey"""
            cursor.execute(query)

            Country.objects.all().delete()

            print 'Loading countries...'
            loaded_regions = []
            for row in data:
                items = zip(fields, row)
                item = {}

                for (name, value) in items:
                    if name in ['WKT', 'NAME', 'ISO3', 'GEM_REG']:
                        item[name] = value.strip()
                        if name == 'GEM_REG':
                            # Fix typo in the input
                            if item[name] == 'Antartica':
                                item[name] = 'Antarctica'
                            # retrieve region code, given the region name
                            found = [reg_code for (reg_code, reg_name) in REGIONS
                                     if reg_name == item[name]]
                            if not found:
                                print 'Region %s not found' % item[name]
                                region = ''
                            elif len(found) > 1:  # it should never happen
                                print 'Multiple codes for the same region name!?!?'
                                return False
                            else:
                                region = found[0]
                                loaded_regions.append((region, item[name]))

                country = Country(name=item['NAME'],
                                  iso3=item['ISO3'],
                                  region=region,
                                  the_geom=item['WKT'])

                country.save()

            # Save empty regions as pseudo-countries (including 'Worldwide')
            for region in REGIONS:
                if region[0] and region not in loaded_regions:
                    country = Country(name=region[1],
                                      iso3='',
                                      region=region[0],
                                      is_visible=False)
                    country.save()

            query = """ALTER TABLE vulnerability_geoapplicability_countries
                           ADD CONSTRAINT vulnerability_geoapplicability_countries_country_id_fkey
                           FOREIGN KEY (country_id) REFERENCES vulnerability_country(iso3)
                           DEFERRABLE INITIALLY DEFERRED"""
            cursor.execute(query)
