# Copyright (c) 2012-2013, GEM Foundation.
#
# This program is free software: you can redistribute it and/or modify
# under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
import csv
from django.core.management.base import BaseCommand

# Accept big geometries
csv.field_size_limit(sys.maxsize)


class Command(BaseCommand):
    args = '<csv input filename><csv output filename>'
    help = ('Read csv input file and write into the '
            'output filename max 2 countries per region')

    def handle(self, filename_in, filename_out, *args, **options):
        # 'WKT' is needed if geometries are present
        wk_list = ['WKT', 'OBJECTID', 'NAME', 'ISO3', 'ISO2', 'FIPS',
                   'COUNTRY', 'ENGLISH', 'FRENCH', 'SPANISH', 'LOCAL', 'FAO',
                   'WAS_ISO', 'SOVEREIGN', 'CONTINENT', 'UNREG1', 'UNREG2',
                   'GEM_REG']
        # wk_list = ['OBJECTID', 'NAME', 'ISO3', 'ISO2', 'FIPS',
        #            'COUNTRY', 'ENGLISH', 'FRENCH', 'SPANISH', 'LOCAL', 'FAO',
        #            'WAS_ISO', 'SOVEREIGN', 'CONTINENT', 'UNREG1', 'UNREG2',
        #            'GEM_REG']

        data = csv.reader(open(filename_in))

        # skip empty lines or lines beginning with #
        while True:
            fields_ns = data.next()
            if len(fields_ns) < 1:
                continue
            s = fields_ns[0].strip()
            if s == '' or s[0] == '#':
                continue
            break

        fields = [field.strip() for field in fields_ns]

        if fields != wk_list:
            print "Unexpected fields in the input file"
            print "fields:", fields
            print "wk_list:", wk_list
            return False

        # find the 2 smallest geometries for each region and store them in a
        # dictionary
        regions = {}
        for row in data:
            items = zip(fields, row)
            for (name, value) in items:
                if name == 'GEM_REG':
                    if value not in regions:
                        regions[value] = {}
                        regions[value]['count'] = 1
                        regions[value]['rows'] = [row]
                    elif regions[value]['count'] < 2:
                        regions[value]['count'] += 1
                        regions[value]['rows'].append(row)
                    else:
                        # if the new row is shorter than one of the previously
                        # stored rows for the same region, substitute the
                        # longer element with the new row
                        for idx, elem in enumerate(regions[value]['rows']):
                            # FIXME assuming that geometry is at index 0
                            if len(row[0]) < len(elem[0]):
                                regions[value]['rows'][idx] = row

        with open(filename_out, 'wb') as csvfile:
            csvwriter = csv.writer(csvfile)
            for region in regions:
                for row in regions[region]['rows']:
                    csvwriter.writerow(row)
